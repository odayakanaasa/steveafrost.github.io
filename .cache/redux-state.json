{
  "nodes": {
    "SitePage /dev-404-page/": {
      "path": "/dev-404-page/",
      "id": "SitePage /dev-404-page/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "f91d29e10ba680b413138cf9ed86e655",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin component-page-creator": {
      "resolve": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby/dist/internal-plugins/component-page-creator",
      "name": "component-page-creator",
      "version": "1.0.0",
      "pluginOptions": {
        "plugins": []
      },
      "pluginFilepath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby/dist/internal-plugins/component-page-creator",
      "packageJson": {
        "name": "component-page-creator",
        "description": "An internal Gatsby plugin that creates pages from component files in src/pages",
        "version": "1.0.0",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin"
        ],
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [],
        "devDependencies": [],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "id": "Plugin component-page-creator",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "103247021c95f4b964cd6af30ea2b6ff",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin internal-data-bridge": {
      "resolve": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby/dist/internal-plugins/internal-data-bridge",
      "name": "internal-data-bridge",
      "version": "1.0.0",
      "pluginOptions": {
        "plugins": []
      },
      "pluginFilepath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby/dist/internal-plugins/internal-data-bridge",
      "packageJson": {
        "name": "internal-data-bridge",
        "description": "An internal Gatsby plugin which creates data nodes from internal data",
        "version": "1.0.0",
        "main": "index.js",
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [],
        "devDependencies": [],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "id": "Plugin internal-data-bridge",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "b1d522814909166aa264d3e48ab39dce",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin dev-404-page": {
      "resolve": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby/dist/internal-plugins/dev-404-page",
      "name": "dev-404-page",
      "version": "1.0.0",
      "pluginOptions": {
        "plugins": []
      },
      "pluginFilepath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby/dist/internal-plugins/dev-404-page",
      "packageJson": {
        "name": "dev-404-page",
        "description": "Internal plugin to add a 404 page in development with helpful information",
        "version": "1.0.0",
        "main": "index.js",
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [],
        "devDependencies": [],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "id": "Plugin dev-404-page",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "577939801d89cc08132aa5f9831743d7",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin prod-404": {
      "resolve": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby/dist/internal-plugins/prod-404",
      "name": "prod-404",
      "version": "1.0.0",
      "pluginOptions": {
        "plugins": []
      },
      "pluginFilepath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby/dist/internal-plugins/prod-404",
      "packageJson": {
        "name": "prod-404",
        "description": "Internal plugin to detect various flavors of 404 pages and ensure there's a 404.html path created as well to ensure compatability with static hosts",
        "version": "1.0.0",
        "main": "index.js",
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [],
        "devDependencies": [],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "id": "Plugin prod-404",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "cd8852ed773ee69f9f6b030483cdd04c",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin query-runner": {
      "resolve": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby/dist/internal-plugins/query-runner",
      "name": "query-runner",
      "version": "1.0.0",
      "pluginOptions": {
        "plugins": []
      },
      "pluginFilepath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby/dist/internal-plugins/query-runner",
      "packageJson": {
        "name": "query-runner",
        "description": "Internal plugin for running queries",
        "version": "1.0.0",
        "main": "index.js",
        "author": "",
        "license": "MIT",
        "dependencies": [],
        "devDependencies": [],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "id": "Plugin query-runner",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "a8514d2724808e99b4689e7945d69ca5",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-source-filesystem": {
      "resolve": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby-source-filesystem",
      "name": "gatsby-source-filesystem",
      "version": "1.0.1",
      "pluginOptions": {
        "plugins": [],
        "path": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages",
        "name": "pages"
      },
      "pluginFilepath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby-source-filesystem",
      "packageJson": {
        "name": "gatsby-source-filesystem",
        "description": "Gatsby plugin which parses files within a directory for further parsing by other plugins",
        "version": "1.0.1",
        "keywords": [
          "gatsby",
          "gatsby-plugin"
        ],
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [
          {
            "name": "babel-cli",
            "version": "^6.24.1"
          },
          {
            "name": "bluebird",
            "version": "^3.5.0"
          },
          {
            "name": "chokidar",
            "version": "^1.7.0"
          },
          {
            "name": "pretty-bytes",
            "version": "^4.0.2"
          },
          {
            "name": "slash",
            "version": "^1.0.0"
          }
        ],
        "devDependencies": [],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "id": "Plugin gatsby-source-filesystem",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "52e582fde8d5efe8d06752b11772fdec",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-transformer-remark": {
      "resolve": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby-transformer-remark",
      "name": "gatsby-transformer-remark",
      "version": "1.1.0",
      "pluginOptions": {
        "plugins": [
          {
            "resolve": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby-remark-images",
            "name": "gatsby-remark-images",
            "version": "1.3.1",
            "pluginOptions": {
              "plugins": [],
              "maxWidth": 590
            },
            "pluginFilepath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby-remark-images"
          },
          {
            "resolve": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby-remark-responsive-iframe",
            "name": "gatsby-remark-responsive-iframe",
            "version": "1.3.0",
            "pluginOptions": {
              "plugins": [],
              "wrapperStyle": "margin-bottom: 1.0725rem"
            },
            "pluginFilepath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby-remark-responsive-iframe"
          },
          {
            "resolve": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby-remark-prismjs",
            "name": "gatsby-remark-prismjs",
            "version": "1.2.0",
            "pluginOptions": {
              "plugins": []
            },
            "pluginFilepath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby-remark-prismjs"
          },
          {
            "resolve": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby-remark-copy-linked-files",
            "name": "gatsby-remark-copy-linked-files",
            "version": "1.3.0",
            "pluginOptions": {
              "plugins": []
            },
            "pluginFilepath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby-remark-copy-linked-files"
          },
          {
            "resolve": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby-remark-smartypants",
            "name": "gatsby-remark-smartypants",
            "version": "1.0.1",
            "pluginOptions": {
              "plugins": []
            },
            "pluginFilepath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby-remark-smartypants"
          }
        ]
      },
      "pluginFilepath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby-transformer-remark",
      "packageJson": {
        "name": "gatsby-transformer-remark",
        "description": "Gatsby transformer plugin for Markdown using the Remark library and ecosystem",
        "version": "1.1.0",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "markdown",
          "remark"
        ],
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [
          {
            "name": "bluebird",
            "version": "^3.5.0"
          },
          {
            "name": "gray-matter",
            "version": "^2.1.0"
          },
          {
            "name": "hast-util-to-html",
            "version": "^3.0.0"
          },
          {
            "name": "lodash",
            "version": "^4.17.4"
          },
          {
            "name": "mdast-util-to-hast",
            "version": "^2.4.0"
          },
          {
            "name": "remark",
            "version": "^7.0.1"
          },
          {
            "name": "sanitize-html",
            "version": "^1.14.1"
          },
          {
            "name": "underscore.string",
            "version": "^3.3.4"
          },
          {
            "name": "unist-util-select",
            "version": "^1.5.0"
          },
          {
            "name": "unist-util-visit",
            "version": "^1.1.1"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.24.1"
          },
          {
            "name": "babel-plugin-transform-object-rest-spread",
            "version": "^6.20.2"
          }
        ],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "id": "Plugin gatsby-transformer-remark",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "0993a67a62a1ea9ef7dee030a84d52d3",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-remark-images": {
      "resolve": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby-remark-images",
      "name": "gatsby-remark-images",
      "version": "1.3.1",
      "pluginOptions": {
        "plugins": [],
        "maxWidth": 590
      },
      "pluginFilepath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby-remark-images",
      "packageJson": {
        "name": "gatsby-remark-images",
        "description": "Processes images in markdown so they can be used in the production build.",
        "version": "1.3.1",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "markdown",
          "remark",
          "image",
          "responsive images"
        ],
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [
          {
            "name": "cheerio",
            "version": "^1.0.0-rc.2"
          },
          {
            "name": "image-size",
            "version": "^0.5.1"
          },
          {
            "name": "is-relative-url",
            "version": "^2.0.0"
          },
          {
            "name": "lodash",
            "version": "^4.17.4"
          },
          {
            "name": "slash",
            "version": "^1.0.0"
          },
          {
            "name": "unist-util-select",
            "version": "^1.5.0"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.24.1"
          }
        ],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "id": "Plugin gatsby-remark-images",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "f462aade1dc964631b70e48767ebc50c",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-remark-responsive-iframe": {
      "resolve": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby-remark-responsive-iframe",
      "name": "gatsby-remark-responsive-iframe",
      "version": "1.3.0",
      "pluginOptions": {
        "plugins": [],
        "wrapperStyle": "margin-bottom: 1.0725rem"
      },
      "pluginFilepath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby-remark-responsive-iframe",
      "packageJson": {
        "name": "gatsby-remark-responsive-iframe",
        "description": "Make iframes in Markdown processed by Remark responsive",
        "version": "1.3.0",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "remark"
        ],
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [
          {
            "name": "bluebird",
            "version": "^3.5.0"
          },
          {
            "name": "cheerio",
            "version": "^1.0.0-rc.2"
          },
          {
            "name": "lodash",
            "version": "^4.17.4"
          },
          {
            "name": "unist-util-visit",
            "version": "^1.1.1"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.24.1"
          }
        ],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "id": "Plugin gatsby-remark-responsive-iframe",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "c4d25becd9374504ef90670d06f3b970",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-remark-prismjs": {
      "resolve": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby-remark-prismjs",
      "name": "gatsby-remark-prismjs",
      "version": "1.2.0",
      "pluginOptions": {
        "plugins": []
      },
      "pluginFilepath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby-remark-prismjs",
      "packageJson": {
        "name": "gatsby-remark-prismjs",
        "description": "Adds syntax highlighting to code blocks at build time using PrismJS",
        "version": "1.2.0",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "prismjs",
          "remark"
        ],
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [
          {
            "name": "parse-numeric-range",
            "version": "^0.0.2"
          },
          {
            "name": "prismjs",
            "version": "^1.6.0"
          },
          {
            "name": "unist-util-visit",
            "version": "^1.1.1"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.24.1"
          },
          {
            "name": "remark",
            "version": "^7.0.1"
          }
        ],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "id": "Plugin gatsby-remark-prismjs",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "85578d1935227c353542e787056409ae",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-remark-copy-linked-files": {
      "resolve": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby-remark-copy-linked-files",
      "name": "gatsby-remark-copy-linked-files",
      "version": "1.3.0",
      "pluginOptions": {
        "plugins": []
      },
      "pluginFilepath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby-remark-copy-linked-files",
      "packageJson": {
        "name": "gatsby-remark-copy-linked-files",
        "description": "Find files which are linked to from markdown and copy them to the public directory",
        "version": "1.3.0",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "prismjs",
          "remark"
        ],
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [
          {
            "name": "cheerio",
            "version": "^1.0.0-rc.2"
          },
          {
            "name": "fs-extra",
            "version": "^3.0.1"
          },
          {
            "name": "is-relative-url",
            "version": "^2.0.0"
          },
          {
            "name": "lodash",
            "version": "^4.17.4"
          },
          {
            "name": "unist-util-visit",
            "version": "^1.1.1"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.24.1"
          }
        ],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "id": "Plugin gatsby-remark-copy-linked-files",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "f0f609c001a6260812a6aedcdd104939",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-remark-smartypants": {
      "resolve": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby-remark-smartypants",
      "name": "gatsby-remark-smartypants",
      "version": "1.0.1",
      "pluginOptions": {
        "plugins": []
      },
      "pluginFilepath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby-remark-smartypants",
      "packageJson": {
        "name": "gatsby-remark-smartypants",
        "description": "Use retext-smartypants to auto-enhance typography of markdown",
        "version": "1.0.1",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "smartypants"
        ],
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [
          {
            "name": "retext",
            "version": "^4.0.0"
          },
          {
            "name": "retext-smartypants",
            "version": "^2.0.0"
          },
          {
            "name": "unist-util-visit",
            "version": "^1.1.1"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.24.1"
          }
        ],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "id": "Plugin gatsby-remark-smartypants",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "8f5b75801d1ba13e90e6e0e6735bc96a",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-transformer-sharp": {
      "resolve": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby-transformer-sharp",
      "name": "gatsby-transformer-sharp",
      "version": "1.0.1",
      "pluginOptions": {
        "plugins": []
      },
      "pluginFilepath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby-transformer-sharp",
      "packageJson": {
        "name": "gatsby-transformer-sharp",
        "description": "Gatsby transformer plugin for images using Sharp",
        "version": "1.0.1",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "sharp",
          "image"
        ],
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [
          {
            "name": "bluebird",
            "version": "^3.5.0"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.24.1"
          }
        ],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "id": "Plugin gatsby-transformer-sharp",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "e73bd835e09191fa2a0a5595a53f5121",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-plugin-sharp": {
      "resolve": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby-plugin-sharp",
      "name": "gatsby-plugin-sharp",
      "version": "1.3.0",
      "pluginOptions": {
        "plugins": []
      },
      "pluginFilepath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby-plugin-sharp",
      "packageJson": {
        "name": "gatsby-plugin-sharp",
        "description": "Wrapper of the Sharp image manipulation library for Gatsby plugins",
        "version": "1.3.0",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "image",
          "sharp"
        ],
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [
          {
            "name": "async",
            "version": "^2.1.2"
          },
          {
            "name": "bluebird",
            "version": "^3.5.0"
          },
          {
            "name": "image-size",
            "version": "^0.5.1"
          },
          {
            "name": "imagemin",
            "version": "^5.2.2"
          },
          {
            "name": "imagemin-pngquant",
            "version": "^5.0.0"
          },
          {
            "name": "lodash",
            "version": "^4.17.4"
          },
          {
            "name": "progress",
            "version": "^1.1.8"
          },
          {
            "name": "sharp",
            "version": "^0.17.3"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.24.1"
          }
        ],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "id": "Plugin gatsby-plugin-sharp",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "de6e858a252be11c7b6f0292017643f6",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-plugin-google-analytics": {
      "resolve": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby-plugin-google-analytics",
      "name": "gatsby-plugin-google-analytics",
      "version": "1.0.1",
      "pluginOptions": {
        "plugins": [],
        "trackingId": "UA-38981959-1"
      },
      "pluginFilepath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby-plugin-google-analytics",
      "packageJson": {
        "name": "gatsby-plugin-google-analytics",
        "description": "Gatsby plugin to add google analytics onto a site",
        "version": "1.0.1",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "google analytics"
        ],
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.24.1"
          }
        ],
        "dependencies": [],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "id": "Plugin gatsby-plugin-google-analytics",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "691b9b71e6b0b63a65a5b60b962ac4e3",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-plugin-offline": {
      "resolve": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby-plugin-offline",
      "name": "gatsby-plugin-offline",
      "version": "1.0.1",
      "pluginOptions": {
        "plugins": []
      },
      "pluginFilepath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby-plugin-offline",
      "packageJson": {
        "name": "gatsby-plugin-offline",
        "description": "Gatsby plugin which sets up a site to be able to run offline",
        "version": "1.0.1",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "offline",
          "precache",
          "service-worker"
        ],
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [
          {
            "name": "sw-precache",
            "version": "^5.0.0"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.24.1"
          }
        ],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "id": "Plugin gatsby-plugin-offline",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "7a3525df5bbf927fed6f623e53a68ccb",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-plugin-react-helmet": {
      "resolve": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby-plugin-react-helmet",
      "name": "gatsby-plugin-react-helmet",
      "version": "1.0.1",
      "pluginOptions": {
        "plugins": []
      },
      "pluginFilepath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby-plugin-react-helmet",
      "packageJson": {
        "name": "gatsby-plugin-react-helmet",
        "description": "Stub description for gatsby-plugin-react-helmet",
        "version": "1.0.1",
        "main": "index.js",
        "keywords": [
          "gatsby"
        ],
        "author": "Kyle Mathews &lt;mathews.kyle@gmail.com&gt;",
        "license": "MIT",
        "dependencies": [
          {
            "name": "react-helmet",
            "version": "^5.1.3"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.24.1"
          }
        ],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "id": "Plugin gatsby-plugin-react-helmet",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "65b470452ff71294b1cf604102c92a4a",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin default-site-plugin": {
      "resolve": "/Users/stevefrost/Development/Websites/steveafrost.github.io",
      "name": "default-site-plugin",
      "version": "bc3ddce41fab0c11abceac99bce5445d",
      "pluginOptions": {
        "plugins": []
      },
      "pluginFilepath": "/Users/stevefrost/Development/Websites/steveafrost.github.io",
      "packageJson": {
        "name": "gatsby-starter-blog",
        "description": "Starter Gatsby Blog",
        "version": "1.0.0",
        "main": "n/a",
        "keywords": [
          "gatsby"
        ],
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [
          {
            "name": "gatsby",
            "version": "^1.3.2"
          },
          {
            "name": "gatsby-link",
            "version": "^1.0.0"
          },
          {
            "name": "gatsby-plugin-google-analytics",
            "version": "^1.0.0"
          },
          {
            "name": "gatsby-plugin-manifest",
            "version": "^1.0.0"
          },
          {
            "name": "gatsby-plugin-offline",
            "version": "^1.0.0"
          },
          {
            "name": "gatsby-plugin-preact",
            "version": "^1.0.0"
          },
          {
            "name": "gatsby-plugin-react-helmet",
            "version": "^1.0.0"
          },
          {
            "name": "gatsby-plugin-sharp",
            "version": "^1.0.0"
          },
          {
            "name": "gatsby-remark-copy-linked-files",
            "version": "^1.0.0"
          },
          {
            "name": "gatsby-remark-images",
            "version": "^1.0.0"
          },
          {
            "name": "gatsby-remark-prismjs",
            "version": "^1.0.0"
          },
          {
            "name": "gatsby-remark-responsive-iframe",
            "version": "^1.0.0"
          },
          {
            "name": "gatsby-remark-smartypants",
            "version": "^1.0.0"
          },
          {
            "name": "gatsby-source-filesystem",
            "version": "^1.0.0"
          },
          {
            "name": "gatsby-transformer-remark",
            "version": "^1.0.0"
          },
          {
            "name": "gatsby-transformer-sharp",
            "version": "^1.0.0"
          },
          {
            "name": "lodash",
            "version": "^4.15.0"
          },
          {
            "name": "react-responsive-grid",
            "version": "^0.3.3"
          },
          {
            "name": "react-typography",
            "version": "^0.15.0"
          },
          {
            "name": "typeface-merriweather",
            "version": "^0.0.25"
          },
          {
            "name": "typeface-montserrat",
            "version": "^0.0.24"
          },
          {
            "name": "typography",
            "version": "^0.15.8"
          },
          {
            "name": "typography-theme-wordpress-2016",
            "version": "^0.15.1"
          }
        ],
        "devDependencies": [
          {
            "name": "gh-pages",
            "version": "^0.12.0"
          },
          {
            "name": "git-scripts",
            "version": "^0.2.1"
          },
          {
            "name": "surge",
            "version": "^0.19.0"
          }
        ],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "id": "Plugin default-site-plugin",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "c6470b499a540a184956aa4ac2453e4f",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Site": {
      "siteMetadata": {
        "title": "Steve Frost – Full Stack Web Developer",
        "author": "Steve Frost"
      },
      "pathPrefix": "",
      "buildTime": "2017-07-28T04:30:45.857Z",
      "id": "Site",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "6bdf08756c95f73e48513dab260a7ff8",
        "type": "Site",
        "owner": "internal-data-bridge"
      }
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/.DS_Store absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/.DS_Store absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "650f564b9b822fe29663097a066662ec",
        "mediaType": "application/octet-stream",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/.DS_Store",
      "relativePath": ".DS_Store",
      "extension": "",
      "size": 6148,
      "prettySize": "6.15 kB",
      "modifiedTime": "2017-07-24T03:05:47.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:05:47.000Z",
      "birthTime": "2017-07-24T03:05:33.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages",
      "base": ".DS_Store",
      "ext": "",
      "name": ".DS_Store",
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8794930,
      "blocks": 16,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:05:47.000Z",
      "ctime": "2017-07-24T03:05:47.000Z",
      "birthtime": "2017-07-24T03:05:33.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/favicon.ico absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/favicon.ico absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "c6acedaff906029fc5455d9ec52c7f42",
        "mediaType": "image/x-icon",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/favicon.ico",
      "relativePath": "favicon.ico",
      "extension": "ico",
      "size": 198,
      "prettySize": "198 B",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages",
      "base": "favicon.ico",
      "ext": ".ico",
      "name": "favicon",
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814277,
      "blocks": 8,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/index.js absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/index.js absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "f08050849a2a1f8160d9c63af76367bf",
        "mediaType": "application/javascript",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/index.js",
      "relativePath": "index.js",
      "extension": "js",
      "size": 1596,
      "prettySize": "1.6 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages",
      "base": "index.js",
      "ext": ".js",
      "name": "index",
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814278,
      "blocks": 8,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/robots.txt absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/robots.txt absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "b6216d61c03e6ce0c9aea6ca7808f7ca",
        "mediaType": "text/plain",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/robots.txt",
      "relativePath": "robots.txt",
      "extension": "txt",
      "size": 24,
      "prettySize": "24 B",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages",
      "base": "robots.txt",
      "ext": ".txt",
      "name": "robots",
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814279,
      "blocks": 8,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/a-greenhorns-approach-to-angular.md absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/a-greenhorns-approach-to-angular.md absPath of file",
      "children": [
        "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/a-greenhorns-approach-to-angular.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "bc67f01c35da6feba1d4032f31c9cb9b",
        "mediaType": "text/x-markdown",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/a-greenhorns-approach-to-angular.md",
      "relativePath": "articles/a-greenhorns-approach-to-angular.md",
      "extension": "md",
      "size": 10029,
      "prettySize": "10 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles",
      "base": "a-greenhorns-approach-to-angular.md",
      "ext": ".md",
      "name": "a-greenhorns-approach-to-angular",
      "dev": 16777220,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814240,
      "blocks": 24,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/building-a-website-using-middleman.md absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/building-a-website-using-middleman.md absPath of file",
      "children": [
        "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/building-a-website-using-middleman.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "c8183f31c842b849eda259cb53c782bb",
        "mediaType": "text/x-markdown",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/building-a-website-using-middleman.md",
      "relativePath": "articles/building-a-website-using-middleman.md",
      "extension": "md",
      "size": 6792,
      "prettySize": "6.79 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles",
      "base": "building-a-website-using-middleman.md",
      "ext": ".md",
      "name": "building-a-website-using-middleman",
      "dev": 16777220,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814242,
      "blocks": 16,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/busting-cache-with-asset-hash.md absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/busting-cache-with-asset-hash.md absPath of file",
      "children": [
        "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/busting-cache-with-asset-hash.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "7e4109717e9524658bc9f01419fa11c6",
        "mediaType": "text/x-markdown",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/busting-cache-with-asset-hash.md",
      "relativePath": "articles/busting-cache-with-asset-hash.md",
      "extension": "md",
      "size": 2726,
      "prettySize": "2.73 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles",
      "base": "busting-cache-with-asset-hash.md",
      "ext": ".md",
      "name": "busting-cache-with-asset-hash",
      "dev": 16777220,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814243,
      "blocks": 8,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/comparing-flexbox-and-grid.md absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/comparing-flexbox-and-grid.md absPath of file",
      "children": [
        "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/comparing-flexbox-and-grid.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "21de457048ed88c9c2ec624f57b0c3f2",
        "mediaType": "text/x-markdown",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/comparing-flexbox-and-grid.md",
      "relativePath": "articles/comparing-flexbox-and-grid.md",
      "extension": "md",
      "size": 2730,
      "prettySize": "2.73 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles",
      "base": "comparing-flexbox-and-grid.md",
      "ext": ".md",
      "name": "comparing-flexbox-and-grid",
      "dev": 16777220,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814245,
      "blocks": 8,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/composing-a-crud-app-in-sinatra.md absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/composing-a-crud-app-in-sinatra.md absPath of file",
      "children": [
        "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/composing-a-crud-app-in-sinatra.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "a535b41243c5ee7a34a26e9bb62f619b",
        "mediaType": "text/x-markdown",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/composing-a-crud-app-in-sinatra.md",
      "relativePath": "articles/composing-a-crud-app-in-sinatra.md",
      "extension": "md",
      "size": 5613,
      "prettySize": "5.61 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles",
      "base": "composing-a-crud-app-in-sinatra.md",
      "ext": ".md",
      "name": "composing-a-crud-app-in-sinatra",
      "dev": 16777220,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814246,
      "blocks": 16,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/building-a-ruby-gem-the-experience.md absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/building-a-ruby-gem-the-experience.md absPath of file",
      "children": [
        "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/building-a-ruby-gem-the-experience.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "4f4c29eb3e770cb38275ac3cceae8e04",
        "mediaType": "text/x-markdown",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/building-a-ruby-gem-the-experience.md",
      "relativePath": "articles/building-a-ruby-gem-the-experience.md",
      "extension": "md",
      "size": 4148,
      "prettySize": "4.15 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles",
      "base": "building-a-ruby-gem-the-experience.md",
      "ext": ".md",
      "name": "building-a-ruby-gem-the-experience",
      "dev": 16777220,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814241,
      "blocks": 16,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/dear-sprouting-developers.md absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/dear-sprouting-developers.md absPath of file",
      "children": [
        "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/dear-sprouting-developers.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "9f308badc08e7abc3f3442d1ec60720a",
        "mediaType": "text/x-markdown",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/dear-sprouting-developers.md",
      "relativePath": "articles/dear-sprouting-developers.md",
      "extension": "md",
      "size": 4122,
      "prettySize": "4.12 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles",
      "base": "dear-sprouting-developers.md",
      "ext": ".md",
      "name": "dear-sprouting-developers",
      "dev": 16777220,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814247,
      "blocks": 16,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/code-pause-run-tell-that.md absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/code-pause-run-tell-that.md absPath of file",
      "children": [
        "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/code-pause-run-tell-that.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "7b4daf7cc930b16ae4d3d6da7399dad5",
        "mediaType": "text/x-markdown",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/code-pause-run-tell-that.md",
      "relativePath": "articles/code-pause-run-tell-that.md",
      "extension": "md",
      "size": 4280,
      "prettySize": "4.28 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles",
      "base": "code-pause-run-tell-that.md",
      "ext": ".md",
      "name": "code-pause-run-tell-that",
      "dev": 16777220,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814244,
      "blocks": 16,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/deploying-daily-documentary-rails-angular.md absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/deploying-daily-documentary-rails-angular.md absPath of file",
      "children": [
        "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/deploying-daily-documentary-rails-angular.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "0d04beb0e6095e6626d0f830631fed83",
        "mediaType": "text/x-markdown",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/deploying-daily-documentary-rails-angular.md",
      "relativePath": "articles/deploying-daily-documentary-rails-angular.md",
      "extension": "md",
      "size": 6200,
      "prettySize": "6.2 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles",
      "base": "deploying-daily-documentary-rails-angular.md",
      "ext": ".md",
      "name": "deploying-daily-documentary-rails-angular",
      "dev": 16777220,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814248,
      "blocks": 16,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/first-impressions-gatsby-js.md absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/first-impressions-gatsby-js.md absPath of file",
      "children": [
        "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/first-impressions-gatsby-js.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "b014a11846ec8bcf793b8b7073805cb4",
        "mediaType": "text/x-markdown",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/first-impressions-gatsby-js.md",
      "relativePath": "articles/first-impressions-gatsby-js.md",
      "extension": "md",
      "size": 2657,
      "prettySize": "2.66 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles",
      "base": "first-impressions-gatsby-js.md",
      "ext": ".md",
      "name": "first-impressions-gatsby-js",
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814251,
      "blocks": 8,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/exploring-active-record.md absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/exploring-active-record.md absPath of file",
      "children": [
        "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/exploring-active-record.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "c8c401770eea83767aef77872d14cc19",
        "mediaType": "text/x-markdown",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/exploring-active-record.md",
      "relativePath": "articles/exploring-active-record.md",
      "extension": "md",
      "size": 3677,
      "prettySize": "3.68 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles",
      "base": "exploring-active-record.md",
      "ext": ".md",
      "name": "exploring-active-record",
      "dev": 16777220,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814250,
      "blocks": 8,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/discovering-the-minimax-algorithm.md absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/discovering-the-minimax-algorithm.md absPath of file",
      "children": [
        "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/discovering-the-minimax-algorithm.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "07357c367836e7864df5612fbec84a51",
        "mediaType": "text/x-markdown",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/discovering-the-minimax-algorithm.md",
      "relativePath": "articles/discovering-the-minimax-algorithm.md",
      "extension": "md",
      "size": 7245,
      "prettySize": "7.25 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles",
      "base": "discovering-the-minimax-algorithm.md",
      "ext": ".md",
      "name": "discovering-the-minimax-algorithm",
      "dev": 16777220,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814249,
      "blocks": 16,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/first-impressions-trellis.md absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/first-impressions-trellis.md absPath of file",
      "children": [
        "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/first-impressions-trellis.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "c7b069c4142f3ac6671dc7c4c89a559d",
        "mediaType": "text/x-markdown",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/first-impressions-trellis.md",
      "relativePath": "articles/first-impressions-trellis.md",
      "extension": "md",
      "size": 8156,
      "prettySize": "8.16 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles",
      "base": "first-impressions-trellis.md",
      "ext": ".md",
      "name": "first-impressions-trellis",
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814252,
      "blocks": 16,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/first-impressions-yarn-package-manager.md absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/first-impressions-yarn-package-manager.md absPath of file",
      "children": [
        "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/first-impressions-yarn-package-manager.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "c41ccfd66e5fcc79d3a3e8884979fb60",
        "mediaType": "text/x-markdown",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/first-impressions-yarn-package-manager.md",
      "relativePath": "articles/first-impressions-yarn-package-manager.md",
      "extension": "md",
      "size": 4683,
      "prettySize": "4.68 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles",
      "base": "first-impressions-yarn-package-manager.md",
      "ext": ".md",
      "name": "first-impressions-yarn-package-manager",
      "dev": 16777220,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814253,
      "blocks": 16,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/laying-the-foundation-for-a-website.md absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/laying-the-foundation-for-a-website.md absPath of file",
      "children": [
        "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/laying-the-foundation-for-a-website.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "8585cb168b0c5ac7eac0b1f94925313a",
        "mediaType": "text/x-markdown",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/laying-the-foundation-for-a-website.md",
      "relativePath": "articles/laying-the-foundation-for-a-website.md",
      "extension": "md",
      "size": 5317,
      "prettySize": "5.32 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles",
      "base": "laying-the-foundation-for-a-website.md",
      "ext": ".md",
      "name": "laying-the-foundation-for-a-website",
      "dev": 16777220,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814257,
      "blocks": 16,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/grasping-declarative-programming.md absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/grasping-declarative-programming.md absPath of file",
      "children": [
        "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/grasping-declarative-programming.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "dd0f7a22052c12eb35dba0c02c32566d",
        "mediaType": "text/x-markdown",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/grasping-declarative-programming.md",
      "relativePath": "articles/grasping-declarative-programming.md",
      "extension": "md",
      "size": 3999,
      "prettySize": "4 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles",
      "base": "grasping-declarative-programming.md",
      "ext": ".md",
      "name": "grasping-declarative-programming",
      "dev": 16777220,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814254,
      "blocks": 8,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/honeypotting-simple-spam-prevention.md absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/honeypotting-simple-spam-prevention.md absPath of file",
      "children": [
        "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/honeypotting-simple-spam-prevention.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "d9048726a614eb08f12d8b2fe77ded07",
        "mediaType": "text/x-markdown",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/honeypotting-simple-spam-prevention.md",
      "relativePath": "articles/honeypotting-simple-spam-prevention.md",
      "extension": "md",
      "size": 4989,
      "prettySize": "4.99 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles",
      "base": "honeypotting-simple-spam-prevention.md",
      "ext": ".md",
      "name": "honeypotting-simple-spam-prevention",
      "dev": 16777220,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814255,
      "blocks": 16,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/learning-a-second-programming-language.md absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/learning-a-second-programming-language.md absPath of file",
      "children": [
        "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/learning-a-second-programming-language.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "e844a91e8aa6e4e3ecbc770a41f34c5d",
        "mediaType": "text/x-markdown",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/learning-a-second-programming-language.md",
      "relativePath": "articles/learning-a-second-programming-language.md",
      "extension": "md",
      "size": 6465,
      "prettySize": "6.46 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles",
      "base": "learning-a-second-programming-language.md",
      "ext": ".md",
      "name": "learning-a-second-programming-language",
      "dev": 16777220,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814258,
      "blocks": 16,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/javascript-type-coercion.md absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/javascript-type-coercion.md absPath of file",
      "children": [
        "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/javascript-type-coercion.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "ff9d08f7471e712138a0dbf4056dd14d",
        "mediaType": "text/x-markdown",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/javascript-type-coercion.md",
      "relativePath": "articles/javascript-type-coercion.md",
      "extension": "md",
      "size": 4365,
      "prettySize": "4.37 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles",
      "base": "javascript-type-coercion.md",
      "ext": ".md",
      "name": "javascript-type-coercion",
      "dev": 16777220,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814256,
      "blocks": 16,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/object-models-in-ruby.md absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/object-models-in-ruby.md absPath of file",
      "children": [
        "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/object-models-in-ruby.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "5c5905188013971f5706556c35205c01",
        "mediaType": "text/x-markdown",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/object-models-in-ruby.md",
      "relativePath": "articles/object-models-in-ruby.md",
      "extension": "md",
      "size": 4252,
      "prettySize": "4.25 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles",
      "base": "object-models-in-ruby.md",
      "ext": ".md",
      "name": "object-models-in-ruby",
      "dev": 16777220,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814261,
      "blocks": 16,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/learning-crud-with-monster-trucks.md absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/learning-crud-with-monster-trucks.md absPath of file",
      "children": [
        "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/learning-crud-with-monster-trucks.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "c9c2545662005bd0870fdfd7a8c0c870",
        "mediaType": "text/x-markdown",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/learning-crud-with-monster-trucks.md",
      "relativePath": "articles/learning-crud-with-monster-trucks.md",
      "extension": "md",
      "size": 3967,
      "prettySize": "3.97 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles",
      "base": "learning-crud-with-monster-trucks.md",
      "ext": ".md",
      "name": "learning-crud-with-monster-trucks",
      "dev": 16777220,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814259,
      "blocks": 8,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/preprocessing-bundling-and-live-preview-with-gulp.md absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/preprocessing-bundling-and-live-preview-with-gulp.md absPath of file",
      "children": [
        "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/preprocessing-bundling-and-live-preview-with-gulp.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "881ed3122d503c59a10ff3cbf1971f3c",
        "mediaType": "text/x-markdown",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/preprocessing-bundling-and-live-preview-with-gulp.md",
      "relativePath": "articles/preprocessing-bundling-and-live-preview-with-gulp.md",
      "extension": "md",
      "size": 8580,
      "prettySize": "8.58 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles",
      "base": "preprocessing-bundling-and-live-preview-with-gulp.md",
      "ext": ".md",
      "name": "preprocessing-bundling-and-live-preview-with-gulp",
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814263,
      "blocks": 24,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/long-days-journey-into-web-development.md absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/long-days-journey-into-web-development.md absPath of file",
      "children": [
        "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/long-days-journey-into-web-development.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "aac0bb2776671f529ad0acc54cfd7870",
        "mediaType": "text/x-markdown",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/long-days-journey-into-web-development.md",
      "relativePath": "articles/long-days-journey-into-web-development.md",
      "extension": "md",
      "size": 3014,
      "prettySize": "3.01 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles",
      "base": "long-days-journey-into-web-development.md",
      "ext": ".md",
      "name": "long-days-journey-into-web-development",
      "dev": 16777220,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814260,
      "blocks": 8,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/questioning-the-quirks-of-php.md absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/questioning-the-quirks-of-php.md absPath of file",
      "children": [
        "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/questioning-the-quirks-of-php.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "7fc0098a5e114a8f25f260815aac081c",
        "mediaType": "text/x-markdown",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/questioning-the-quirks-of-php.md",
      "relativePath": "articles/questioning-the-quirks-of-php.md",
      "extension": "md",
      "size": 3455,
      "prettySize": "3.46 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles",
      "base": "questioning-the-quirks-of-php.md",
      "ext": ".md",
      "name": "questioning-the-quirks-of-php",
      "dev": 16777220,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814265,
      "blocks": 8,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/plant-nanny-keep-your-plants-happy.md absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/plant-nanny-keep-your-plants-happy.md absPath of file",
      "children": [
        "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/plant-nanny-keep-your-plants-happy.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "6e91e7db635d0f10500ae417aa3b0213",
        "mediaType": "text/x-markdown",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/plant-nanny-keep-your-plants-happy.md",
      "relativePath": "articles/plant-nanny-keep-your-plants-happy.md",
      "extension": "md",
      "size": 2995,
      "prettySize": "3 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles",
      "base": "plant-nanny-keep-your-plants-happy.md",
      "ext": ".md",
      "name": "plant-nanny-keep-your-plants-happy",
      "dev": 16777220,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814262,
      "blocks": 8,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/protect-yoself-data-privacy-day-2017.md absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/protect-yoself-data-privacy-day-2017.md absPath of file",
      "children": [
        "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/protect-yoself-data-privacy-day-2017.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "2040a08ee2bb7d5dcd5c3f8e590c6301",
        "mediaType": "text/x-markdown",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/protect-yoself-data-privacy-day-2017.md",
      "relativePath": "articles/protect-yoself-data-privacy-day-2017.md",
      "extension": "md",
      "size": 6016,
      "prettySize": "6.02 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles",
      "base": "protect-yoself-data-privacy-day-2017.md",
      "ext": ".md",
      "name": "protect-yoself-data-privacy-day-2017",
      "dev": 16777220,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814264,
      "blocks": 16,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/quirks-of-display-inline-block.md absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/quirks-of-display-inline-block.md absPath of file",
      "children": [
        "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/quirks-of-display-inline-block.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "9b9c56c4c5738b05d5422fb28b0404cd",
        "mediaType": "text/x-markdown",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/quirks-of-display-inline-block.md",
      "relativePath": "articles/quirks-of-display-inline-block.md",
      "extension": "md",
      "size": 7956,
      "prettySize": "7.96 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles",
      "base": "quirks-of-display-inline-block.md",
      "ext": ".md",
      "name": "quirks-of-display-inline-block",
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814266,
      "blocks": 16,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/responsive-css-with-rems-and-ems.md absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/responsive-css-with-rems-and-ems.md absPath of file",
      "children": [
        "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/responsive-css-with-rems-and-ems.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "1e6f2ceeee4ef60713f12c6a6b6dc9a9",
        "mediaType": "text/x-markdown",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/responsive-css-with-rems-and-ems.md",
      "relativePath": "articles/responsive-css-with-rems-and-ems.md",
      "extension": "md",
      "size": 4336,
      "prettySize": "4.34 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles",
      "base": "responsive-css-with-rems-and-ems.md",
      "ext": ".md",
      "name": "responsive-css-with-rems-and-ems",
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814268,
      "blocks": 16,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/regex-lookahead-and-lookbehind.md absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/regex-lookahead-and-lookbehind.md absPath of file",
      "children": [
        "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/regex-lookahead-and-lookbehind.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "3639661ffd15410836cd7cf7de2e9d70",
        "mediaType": "text/x-markdown",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/regex-lookahead-and-lookbehind.md",
      "relativePath": "articles/regex-lookahead-and-lookbehind.md",
      "extension": "md",
      "size": 4540,
      "prettySize": "4.54 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles",
      "base": "regex-lookahead-and-lookbehind.md",
      "ext": ".md",
      "name": "regex-lookahead-and-lookbehind",
      "dev": 16777220,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814267,
      "blocks": 16,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/staying-focused-staying-sharp.md absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/staying-focused-staying-sharp.md absPath of file",
      "children": [
        "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/staying-focused-staying-sharp.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "b8ba60a404704043faca99aef7018a01",
        "mediaType": "text/x-markdown",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/staying-focused-staying-sharp.md",
      "relativePath": "articles/staying-focused-staying-sharp.md",
      "extension": "md",
      "size": 3162,
      "prettySize": "3.16 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles",
      "base": "staying-focused-staying-sharp.md",
      "ext": ".md",
      "name": "staying-focused-staying-sharp",
      "dev": 16777220,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814270,
      "blocks": 8,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/setting-up-a-local-wordpress-environment.md absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/setting-up-a-local-wordpress-environment.md absPath of file",
      "children": [
        "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/setting-up-a-local-wordpress-environment.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "d28b14f10f45bb8427e7fcaa7f032b9d",
        "mediaType": "text/x-markdown",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/setting-up-a-local-wordpress-environment.md",
      "relativePath": "articles/setting-up-a-local-wordpress-environment.md",
      "extension": "md",
      "size": 6341,
      "prettySize": "6.34 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles",
      "base": "setting-up-a-local-wordpress-environment.md",
      "ext": ".md",
      "name": "setting-up-a-local-wordpress-environment",
      "dev": 16777220,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814269,
      "blocks": 16,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/templating-with-solely-json.md absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/templating-with-solely-json.md absPath of file",
      "children": [
        "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/templating-with-solely-json.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "c90c3c45aa8b49b27b35cd9a3ebc5b21",
        "mediaType": "text/x-markdown",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/templating-with-solely-json.md",
      "relativePath": "articles/templating-with-solely-json.md",
      "extension": "md",
      "size": 5302,
      "prettySize": "5.3 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles",
      "base": "templating-with-solely-json.md",
      "ext": ".md",
      "name": "templating-with-solely-json",
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814271,
      "blocks": 16,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/two-weeks-deep-into-coding-school.md absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/two-weeks-deep-into-coding-school.md absPath of file",
      "children": [
        "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/two-weeks-deep-into-coding-school.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "1ad712ddf4344d0d3f8b0fdaf435fbd2",
        "mediaType": "text/x-markdown",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/two-weeks-deep-into-coding-school.md",
      "relativePath": "articles/two-weeks-deep-into-coding-school.md",
      "extension": "md",
      "size": 2132,
      "prettySize": "2.13 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles",
      "base": "two-weeks-deep-into-coding-school.md",
      "ext": ".md",
      "name": "two-weeks-deep-into-coding-school",
      "dev": 16777220,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814272,
      "blocks": 8,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/unearthing-javascript-modules.md absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/unearthing-javascript-modules.md absPath of file",
      "children": [
        "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/unearthing-javascript-modules.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "f3e9a924a8664cfe35dbcac8f658d3de",
        "mediaType": "text/x-markdown",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/unearthing-javascript-modules.md",
      "relativePath": "articles/unearthing-javascript-modules.md",
      "extension": "md",
      "size": 6687,
      "prettySize": "6.69 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles",
      "base": "unearthing-javascript-modules.md",
      "ext": ".md",
      "name": "unearthing-javascript-modules",
      "dev": 16777220,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814273,
      "blocks": 16,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/using-homebrew-the-best-package-manager-for-macos.md absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/using-homebrew-the-best-package-manager-for-macos.md absPath of file",
      "children": [
        "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/using-homebrew-the-best-package-manager-for-macos.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "f9c431005cba6a236ae1f2aab3d9329a",
        "mediaType": "text/x-markdown",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/using-homebrew-the-best-package-manager-for-macos.md",
      "relativePath": "articles/using-homebrew-the-best-package-manager-for-macos.md",
      "extension": "md",
      "size": 5441,
      "prettySize": "5.44 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles",
      "base": "using-homebrew-the-best-package-manager-for-macos.md",
      "ext": ".md",
      "name": "using-homebrew-the-best-package-manager-for-macos",
      "dev": 16777220,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814274,
      "blocks": 16,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/what-are-php-data-objects.md absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/what-are-php-data-objects.md absPath of file",
      "children": [
        "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/what-are-php-data-objects.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "d567cdc99159eaa146b947152413ece6",
        "mediaType": "text/x-markdown",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/what-are-php-data-objects.md",
      "relativePath": "articles/what-are-php-data-objects.md",
      "extension": "md",
      "size": 2777,
      "prettySize": "2.78 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles",
      "base": "what-are-php-data-objects.md",
      "ext": ".md",
      "name": "what-are-php-data-objects",
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814276,
      "blocks": 8,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/wandering-through-javascript-closures.md absPath of file": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/wandering-through-javascript-closures.md absPath of file",
      "children": [
        "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/wandering-through-javascript-closures.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "3f8e47eb5ff990a03cff4751ed68937c",
        "mediaType": "text/x-markdown",
        "type": "File",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/wandering-through-javascript-closures.md",
      "relativePath": "articles/wandering-through-javascript-closures.md",
      "extension": "md",
      "size": 4141,
      "prettySize": "4.14 kB",
      "modifiedTime": "2017-07-24T03:44:32.000Z",
      "accessTime": "2017-07-28T04:30:49.000Z",
      "changeTime": "2017-07-24T03:44:32.000Z",
      "birthTime": "2017-07-24T03:44:32.000Z",
      "root": "/",
      "dir": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles",
      "base": "wandering-through-javascript-closures.md",
      "ext": ".md",
      "name": "wandering-through-javascript-closures",
      "dev": 16777220,
      "mode": 33261,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 8814275,
      "blocks": 16,
      "atime": "2017-07-28T04:30:49.000Z",
      "mtime": "2017-07-24T03:44:32.000Z",
      "ctime": "2017-07-24T03:44:32.000Z",
      "birthtime": "2017-07-24T03:44:32.000Z"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/a-greenhorns-approach-to-angular.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/a-greenhorns-approach-to-angular.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/a-greenhorns-approach-to-angular.md absPath of file",
      "internal": {
        "content": "---\nlayout: post\ntitle: \"A Greenhorn's Approach to Angular\"\nauthor: Steve Frost\ndate: 2017-1-18 23:00:00 -04:00\ncategories: blog\ntags: flatiron-school learning-to-code angular javascript ruby rails project\ndescription: \"A synopsis of what I learned by building my first Angular web app including the resources that were helpful to me, the hang ups, and the engineering decisions that were constructed on my first Angular project.\"\ncomments: true\npath: \"/articles/a-greenhorns-approach-to-angular\"\n---\n\nI started learning Angular over a month ago as part of my final section at Flatiron School... about a week ago I actually started to understand Angular, I think. This seems to be the typical trajectory, and sentiment, as there is _so_ much information on what Angular is and how Angular is done. After reading material, watching tutorials, and practicing small segments of Angular, I started on my final project a few weeks ago. There were [several specific specs](https://github.com/steveafrost/daily-documentary/blob/master/spec.md) provided for the project with the general idea being that the back-end would be Rails while the front-end would be Angular.\n\nIn this post I'll provide the material that was useful to me when starting out on Angular, the hang ups, and the engineering decisions that were constructed on my first Angular project.\n\n### Front-End Package Management\n\nImmediately upon starting my project I was met with something I've never dabbled with before - installing & maintaining front-end dependencies for Javascript. At this point, I had heard somewhat about different tools on the JS scene like [NPM](https://www.npmjs.com/), [Bower](https://bower.io/), and [Yarn](https://yarnpkg.com/). A majority of the [Angular tutorial videos](https://www.youtube.com/watch?v=zKkUN-mJtPQ) that I watched used Bower so I set down that road at first until I came along a recent development called RailsAssets in [this valuable GoRails video](https://gorails.com/episodes/rails-assets).\n\nIf you're using Rails, I really like [Rails Assets](https://rails-assets.org/#/) over Bower. More or less, Rails Assets will look at the same repo file Bower would (bower.json) and then it repackages that manifest file into a gem. This all happens on the Rails Assets backend and the only thing needed on your side is to include a block w/ a new source for gems and then list the gem.\n\n```ruby\nsource 'https://rubygems.org'\n\ngem 'rails'\ngem 'sass-rails'\ngem 'uglifier'\ngem 'coffee-rails'\n\nsource 'https://rails-assets.org' do\n  gem 'rails-assets-bootstrap'\n  gem 'rails-assets-angular'\n  gem 'rails-assets-leaflet'\nend\n```\n\nUsing Rails Assets over Bower has several benefits:\n\n* There is no need for an extra bower.json file. All packages (or gems) & dependencies live in Gemfile.\n* Since everything is in one file, we only need `bundle install` to install all packages whereas with Bower & Bundler we'd need to run two different commands, `bundle install` and `bower install`.\n* Front-end packages are now included in the asset pipeline. [More about Asset Pipeline benefits](http://guides.rubyonrails.org/asset_pipeline.html).\n* Compared to traditional Ruby gems, there is no waiting for an author to update their gem. Rails Assets repackages bower.json files when they are updated at the source.\n\nAfter using rails-assets.org for the entirety of this project, I can say I really enjoyed this way of managing front-end packages. It had all the features of Bower, that I know of, and the added benefits listed above. When I do a project without Rails, I will opt for Bower. However, if the project uses a Rails backend then I'll be utilizing the Rails Assets method.\n\n### Choosing a Design Framework\n\nEven though design is not a graded criteria at Flatiron, I find that many students and creators in general will strive to have a polished product after putting in innumerable hours of work. Along those lines, the second decision I made after a package manager was what design framework I wanted to use. On previous projects and side-jobs I had used [Bootstrap](http://getbootstrap.com/) & [Foundation](http://foundation.zurb.com/) so I went looking for something different. \n\nAfter considering that I was using Google's Angular framework for my front-end, I narrowed my search to design frameworks that supported directives that I could plug straight into Angular. This slimmed down the options to just a handful: Angular Bootstrap, Angular Foundation, Ionic, UI Grid, or Angular Material. Since both Angular & Material were created by Google, I decided to try an app that had them paired up. I also really enjoyed the [Material approach to design](https://material.io/guidelines/) which supports a mobile-first design (the good ones do) with emphasis on user interaction and bright colors. If the purpose of Material design interests you, WIRED did a good piece on what [Google's Material Design Is Really About](https://www.wired.com/insights/2014/12/google-material-design/).\n\nSince this was my first experience with Material, I struggled at first with simple concepts such as layout. There is an abundance of Flexbox usage in Material which is robust once you learn [how it works](https://css-tricks.com/snippets/css/a-guide-to-flexbox/) but can be aggravating if you're coming from the row/column behavior of a framework like Bootstrap. Other features like the services provided by Material seamlessly integrated with Angular. One that I couldn't believe how easy it was to use was the $mdToast service which provides options for showing a \"toast\" or notification on the screen as a result of an action.\n\n```javascript\n    function addToWatchlist(docTitle) {\n      return profileFactory.addToWatchlist(docTitle)\n                           .then(showMessage);\n\n        function showMessage(response) {\n          $mdToast.showSimple(response.title + ' added to watchlist');\n        }\n    }\n```\n\nThat simple! If you want to further [configure the $mdToast service](https://material.angularjs.org/latest/api/service/$mdToast) there are plenty of options available for that as well.\n\nThat leads to my final point about Angular Material - the documentation is has been extraordinary in my experience. It is split between a few pages which can be tough but each provides a look from a different angle. The two pages that were most useful were the [Demo Documentation](https://material.angularjs.org/latest/demo/) which shows live demos of each feature of the framework and the [API Documentation](https://material.angularjs.org/latest/api/directive/mdAutocomplete) which details the finer points of the features.\n\n### Engineering Decisions\n\nThe Angular community is the fastest changing, most style-opinionated language I've encountered since I've started at Flatiron. That has the benefit of being on the bleeding edge of the JS Framework scene but you also come across conflicting resources. In light of this, I used the style guide & Angular pieces with the widest adoption at the time of creating my project.\n\nThe style guide I settled on was [John Papa's Style Guide](https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#single-responsibility) which is an impressive collection of guidelines for writing Angular. The guide is so impressive that the Angular team themselves adopted it for Angular 1 and even brought on John Papa for creating a style guide when they created Angular 2. Papa also wrote a [descriptive post](https://johnpapa.net/angular-app-structuring-guidelines/) on his site about how to structure your app.\n\nAs far as what types of Angular pieces to use, I settled on using controllers, factories, and templates. While controllers are fairly common place in Angular 1, some developers use Components which more closely model Angular 2 and other popular JS frameworks like React. The more research I did about the Angular 1 community, the more it seemed like Angular 1 developers used components for a period then went back to controllers & factories, so I stuck to these. Additionally, there are services which are used often too. Factories are simply a kind of service with less overhead and can usually be used 90% of the time instead of using a full-fledged service. When considering which is needed, reading [a comparison of services vs factories](https://blog.thoughtram.io/angular/2015/07/07/service-vs-factory-once-and-for-all.html) was especially constructive.\n\nAs far as the templates, there were two options: place them within my Rails public folder or use [angular-templates](https://github.com/pitr/angular-rails-templates) to incorporate them with the asset pipeline. I chose the latter since my original decision to use Rails-Assets instead of Bower also capitalized on using the asset pipeline. Using this gem was a breeze: include the gem in the Gemfile, create a templates folder next to your controllers & factories folders, insert your html templates in there, and reference them by filename from anywhere in your Angular app.\n\n### Wrapping It Up\n\nAs is the case with learning new material, Angular was frustrating at first. Similar to jQuery, once I figured it out I started to really enjoy the immediacy of the framework & the structural organization that Angular offers. Though most of the industry has adopted React as their primary JS framework, I really enjoyed Angular and plan to refine what I've learned before moving onto learning React - I am inspirited to start React though! Soon.\n\nIt is bittersweet to be finishing Flatiron School. In the past 8 months I've learned more about web development than years of using learning on my own. It doesn't stop here though. After graduation there will be additional resources opening up that cover Node & React, a few side-projects that are in the planning phases, and personal project ideas that are brewing. Hopefully that more opportunities like Flatiron come along in the future. The time here has instilled that there will consistently be emerging technologies to try, struggle with, and most satisfyingly, learn.\n",
        "contentDigest": "1ffb3be7dc59b378d75aa41b4f52c770",
        "type": "MarkdownRemark",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "A Greenhorn's Approach to Angular",
        "layout": "post",
        "author": "Steve Frost",
        "date": "2017-01-19T03:00:00.000Z",
        "categories": "blog",
        "tags": "flatiron-school learning-to-code angular javascript ruby rails project",
        "description": "A synopsis of what I learned by building my first Angular web app including the resources that were helpful to me, the hang ups, and the engineering decisions that were constructed on my first Angular project.",
        "comments": true,
        "path": "/articles/a-greenhorns-approach-to-angular",
        "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/a-greenhorns-approach-to-angular.md absPath of file"
      },
      "fileAbsolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/a-greenhorns-approach-to-angular.md"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/building-a-website-using-middleman.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/building-a-website-using-middleman.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/building-a-website-using-middleman.md absPath of file",
      "internal": {
        "content": "---\nlayout: post\ntitle: \"Building a Website using Middleman\"\nauthor: Steve Frost\ndate: 2017-02-26 10:00:00 -04:00\ncategories: blog\ntags: static-site-generator middleman rails ruby\ndescription: \"Static Site Generators were all the hype in 2016 and remain an indispensable option for tech-savvy, or courageous, people looking to create a website.\"\ncomments: true\npath: \"/articles/building-a-website-using-middleman\"\n---\n\nStatic Site Generators were all the hype in 2016 and remain an indispensable option for tech-savvy, or courageous, people looking to create a website. Roughly, they sit somewhere in-between create individual HTML, CSS, and JS files and using a feature-rich solution like WordPress. After using WordPress for projects for several years, I've started to make a switch to these lighter, simpler generators for the recent sites I've created. Here we'll talk about the two options I've used, how they compare to each other, benefits over WordPress, and further insight into generators.\n\nOver the past 2 weeks I've been working on a website for a client using [Middleman](https://middlemanapp.com/) and have completely fell in love with it. Middleman is one of several emerging static-site generators which provide a robust, modern toolset to create a website, typically without a database. My introduction into static-site generators was when I built - and rebuilt, and rebuilt - this website using Jekyll which is one of the [most popular options](https://www.staticgen.com/).\n\n### Using Middleman Over Jekyll\n\nMy affection for Ruby led me to each of these as they're both written in the [most beautiful, artful programming language](https://www.ruby-lang.org/en/about/). After using each generator, I've noticed there are more similarities between the two than differences. \n\nSince they're both written in Ruby, there is a Gemfile that can be used to [extend each through gems/plugins](https://jekyllrb.com/docs/plugins/) & provide a quick way to clone the project and get started using `bundle install`. Each option also comes with a built-in way to run a local server enabling [real-time development cycle](https://middlemanapp.com/basics/development-cycle): make a change in the HTML file and see the changes instantly in your browser without ever having to deploy code to a live server. In addition, both work without the use of a database. This can be limiting in some ways as we'll see in the next section but does have perks. Instead of the typical request cycle involving a database which can be plodding, a static-site generator packages up the site into a collection of flat, static HTML files which can be served to the user lightning fast. \n\nAs far as differences, I see Jekyll as a blog-centric solution and Middleman for everything else. Middleman uses more Rails conventions such as helper methods and [Sprockets](http://www.rubyinside.com/sprockets-a-ruby-powered-javascript-dependency-library-from-37signals-1520.html). Middleman can also be made into a blog with a [community extension](https://directory.middlemanapp.com/#/extensions/all) though if the project requires a blog, Jekyll is the perfect fit for that. These two generators also differ on templating language. [Jekyll's uses Liquid](https://jekyllrb.com/docs/templates/) which was conceived by Shopify while Middleman ships with [support for ERB & HAML](https://middlemanapp.com/basics/templating-language/). Coming from a Rails background, I find ERB & HAML to be more straight-forward than Liquid. Other people like [Liquid because is easily extendable](https://www.sitepoint.com/ditching-erb-a-guide-to-using-liquid/). As most things in programming, this one is personal preference.\n\n### Generators vs WordPress\n\nSo why did I switch from creating websites in WordPress to using generators? The simple answer is that most projects don't require the feature-rich environment of a WordPress installation. If the project doesn't require users, forms, or ecommerce, ditch the database. Using one when it isn't needed is overkill which adds overhead to page loads and also opens up the site to [vulnerabilities](http://www.zdnet.com/article/the-top-ten-most-common-database-security-vulnerabilities/), including the [number one type of attack](https://en.wikipedia.org/wiki/SQL_injection). In contrast, one of the lacking areas of generators compared to WordPress is that they do not have an administration UI by default. That means to edit the website, the actual files need to be changed instead of having a visual editor. This is [one of the main reasons](https://www.sitepoint.com/7-reasons-not-use-static-site-generator/) for avoiding generators. As always, pick the right tool for the right job. If the site owners are technically-apt or the maintenance will only be done by the developer, the admin UI is another unnecessary overhead. If the site is going to be turned over to people who aren't so comfortable working with raw files, an admin UI can be an immense benefit for both sides.\n\n### Shortcomings and Dealing with Them\n\nAfter hours of research and tinkering with generators, I've come across some useful ways to combat a few shortcomings of generators. Sometimes one or two features of a database-driven website are needed but not enough to justify using a database – this is where creativity is useful. The most vital issue that I recently solved with the help of fellow generator-enthusiast, [Joel Bitar](http://www.joelbitar.space/), was the need for a form on a Middleman site. Typically a form requires a backend to process the form and store the user data. Both Jekyll and Middleman communities have come up with ways to circumvent this using paid options like [FormKeep](https://formkeep.com/guides/contact-form-middleman) and [SimpleForm](https://getsimpleform.com/) or free solutions like [submitting the form to Google Sheets](http://railsrescue.com/blog/2015-05-28-step-by-step-setup-to-send-form-data-to-google-sheets/). Another feature most blogs like to have that generators fall short on is comments. Currently, Jekyll has a few solutions to this including the one used here on this blog, [Disqus](http://www.perfectlyrandom.org/2014/06/29/adding-disqus-to-your-jekyll-powered-github-pages/). \n\n### What's Next?\n\nAfter playing around with the two Ruby-based generators here, I'm looking to try out a few popular Javascript-based ones soon. Mostly, I am curious to try ones like [Gatsby](https://github.com/gatsbyjs/gatsby) that incorporate current hot topics like components once I have a project that benefits from having reusable pieces of code. Until then, I'll be building a few more Middleman & Jekyll sites to refine those skills and summarizing any insightful experiences here. If you have any questions or tips of your own, leave them in the comments below!\n",
        "contentDigest": "3ed894579c76614d12236cead8c13d39",
        "type": "MarkdownRemark",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "Building a Website using Middleman",
        "layout": "post",
        "author": "Steve Frost",
        "date": "2017-02-26T14:00:00.000Z",
        "categories": "blog",
        "tags": "static-site-generator middleman rails ruby",
        "description": "Static Site Generators were all the hype in 2016 and remain an indispensable option for tech-savvy, or courageous, people looking to create a website.",
        "comments": true,
        "path": "/articles/building-a-website-using-middleman",
        "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/building-a-website-using-middleman.md absPath of file"
      },
      "fileAbsolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/building-a-website-using-middleman.md"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/busting-cache-with-asset-hash.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/busting-cache-with-asset-hash.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/busting-cache-with-asset-hash.md absPath of file",
      "internal": {
        "content": "---\nlayout: post\ntitle: \"Busting Cache with Asset Hash\"\nauthor: Steve Frost\ndate: 2017-03-26 21:00:00 -04:00\ncategories: blog\ntags: caching hashing performance sprockets middleman rails webpack npm\ndescription: \"\"\ncomments: true\npath: \"/articles/busting-cache-with-asset-hash\"\n---\n\n![asset-hash-picture](/img/blogs/assethash1.jpg)\n\nWhile there are plenty of quirky nooks to browsers like different standards and behaviors, browsers also provide developers with some useful, practical tools. One of these is [HTTP Caching](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching) and is a god-send especially as a website grows in complexity. \n\nBriefly, cache is temporary storage that a browser can leverage to remember what a website looks like. On first visit, the user's browser has to make requests directly to the server, wait for a response, then display the files – CSS, Javascript, etc. This process takes time and resources. After that first visit, the browser can access this information directly from the cache rather than making additional requests from the server. [Extremely beneficial](https://developers.google.com/speed/docs/insights/LeverageBrowserCaching) for both the user and the server! The downside of this is that when resources do need to change, user's browsers won't pick up on those changes until the cache expires which can be upwards of months. To combat this, we can use what is called cache busting.\n\nThere are a [few techniques](https://css-tricks.com/strategies-for-cache-busting-css/) to bust cache with the most widely adopted being the technique called [asset hashing](https://survivejs.com/webpack/optimizing/adding-hashes-to-filenames/). The process involves creating a random string of letters and numbers, appending it to the end of all filenames, and in some cases using URL helpers to keep the HTML links up-to-date. By changing the filename each time the resource is updated, the browser is forced to load the new resource instead of refer back to the cached version. Additionally, this method is available with the most popular tools such as [Webpack](https://medium.com/@okonetchnikov/long-term-caching-of-static-assets-with-webpack-1ecb139adb95#.ycss3zitu), [Sprockets](https://middlemanapp.com/advanced/improving-cacheability/), and [NPM](https://www.npmjs.com/package/asset_hash) so the process can be set to happen automatically on build – so simple!\n\nFor additional reading on caching and other performance-based topics, check out the immense [Google's PageSpeed Insights documentation](https://developers.google.com/speed/pagespeed/insights/) or walk-through a checklist using [GTMetrix's Analyzer](https://gtmetrix.com/).\n\n",
        "contentDigest": "81cad2f10a107b4acc167d27bf324909",
        "type": "MarkdownRemark",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "Busting Cache with Asset Hash",
        "layout": "post",
        "author": "Steve Frost",
        "date": "2017-03-27T01:00:00.000Z",
        "categories": "blog",
        "tags": "caching hashing performance sprockets middleman rails webpack npm",
        "description": "",
        "comments": true,
        "path": "/articles/busting-cache-with-asset-hash",
        "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/busting-cache-with-asset-hash.md absPath of file"
      },
      "fileAbsolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/busting-cache-with-asset-hash.md"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/comparing-flexbox-and-grid.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/comparing-flexbox-and-grid.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/comparing-flexbox-and-grid.md absPath of file",
      "internal": {
        "content": "---\nlayout: post\ntitle: \"Comparing Flexbox and Grid\"\nauthor: Steve Frost\ndate: 2017-04-02 21:30:00 -04:00\ncategories: blog css\ntags: flexbox grid bootstrap skeleton milligram \ndescription: \"There's no limit to the choices of CSS frameworks and libraries. For years it was a personal preference between ones like Bootstrap and Foundation but recently there has been emerging support for FlexBox which is currently supported by a few frameworks.\"\ncomments: true\npath: \"/articles/comparing-flexbox-and-grid\"\n---\n\n![flexbox-and-grid-picture](/img/blogs/flexboxandgrid1.jpg)\n\nThere's no limit to the choices of [CSS frameworks and libraries](http://cssdb.co/). For years it was a personal preference between ones like [Bootstrap](https://getbootstrap.com/) and [Foundation](http://foundation.zurb.com/) but recently there has been emerging support for FlexBox which is currently supported by a few frameworks. There hasn't been a surge of popularity purely because of Flexbox for these options but it has started to make ones that don't support Flexbox as old-school and outdated.\n\n### What is Flexbox?\n\n[Flexbox](https://www.w3schools.com/css/css3_flexbox.asp) is a way to organize elements on a web page using several techniques and generally concerning equal distribution across the page regardless of screen size. At it's base, it is a CSS value of the property `display`. Flexbox also offers alternate, supporting properties such as `flex-flow` and `flex-direction` to dictate what direction your content will condense into as the screen size shrinks. It was created to be an iteration on the common grid system made popular by Bootstrap that is meant to be more straightforward while also being more accommodating to different layouts.\n\n### Flexbox vs Grid\n\n1. Grid system elements are only concerned with positioning from left-to-right. Once a breakpoint is reached, the components collapse into a single column. Flexbox on the other hand is aware of both the left-to-right as well as the top-to-bottom of it's parent container.\n2. There are several sub-properties that assist the flex property compared to grid systems which are based on breakpoints.\n3. Flexbox can 'flex' in size to fit the overall size of their parent div whereas grid systems resize the div itself and cannot adjust children.\n\n### Continuous Post\n\nSince Flexbox is new, this post will be evolving as specifications are rolled out and frameworks accept the new standard. Bootstrap v4 should be out soon and will [move from the grid system to this new Flexbox spec](https://v4-alpha.getbootstrap.com/utilities/flexbox/). If you're curious about the Flexbox feature, [CSS Tricks has great information](https://css-tricks.com/snippets/css/a-guide-to-flexbox/).\n",
        "contentDigest": "be14719a852cecbc685886b5dd03939d",
        "type": "MarkdownRemark",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "Comparing Flexbox and Grid",
        "layout": "post",
        "author": "Steve Frost",
        "date": "2017-04-03T01:30:00.000Z",
        "categories": "blog css",
        "tags": "flexbox grid bootstrap skeleton milligram",
        "description": "There's no limit to the choices of CSS frameworks and libraries. For years it was a personal preference between ones like Bootstrap and Foundation but recently there has been emerging support for FlexBox which is currently supported by a few frameworks.",
        "comments": true,
        "path": "/articles/comparing-flexbox-and-grid",
        "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/comparing-flexbox-and-grid.md absPath of file"
      },
      "fileAbsolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/comparing-flexbox-and-grid.md"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/composing-a-crud-app-in-sinatra.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/composing-a-crud-app-in-sinatra.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/composing-a-crud-app-in-sinatra.md absPath of file",
      "internal": {
        "content": "---\nlayout: post\ntitle: \"Composing a CRUD App in Sinatra\"\nauthor: Steve Frost\ndate: 2016-08-06 16:00:00 -04:00\ncategories: blog\ntags: flatiron-school learning-to-code\ndescription: \"What I learned about CRUD from creating a few apps in Sinatra\"\ncomments: true\npath: \"/articles/composing-a-crud-app-in-sinatra\"\n---\n\n*(Day 97)*\n\nComposing a what in a who? If you would have read that title to me a month ago, that would be my response. Now, I’m somewhat… er, let’s say fairly sure I can explain what that means and through building my first one, I’ve made worthwhile realizations to keep in your back pocket.\n\nIf you have never heard of CRUD before, take a minute to read my previous article which covers CRUD more thoroughly.\n\nAs part of our second assessment at Flatiron School, we are asked to build a CRUD App in Sinatra. There were 7 basic requirements: implement a MVC software pattern, use ActiveRecord, include multiple models, use at least one has_many relationship, include user accounts that are only able to modify the content they create, validate user input to ensure bad data isn’t created, and any validation failures must be shown to the user with an error message.\n\n![Frustrated Guy](/img/blogs/composingcrudapp1.jpeg)\n\nAfter reading all that, you probably look a little bit like this guy. No worries, I looked the same way. Actually, I look exactly like this every time I start a new exercise at Flatiron. It is typically 10–15 minutes of this expression followed by a sigh then I start to code.\n\nThe patterns of MVC and CRUD are particularly helpful in regards to this initial… “brain says, ‘no’” look. Part of it is that CRUD is fun to say, but mostly it is because both provide an imagined structure to the app before even one line of code has been written. MVC outlines how the folders and files will be structured so if you’re completely stuck at the start, begin to create your MVC structure. Create your prospective models in their own .rb files then .erb files for each view that might exist, and then controllers to deliver the information between the two. Once this is complete, then continue on with creating the CRUD actions in each controller. Some controllers may not require all four actions included in CRUD so that may require some thought, but the overall benefit is still there — you are writing the base to your program. You’ve started!\n\n![Success Kid](/img/blogs/composingcrudapp2.jpeg)\n\nAfter creating the MVC structure and CRUD actions, I’m motivated. I let this momentum build and it carried me through to the end of the… ugh, another dilemma. To understand this one, take a quick read at the summary of my web app from [GitHub](https://github.com/steveafrost/much-free-very-wow).\n\n> Much Free, Very Wow is a CRUD Sinatra app where users can signup, login, and contribute free activities to do in NYC.\n\n> Both users and activities are saved into a SQLite3 database upon creation.\nActivity details can be viewed at the their RESTful URL. For example, if an activity named “Free Comedy Show” is created, the details can be viewed at /activities/free-comedy-show.\n\n> Activities can also be edited or deleted but only by the user who created the activity.\n\nOnto my dilemma. When creating activities, I wanted to include a category so that users would know if they were viewing an activity concerning music, food, art, etc. For a couple hours I weighed on whether this category should be part of the Activities table & model or if it should be it’s own table & model. I asked instructors, I asked other students, and I argued with myself in a frustrating fashion. In the end, it made the most sense to go with categories as part of the existing Activities table & model for a few reasons. First, if the category was on it’s own, I would have to query a whole additional table each time I wanted to display those categories which I predicted would be a frequent action. If the category was out on it’s own for each of these queries, I would be increasing the load times by 33%, theoretically. The benefit to having categories on it’s own would be that I could have attributes and methods specific to categories, but I didn’t need that! The choice was practically made for me.\n\n![Achievement](/img/blogs/composingcrudapp3.jpeg)\n\nOne of the choices that had countless options was the selection of a gem for displaying messages to the user when they ran into failures. These failures happen when a user is not logged in and they try to modify activity, they’re logged in and they’re trying to modify an activity that’s not theirs, when fields are left blank during signup or login, and when the user successfully logs out. Two of the standout options for this behavior were rack-flash and sinatra-flash. From what I’ve read, sinatra-flash is an extension of rack-flash including the ability to use *<%= styled_flash %>* which will rotate through flash messages depending on what is active at the time. It also enables styling flash messages by using only one CSS rule — incredibly easy.\n\nOnce I read through the above guide and implemented flash messages for all failures, I only had a few typos and tweaks to apply and my very first CRUD app was built! Each project it becomes clearer that starting is the hardest part and each time that a roadblock comes up in the project, keep pushing and eventually it will fall. Sometimes… frequently… most often it can feel like I’m stuck at each checkpoint and cannot progress any further but then I do. I think that is the principal lesson I have learned at this point.\n",
        "contentDigest": "104affec7e6fde3e0bc47a3abc287d0c",
        "type": "MarkdownRemark",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "Composing a CRUD App in Sinatra",
        "layout": "post",
        "author": "Steve Frost",
        "date": "2016-08-06T20:00:00.000Z",
        "categories": "blog",
        "tags": "flatiron-school learning-to-code",
        "description": "What I learned about CRUD from creating a few apps in Sinatra",
        "comments": true,
        "path": "/articles/composing-a-crud-app-in-sinatra",
        "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/composing-a-crud-app-in-sinatra.md absPath of file"
      },
      "fileAbsolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/composing-a-crud-app-in-sinatra.md"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/building-a-ruby-gem-the-experience.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/building-a-ruby-gem-the-experience.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/building-a-ruby-gem-the-experience.md absPath of file",
      "internal": {
        "content": "---\nlayout: post\ntitle: \"Building a Ruby Gem: The Experience\"\nauthor: Steve Frost\ndate: 2016-06-25 18:24:00 -04:00\ncategories: blog\ntags: flatiron-school learning-to-code\ndescription: \"The tale of persistence behind building my first CLI gem.\"\ncomments: true\npath: \"/articles/building-a-ruby-gem-the-experience\"\n---\n\n_(Day 50)_\n\nOver the last couple weeks I've been working my final project for Ruby at [Flatiron School](http://flatironschool.com) and have brought it to a close today by publishing it on [RubyGems.org](https://rubygems.org). The feeling is hard to describe... I believe it is excitement, fulfillment, relief, and confidence that I can indeed do this. At some points in the project, I couldn't see the end of the tunnel but now what was just an idea is a Ruby gem available to anybody in the world.\n\n### Requirements for the Project ###\n1. Package as a gem\n2. Provide a CLI on gem installation\n3. CLI must provide data from an external source, whether scraped or via a public API\n4. Data provided must go at least a level deep, generally by showing the user a list of available data and then being able to drill into a specific item\n\n### Project Idea ###\nBuild a CLI gem that scrapes MLB.com's scoreboard and display a list of all matchups from the previous day. The user is then prompted to enter a number that corresponds with a matchup to see the full boxscore of the respective matchup.\n\n### Planning the Gem ###\nBefore I started coding the gem, I thought it would be a good idea to thoroughly think it out.\n\n* Which classes need to be created, what do they need to represent?\n  * Initially I planned to have a Scoreboard class, a Score class, and a Scraper class. Later these condensed into a CLI class which handled all CLI activity and a Matchups class which handles scraping and assigning the scraped info to matchups and box score details.\n* Do they need to communicate with each other?\n  * The classes do not need to have relationships with each other but they will be used within each other. In example, the CLI class will need to know about the data being scraped and assembled in the Matchups class so that it can display it.\n* How can I leave the gem open to being extended later?\n  * If the URL/API to be scraped has a variable string then I can inject dates into it to display scores from any day. If that functionality exists the gem can be extended further to calculate boxscores from multiple days.\n\n### Coding the Gem ###\nThe hardest part of this project (careful, I will use this phrase multiple times) was starting. Staring at a blank canvas is intimidating. What helped the most is to take things one step at a time. Consider what the very first task that needs to be done is and do it. Then, move onto the next task. In a short time, the program starts to take shape and the outline will emerge ready for filling in with all the details.\n\nI had to stop every few tasks to think about the path that was being set and that helped to see the path forward. Once during this reflection I realized that I was letting the scope of the project get too large. I had branched into providing standings and access to several dates of scores instead of just sticking with my original idea. Setting the goals early on in the project and frequently checking on them helped with keeping the scope in check.\n\nAlong the way, the speed of development varied drastically. I would take two steps forward and one step back, then five steps back and one forward, then ten steps forward, typing as fast as my brain could spit out the right answers that were destined to save my gem. Overall, I found that most of the stumbling was in the start when I didn't know what direction to take and at the finish as things were polished up.\n\nThat leads me to my last point, publish your gem. Just do it. After hours, days, weeks of working on the gem you will become attached and want it to be just a little bit better, just a little bit better, just a little bit better... publish it.\n\n### Final Product ###\nIf you have a minute, give it a try and let me know what you think: [MLB Scoreboard Gem](https://rubygems.org/gems/mlb_scoreboard)\n",
        "contentDigest": "5e03455a47716c0f4d4ebcd2ba82abd4",
        "type": "MarkdownRemark",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "Building a Ruby Gem: The Experience",
        "layout": "post",
        "author": "Steve Frost",
        "date": "2016-06-25T22:24:00.000Z",
        "categories": "blog",
        "tags": "flatiron-school learning-to-code",
        "description": "The tale of persistence behind building my first CLI gem.",
        "comments": true,
        "path": "/articles/building-a-ruby-gem-the-experience",
        "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/building-a-ruby-gem-the-experience.md absPath of file"
      },
      "fileAbsolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/building-a-ruby-gem-the-experience.md"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/dear-sprouting-developers.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/dear-sprouting-developers.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/dear-sprouting-developers.md absPath of file",
      "internal": {
        "content": "---\nlayout: post\ntitle: \"Dear Sprouting Developers\"\nauthor: Steve Frost\ndate: 2016-07-24 16:00:00 -04:00\ncategories: blog\ntags: flatiron-school learning-to-code\ndescription: \"After three months of learning to code, I recap what has helped me the most.\"\ncomments: true\npath: \"/articles/dear-sprouting-developers\"\n---\n_(Day 84)_\n\nThrough nearly three months of studying at Flatiron for Full-Stack Development, I have refined a collection of helpful habits and resources as well as found what to avoid - see: Rabbit Holes - and am always eager to share with other students in hopes that it will help them as it helped me. Actually, much of what I use on a day-to-day was passed down from others, like age old stories. My hope is that by sharing here, others will find their helpful utensil and continue the tradition of standing on others shoulders.\n\n**Time Management**. It's hard to find time to start anything new and even more-so with something like web development that requires at least an hour each day and a cumulative infinite amount of hours. Specifically, Flatiron says it is around 600-800 hours to complete their program. This means that if you want to get done within a half a year, you'll have to devote 30 hours a week. That is a lot of time - almost a full time job's worth! One thing that has helped me with finding more time for programming is to limit, or shave off, time from other activities that are not necessary. I've found that just by trimming off time from social media and television, I've recovered almost 20 hours a week. I actually completely quit one social media platform after I realized it was more of an addiction than entertainment. I don't think it's necessary to completely quit social media but I do promise this is one area where you can save a *ton* of time.\n\n**Be Productive**. In order to better manage my overall time and to be more productive during study sessions, I've been using the Pomodoro method. This is the practice of working in a 25 minute burst followed by a 5 minute break. It is helpful for several reasons. First, if I don't want to study, it is easy to sit down for one Pomodoro, or 25 minutes, and then that one turns into two, three, four, or five Pomodoros. They also help with being focused. If you know that you have a break in so many minutes, it's easier to muster the gumption to power through the material you're working on. I cannot endorse this enough. That said, keep in mind that [everyone is different](http://qz.com/740607/the-biggest-productivity-myth-is-that-rigid-rules-like-the-pomodoro-technique-are-for-everyone/) so it may or may not be as effective for you.\n\n**Welcome Opportunities to be Humbled.** In the start, I struggled when asked what I was learning or where I was in the curriculum. Nobody wants to be awful at something they're doing but that's how everyone starts, by being awful at coding! Accept it now and if you have any questions, ask them. Your peers and mentors had to start in the exact place you're starting and will be able to relate. Really, it never ends. Once you learn your first language, you'll move onto another one where the same basic questions arise and you're a beginner all over again.\n\n**Surround Yourself with Code**. When you can be in front of a computer, code. When you can't, listen to podcasts and read books about code. Most importantly, and often skipped, talk about code whenever possible. Talk about it with your fellow coders or even talk about it with family who don't code at all. The ability to express yourself through typing code is one thing and the ability to talk through that code, especially with someone who doesn't know anything about it, exercises that knowledge in a whole different way. That verbal aptitude will also help when you join a full team of developers or are pair programming on a weekend side project.\n\nThat's it, for now. I fully expect this list to continue to evolve every couple months and look forward to what's next. If you have any tips, tricks, resources, encouraging words, or other thoughts, please leave them in the comments and I'll add them into the post!\n",
        "contentDigest": "4e2554d39b0ae2d68f820e5d100773c6",
        "type": "MarkdownRemark",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "Dear Sprouting Developers",
        "layout": "post",
        "author": "Steve Frost",
        "date": "2016-07-24T20:00:00.000Z",
        "categories": "blog",
        "tags": "flatiron-school learning-to-code",
        "description": "After three months of learning to code, I recap what has helped me the most.",
        "comments": true,
        "path": "/articles/dear-sprouting-developers",
        "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/dear-sprouting-developers.md absPath of file"
      },
      "fileAbsolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/dear-sprouting-developers.md"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/code-pause-run-tell-that.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/code-pause-run-tell-that.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/code-pause-run-tell-that.md absPath of file",
      "internal": {
        "content": "---\nlayout: post\ntitle: \"Code Pause: Run Tell That\"\nauthor: Steve Frost\ndate: 2017-03-19 19:00:00 -04:00\ncategories: blog\ntags: code-pause casual running\ndescription: \"The commencement of this emerging series is none other than the societal phenomenon known as running. In a not too distant past, I was not shy about expressing my distaste for the activity. Looking back, I'm not sure whether it was because I've been a cyclist for years the hate is real or because I was afraid to try it out.\"\ncomments: true\npath: \"/articles/code-pause-run-tell-that\"\n---\n\n![person-holding-sneakers-by-field](/img/blogs/codepauserunning1.jpg)\n\nWhile I regularly blog about my understanding of technical aspects of coding, I've come to realize my personal lifestyle changes have equally attributed to the topics I learn and the products I create. In honor of this revelation, I'm starting a new series here called Code Pause where I'll write about activities _outside_ of coding that have made me more productive _inside_ of coding.\n\nThe commencement of this emerging series is none other than the societal phenomenon known as running. In a not too distant past, I was not shy about expressing my distaste for the activity. Looking back, I'm not sure whether it was because I've been a cyclist for years ([the hate is real](http://www.dallasobserver.com/news/why-runners-hate-bikers-and-vice-versa-7115203)) or because I was afraid to try it out.\n\nMy first dabble was on a trip to Tucson, AZ to visit my Mom. Typically, I'd settle for the available indoor cycling machine but I had packed a pair of five-year-old sneakers in a premeditated attempt to force myself to run to the mountains and back – a pipe dream of mine. On the second day there, I thought about it, deliberately quickly put on my shoes before my mind changed, and started my run. I set off on the quiet drive down from the house, along the boulevard, and up the highway to the mountains. On the way, I saw a coyote, a stable with humble horses, and another older gentleman who was soaking in the beautiful landscape on his afternoon walk.\n\nIt all sounds dreamy, right? If I didn't share the hard parts, I'd be dishonest. There were a great deal of instances during the 4.5 mile run where I wanted to stop and resort to walking. At these moments, I was reminded (code unpause) how grueling my journey in coding thus far has been. It was never easy. It required hard work, and as we know, the brain is quick to resist any intensive activity - [it's the default reaction!](https://www.psychologytoday.com/blog/your-brain-work/200909/trick-your-brain-loving-your-workout)\n\nAs a matter of fact, this is the aspect of running that I latched onto and has turned it into a daily activity. Throughout the run, the brain checks-in and wants to stop my legs immediately. Throughout coding, the brain checks-in and wants to stop coding immediately. The only way I run further, or code longer, is to overpower this primal instinct and prevail forward to complete the run or the project. The age-old saying of mind over matter is immensely useful to describe this struggle. If I'm able to overpower my mind, I can push it to do more activity than it wants to do and in turn, complete a goal.\n\nSpeaking of setting goals, I've signed up for the [AirBnB Half Marathon](http://www.nyrr.org/races-and-events/2017/airbnb-brooklyn-half) here in Brooklyn as a test of my training. I've bought a pair of new shoes, new insoles, and a new outfit – now all that is left is regular running to get in shape. Easy! If you were inspired by this story or you know me personally and know how much I despise running and find enjoyment in my suffering, I'm running for the Team for Kids charity and trying to raise a few doll hairs for their great cause – you can [donate here](https://www.runwithtfk.org/Profile/PublicPage/45290). If you're able to donate, I'm rewarding donors of any amount with a picture of my suffering at the finish line of the race.\n\nHopefully this was an enlightening glimpse into how running, and the struggles ensued while running, are a reminder to power through the more difficult tasks in coding. As the infamous quote from Dr. Anthony Fernando emphasizes, \"The voice inside your head that says you can’t do this is a liar.\"\n",
        "contentDigest": "befbd0d4a9366fffaae05af7d15ebacb",
        "type": "MarkdownRemark",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "Code Pause: Run Tell That",
        "layout": "post",
        "author": "Steve Frost",
        "date": "2017-03-19T23:00:00.000Z",
        "categories": "blog",
        "tags": "code-pause casual running",
        "description": "The commencement of this emerging series is none other than the societal phenomenon known as running. In a not too distant past, I was not shy about expressing my distaste for the activity. Looking back, I'm not sure whether it was because I've been a cyclist for years the hate is real or because I was afraid to try it out.",
        "comments": true,
        "path": "/articles/code-pause-run-tell-that",
        "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/code-pause-run-tell-that.md absPath of file"
      },
      "fileAbsolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/code-pause-run-tell-that.md"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/deploying-daily-documentary-rails-angular.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/deploying-daily-documentary-rails-angular.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/deploying-daily-documentary-rails-angular.md absPath of file",
      "internal": {
        "content": "---\nlayout: post\ntitle: \"Deploying Daily Documentary - Rails/Angular\"\nauthor: Steve Frost\ndate: 2017-05-28 10:30:00 -04:00\ncategories: blog\ntags: angular postgres rails\ndescription: \"For the past several months I've been focused on learning, creating, and sharpening skills and just recently found time to take a break and deploy one of those creations, a web application built with a Rails back-end and an Angular front-end. Though Daily Documentary is always available on GitHub for people to download and use, that isn't as accessible as being live which allows users to simply visit the URL. Getting to that fully live state wasn't without bumps which I'll use this blog post to reflect on.\"\ncomments: true\npath: \"/articles/deploying-daily-documentary-rails-angular\"\n---\n\n![baseball-diamond-angle](/img/blogs/railsangularapp1.jpg)\n\nFor the past several months I've been focused on learning, creating, and sharpening skills. I just recently found time to take a break and deploy one of those creations, a web application built with a Rails back-end and an Angular front-end. Though [Daily Documentary is always available on GitHub](https://github.com/steveafrost/daily-documentary) for people to download, setup, and use, that isn't as accessible as being live which allows users to [simply visit the URL](https://daily-documentary.herokuapp.com/). Getting to that fully-live state wasn't without bumps which I'll use this blog post to reflect on.\n\n### Finding a Deployment Destination\nPreviously, I had deployed WordPress sites, static-generated websites, and a Ruby gem so a full-fledge web app was a fresh experience. After some reading around, and previous knowledge, I found that Digital Ocean does a [nice, hefty credit for GitHub Students](https://education.github.com/pack) and started down that road. Once I set up an account and started to read about the deploy process, I ran across [Heroku's free option](https://www.heroku.com/free) which allows deployment of up to five apps or even one-hundred if the account is verified. I'm not sure how they can afford to do that, it's incredible. The servers they store these apps on are not highly performant and even sleep every 30 minutes of inactivity causing page loads which wake up the app to take several-fold longer. Of course we have to make some sacrifices for a free service. These aren't that great of trade-offs in my opinion for an efficient deploy process for no cost out-of-pocket. If/when the app gets popular, I'll look into transferring it onto my Digital Ocean account to have a fully operational server.\n\n### Preparing for Deploy\nIn order to deploy the Rails app, I had to convert the SQLite3 database into a Postgres database. The reason for this is that SQLite is a database that has it's memory dumped as soon as the server restarts which is a useful trait in development but doesn't bode so well for production. Imagine losing all user information & settings every twenty-four hours (frequency of Heroku) when the production server restarts - not an option. The most straight-forward way to use Postgres with Rails is to pass in the option when generating the app using `rails new --database=postgresql`. In my case, my app was already completed and this option was off the table. Instead, I followed details on how to convert SQLite to Postgres.\n\n1. Install Postgres using Homebrew (or other) with command `brew install postgres`\n2. Add `gem 'pg'` to the Gemfile\n3. Run `bundle install`\n4. Start Postgres local server using `postgres -D /usr/local/var/postgres`\n5. Convert Rails app database.yml file to use Postgres adapter\n6. Run `rake db:create` and delete old, unused development.sqlite3 file\n\n![converting-sqlite-db-to-postgres-db](/img/blogs/railsangularapp2.jpg)\n\n### Deploy and Debug\nWith the database converted, tested, and ready to go, it's time to deploy. Regardless of how much preparation is done before deploying code live, there's always a chance of it operating differently in a production environment.\n\nOne of the known issues when entering production, especially with Angular, is the process of minification. As much as I prepared for this in my code by using the $injector service to dictate the dependencies, there were inevitably spots that I left it out thinking I didn't need it there. One of these is that this same specificity is needed when using services in the module's configuration itself. [John Papa recommends](https://github.com/johnpapa/angular-styleguide) using the $injector service for executing this which is what I did in all my files except the config not thinking I needed it there. Boy, was I wrong. When I first pushed my code up to Heroku I was ready for a success moment and excited to see the app in the live, instead, I was greeted by error-palooza.\n\n![heroku-errors-about-dependency-fail](/img/blogs/railsangularapp3.jpg)\n\nLooking at the source code, I could see that the dependencies for my Angular module's config were being minified with no reference like my controllers & factories had available.\n\n![source-code-at-fail-point](/img/blogs/railsangularapp4.jpg)\n\nTo fix this, I provided the dependencies just like I had done elsewhere in the app. There is a slight style difference here in that I went with an inline approach instead of doing `x.$inject = []` simply because the inline style looks more appealing here. They both have similar behavior so it was purely a design choice.\n\n![config-inject-dependencies](/img/blogs/railsangularapp5.jpg)\n\n\n### ...and we have liftoff!\n\nOnce I fixed the dependency issue, the app appeared as expected on Heroku. Fireworks, graduation bells, victory cheers - [it's now available for anyone to see](https://daily-documentary.herokuapp.com/)! There are a few lingering issues to fix involving the images & asset hashing which can be resolved by using ERB helpers. I'm hoping to have this bug and the app as a whole completely ironed out by mid-week. After that, I'm going to resume work on the [authentication branch](https://github.com/steveafrost/daily-documentary/tree/authentication) to allow for individual profiles instead of having one general profile. At that point, Daily Documentary is ready for users and prime-time!\n",
        "contentDigest": "47c466af93b706b9cc3ad3b39c2b43dc",
        "type": "MarkdownRemark",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "Deploying Daily Documentary - Rails/Angular",
        "layout": "post",
        "author": "Steve Frost",
        "date": "2017-05-28T14:30:00.000Z",
        "categories": "blog",
        "tags": "angular postgres rails",
        "description": "For the past several months I've been focused on learning, creating, and sharpening skills and just recently found time to take a break and deploy one of those creations, a web application built with a Rails back-end and an Angular front-end. Though Daily Documentary is always available on GitHub for people to download and use, that isn't as accessible as being live which allows users to simply visit the URL. Getting to that fully live state wasn't without bumps which I'll use this blog post to reflect on.",
        "comments": true,
        "path": "/articles/deploying-daily-documentary-rails-angular",
        "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/deploying-daily-documentary-rails-angular.md absPath of file"
      },
      "fileAbsolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/deploying-daily-documentary-rails-angular.md"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/first-impressions-gatsby-js.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/first-impressions-gatsby-js.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/first-impressions-gatsby-js.md absPath of file",
      "internal": {
        "content": "---\nlayout: post\ntitle: \"First Impressions: Gatsby.js\"\nauthor: Steve Frost\ndate: 2017-07-23 20:45:00 -04:00\ncategories: blog\ntags: gatsby static-site-generators javascript\ndescription: \"Although Gatsby.js has been around the static-site generator scene for awhile now but has recently come to age with a v1 launch and explosion of popularity.\"\ncomments: true\npath: \"/articles/first-impressions-gatsby-js\"\n---\n\nAlthough Gatsby.js has been around the static-site generator scene for awhile now, but has recently come to age with a [v1 launch](https://www.gatsbyjs.org/blog/gatsby-v1/) and explosion of popularity.\n\n### Structure\nMy experience early on with Gatsby left me yearning for me as far as structure is concerned. With the v1 launch, the team on the project decided to follow a similar build structure to Gulp & Grunt common setups where there is separation between the source and public/build. \n\n### How it works\nSince each Gatsby project has this separation, it allows us to edit dynamic content & use dev tools in our source folder & have Gatsby transform it into flat, static files that can be served from [GitHub Pages](https://pages.github.com/), [S3](https://aws.amazon.com/s3/), or [Surge](https://surge.sh/) – very similar to other static site generators. One big difference between other popular options like Jekyll, outside of being JS, is that Gatsby loads all pages on initial load to make subsequent loads quicker. This logic is something that I'm still studying and is one trait that made not only Gatsby super popular, but in a zoomed out picture, React as a whole.\n\n### Customization\nIf you're comfortable in a React or JS environment, you'll be right at home with customization. To set or tweak settings, Gatsby has a `gatsby-config` file that is a simple JSON file. For example, here is mine.\n\n```javascript\nmodule.exports = {\n  siteMetadata: {\n    title: \"Steve Frost – Full Stack Web Developer\",\n    author: \"Steve Frost\",\n  },\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        path: `${__dirname}/src/pages`,\n        name: \"pages\",\n      },\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-sharp`,\n  ],\n}\n```\n\nSimple! To add a plugin, we can yarn/npm install and add to our `gatsby-config` file.\n\n### Conclusion\nSo far, so good. I really like Gatsby because of it's simplicity and also because working with it on personal projects is a great way to complete jobs while also learning more about the most popular emerging JS framework, React. I hope to continue to build this website up from the starter template piece-by-piece so that I understand how Gatsby fundamentally works.\n",
        "contentDigest": "655147918df38c5f648927cd69dfb00b",
        "type": "MarkdownRemark",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "First Impressions: Gatsby.js",
        "layout": "post",
        "author": "Steve Frost",
        "date": "2017-07-24T00:45:00.000Z",
        "categories": "blog",
        "tags": "gatsby static-site-generators javascript",
        "description": "Although Gatsby.js has been around the static-site generator scene for awhile now but has recently come to age with a v1 launch and explosion of popularity.",
        "comments": true,
        "path": "/articles/first-impressions-gatsby-js",
        "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/first-impressions-gatsby-js.md absPath of file"
      },
      "fileAbsolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/first-impressions-gatsby-js.md"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/exploring-active-record.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/exploring-active-record.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/exploring-active-record.md absPath of file",
      "internal": {
        "content": "---\nlayout: post\ntitle: \"Exploring Active Record\"\nauthor: Steve Frost\ndate: 2016-07-06 18:00:00 -04:00\ncategories: blog\ntags: flatiron-school learning-to-code\ndescription: \"What we've learned and what we've discovered about Active Record\"\ncomments: true\npath: \"/articles/exploring-active-record\"\n---\n\n_(Day 66)_\n\n## Active Record Overview ##\nActive Record is a Ruby gem (an incredible Ruby gem) that provides the ability to communicate with a database through object relational mapping. All this really means is that we can use similar object oriented conventions on our database through Active Record. Through this, we unlock several benefits:\n  1. We can write to the database with Ruby strings and not rely strictly SQL inject code\n  2. Since we can write with Ruby, we can make methods that do certain things to the database\n  3. It allows your code to be easily portable to other database platforms\n\n## Starting Off with Active Record ##\nThere are three prerequisites for using Active Record out-of-the-box: Active Record has to know where to find your database, that your tables are plural whereas your models are singular, and your table has a primary index that is named ID. Once these prerequisites are met, the environment file is responsible for creating the database as a whole and individual classes represent each table within that database.\n\n## Some Useful Things You Can Do With Active Record ##\n* Save your database items so that they have a similar scheme as your other program's objects\n  * This means that the database object can interact with similar methods as your non-database objects. They live by a similar set of rules which makes writing and reading from everything in your program similar.\n* The database becomes part of the program and lives within it rather so that rather than communicating out and back in, all communication is internal. This is a great feature as long as the program doesn't need an external, isolated database.\n* Cut down on repetitive code\n* Implement conventional patterns that are organized and sensical\n\n## Things I Learned Outside of Flatiron's Coursework ##\nAlthough there was plenty of material about Active Record in my coursework, there is 100 times that amount out in the wild. While exploring the plethora of content, I discovered that there are two main approaches to an ORM (object relational mapping) pattern: Active Record and Data Mapper. Active Record is in complete control of the program and very internal. We have created the objects, the attributes, and the methods to interact with the database. Data Mapper on the other hand makes the database like a \"crazy aunt - shut her up in the addict you don't ever want to deal with her\" and that the database is being ignored, as the creator of Active Record, Martin Fowler, [puts it](https://thoughtworks.wistia.com/medias/uxjb0lwrcz). PressUp also does a [really great job of describing](https://pressupinc.com/blog/2014/11/orm-patterns-active-record-data-mapper/) the differences between the two patterns by noting, \"where active record seeks to invisibly bridge the gaps between the two as seamlessly as possible, the role of the data mapper is to allow you to consider the two more independently.\"\n\nIt seems that the community is divided between are ORMs good or are they bad and if you think they're good, which one makes more sense - Active Record or Data Mapper. Each have their own use cases and are reliant on how the developer wants their program to communicate with the database. As of now, Active Record has many more downloads on RubyGems outpacing Data Mapper 7-to-1 although they do have the convenient advantage of being the ORM within Rails.\n",
        "contentDigest": "332a71a481497a82bd4f15979c5fab24",
        "type": "MarkdownRemark",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "Exploring Active Record",
        "layout": "post",
        "author": "Steve Frost",
        "date": "2016-07-06T22:00:00.000Z",
        "categories": "blog",
        "tags": "flatiron-school learning-to-code",
        "description": "What we've learned and what we've discovered about Active Record",
        "comments": true,
        "path": "/articles/exploring-active-record",
        "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/exploring-active-record.md absPath of file"
      },
      "fileAbsolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/exploring-active-record.md"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/discovering-the-minimax-algorithm.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/discovering-the-minimax-algorithm.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/discovering-the-minimax-algorithm.md absPath of file",
      "internal": {
        "content": "---\nlayout: post\ntitle: \"Discovering the Minimax Algorithm\"\nauthor: Steve Frost\ndate: 2017-03-05 15:00:00 -04:00\ncategories: blog\ntags: javascript algorithm recursion\ndescription: \"For the past few weeks I've been trying, failing, and trying again to implement the minimax algorithm into a game of tic-tac-toe that I built using Javascript. Completing the challenge didn't come all at once but rather in pieces: deciding on the approach, understanding the objective of minimax, and implementing the algorithm.\"\ncomments: true\npath: \"/articles/discovering-the-minimax-algorithm\"\n---\n\n![algorithm-on-chalk-board](/img/blogs/minimax1.jpg)\n\nFor the past few weeks I've been trying, failing, and trying again to implement the [minimax algorithm](http://neverstopbuilding.com/minimax) into a game of tic-tac-toe that I built using Javascript. Completing the challenge didn't come all at once but rather in pieces: deciding on the approach, understanding the objective of minimax, and implementing the algorithm.\n\n### About Minimax\n\nMinimax is a exceptional algorithm for situations when a person needs to make a decision and has all the surrounding, encompassing information regarding all decisions. In relation to games, that matches activities such as chess, checkers, and tic-tic-toe. On the other hand, situations where each person does not have the particulars like scrabble, poker, or blackjack cannot use this minimax algorithm although [there is evidence](https://www.wired.com/2017/02/libratus/) that computers have solved those as well.\n\n### Approach\n\nPreviously, I had built a [tic-tac-toe in command-line](https://github.com/steveafrost/tic-tac-toe-rb-q-000) using Ruby. Instead of recycling this code, I wanted to choose a new approach in both language and user interface so as to learn fresh ideas. Instead of command-line, I created a browser interface which you can see below. The interface makes use of a lightweight CSS boilerplate called [Skeleton](http://getskeleton.com/) that I included to give the board & buttons some proper styling and also to make the interface responsive. As far as the building blocks, instead of Ruby, I decided to use Javascript to improve on my skills in this second language. At first I built out the entire program as individual functions as a rough draft to establish a foundation and be able to focus on the algorithm itself. Speaking of minimax...\n\n![tic-tac-toe-ui](/img/blogs/minimax2.jpg)\n\n### Understanding Minimax\n\nWhen starting on an assignment or project, starting to code immediately always seems appealing but in my experience I've found it is almost always counterproductive. Instead, the most rewarding use of time is reading, writing, doodling, watching videos, or [talking through it](https://blog.codinghorror.com/rubber-duck-problem-solving/) before typing even a single character into a text editor. Typically, there is no lack of programming materials that can help sleuth an issue and I found that to be true of minimax as well. The most helpful pages were [Mostafa Samir's advice](https://mostafa-samir.github.io/) and [Vivek Panyam's pointers](https://blog.vivekpanyam.com/how-to-build-an-ai-that-wins-the-basics-of-minimax-search/). It is helpful that each of these are done in different styles and the former actually inspired me to restructure my code using ES6 classes since Mostafa used prototype in his solution.\n\nAfter reading these, and several other, posts I also watched a [video on YouTube](https://www.youtube.com/watch?v=aWhb9dr1jNw&t=2098s) and walked through [intro to algorithms](https://app.pluralsight.com/library/courses/algorithmics-introduction/table-of-contents) on PluralSight. Following these, I started to doodle in my random thoughts notebook a few times a week when traveling to and from work on the subway. Needless to say, the rock of the train made for some messy notes. Nevertheless, the doodling was likely the most productive and propelled me into the actual implementation.\n\nFollowing my research about the algorithm, I realized I had to learn another idea, recursion. Recursion is critical to the minimax algorithm because it handles the logic of iterating over subsequent states of the game being played. The [dictionary definition](http://www.dictionary.com/browse/recursion) of recursion sums it up succinctly: \"the process of defining a function or calculating a number by the repeated application of an algorithm.\"\n\n```javascript\nminimax(state) {\n  if (currentGame.over(state)) {\n    return this.score(state);\n  }\n\n  let scores = [];\n  let moves = [];\n  let availablePositions = currentGame.availableMoves(state);\n\n  let nextStates = availablePositions.map(function(position) {\n    return currentAI.nextState(position);\n  });\n\n  for(let singleState of nextStates) {\n    scores.push(currentAI.minimax(singleState));\n  }\n}\n```\n\n### Implementing the Algorithm\n\nAlthough it is immensely helpful to read, watch, and write about an idea before starting coding, at some point the building must begin. Based on my notes & doodles, I knew I wanted to implement minimax using two core functions - `minimax()` and `score()`. The first, minimax, would be used to do the actual state generation itself and then recursively pass each state back into minimax. If you've just hesitated and had flashes of `call stack exceeded` or infinite loops - you're right. To avoid these issues, recursive functions must have an exit once a condition is met. Above, you can see `minimax()` exits once the current game has reached an end state whether that be by win, loss, or tie.\n\n```javascript\nscore(state) {\n  if (currentGame.tie(state)) {\n    return 0;\n  } else if (currentGame.player() === \"X\") {\n    return this.depth - 10;\n  } else if (currentGame.player() === \"O\") {\n    return 10 - this.depth;\n  }\n}\n```\n\nOnce the terminal state is reached, `score()` then takes that terminal state and gives it a number based on how many moves – what I've been calling depth – and who is the current player. The depth aspect is used to give moves a higher weight which win, lose, or tie in less moves than others and leads to a truly undefeatable AI. This scoring aspect is actually how the algorithm gets it's name. In practice, the recursive algorithm verifies who's turn it is at each step and will take the *maximum* value move as the computer or the *minimum* value move if it is the players turn – hence minimax.\n\n### Celebrate Perseverance\n\nAs I stated earlier, this all didn't happen in one iteration. Actually, it didn't happen in two or three either and at one point I even took all the individual functions I had and rewrote them as ES6 classes to take on the code from a different angle. For the harder topics in programming, perseverance is key. Regularly I thought I wasn't going to be able to solve the algorithm as a whole so I broke down what I had into smaller pieces until it made sense. This process of breaking down the daunting picture of recursion and an unfamiliar algorithm into smaller, concise pieces alleviated much of my stress and offered up more chances to celebrate success. Everybody loves celebrations.\n\n![celebration-gif](https://d3vv6lp55qjaqc.cloudfront.net/items/1D0s2i2U1s0v0G1k1J11/Image%202017-03-05%20at%205.26.46%20PM.gif);\n",
        "contentDigest": "2cae16b7debfa037569b0fb2f78960ad",
        "type": "MarkdownRemark",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "Discovering the Minimax Algorithm",
        "layout": "post",
        "author": "Steve Frost",
        "date": "2017-03-05T19:00:00.000Z",
        "categories": "blog",
        "tags": "javascript algorithm recursion",
        "description": "For the past few weeks I've been trying, failing, and trying again to implement the minimax algorithm into a game of tic-tac-toe that I built using Javascript. Completing the challenge didn't come all at once but rather in pieces: deciding on the approach, understanding the objective of minimax, and implementing the algorithm.",
        "comments": true,
        "path": "/articles/discovering-the-minimax-algorithm",
        "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/discovering-the-minimax-algorithm.md absPath of file"
      },
      "fileAbsolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/discovering-the-minimax-algorithm.md"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/first-impressions-trellis.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/first-impressions-trellis.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/first-impressions-trellis.md absPath of file",
      "internal": {
        "content": "---\nlayout: post\ntitle: \"First Impressions: Trellis\"\nauthor: Steve Frost\ndate: 2017-06-11 20:45:00 -04:00\ncategories: blog\ntags: wordpress vagrant environment devops trellis\ndescription: \"The Roots bundle is made up of three components which can be used individually or together: Trellis, Bedrock, and Sage. Briefly, Trellis is the server layer, Bedrock is the application layer, and Sage is the theme layer. Thus far, I've gone through the Trellis setup (locally & remotely, more on this soon) so this post will be exclusively about that layer.\"\ncomments: true\npath: \"/articles/first-impressions-trellis\"\n---\n\n![trellis-logo](/assets/img/blogs/firstimpressionstrellis1.jpg)\n\nAfter spending several months creating websites with static-site generators, I had my hesitations to come back to polishing up a WordPress site for a long-time client. On one hand, working in WordPress means I don't have to worry about the shortcomings involved when using flat HTML files such as not having a database or method for processing forms – [workarounds do exist though](https://steveafrost.com/building-a-website-using-middleman/). On the other hand, I was sure I'd miss my modern tool set including live reload, included sass support, templating languages, dependency management, and so on... that is, until I heard about the [tools at Roots](https://roots.io/).\n\n### Roots - Modern WordPress Tools\nThe Roots bundle is made up of three components which can be used individually or together: [Trellis](https://roots.io/trellis/), [Bedrock](https://roots.io/bedrock/), and [Sage](https://roots.io/sage/). Briefly, Trellis is the server layer, Bedrock is the application layer, and Sage is the theme layer. Initially I was introduced to Sage by [Jesse Ross](https://twitter.com/jesseross) and had whole-heartedly planned on researching the documentation then trying to build it into a legacy site. As I read more about each tool, especially Trellis, I decided to give the full bundle a run. Thus far, I've gone through the Trellis setup (locally & remotely, more on this soon) so this post will be exclusively about that layer. As I progress through, I'll write an article about each.\n\n### So, What Is Trellis?\nExcuse any rookie devops inaccuracies in this section. This was my introduction to isolated containers such as Vagrant & Docker which I love so far. Previously, I wrote about setting up your WordPress environment with MAMP and mentioned it can also be done more manually w/ homebrew though I think the best way to retain consistency between development, staging, and production is with Trellis. Trellis can be configured to deliver this consistent environment using a mixture of provisioning via [Vagrant](https://www.vagrantup.com/) & [Ansible](https://www.ansible.com/how-ansible-works), Composer to manage dependencies, and aspects I'm sure I haven't discovered yet. \n\n### Setup & Organization\n![trellis-folder-structure](/assets/img/blogs/firstimpressionstrellis2.jpg){: .align-left}\nI'd be remiss if I wasn't up front about the setup part of Trellis, it can be taxing. The tool is quite massive when first diving in though as with many things development, once I settled in and started to break it down folder by folder, I quite like the organization. In the screenshot, you can see that the top level is split by the Trellis tool & the site built by Trellis. I love that! That means if I have to leave Trellis at some point, the `/site` folder is easily detachable. Drilling down further, the site folder opens up and reveals the composer file, for managing dependencies – more on that soon, while also include a `/web` folder which is where our WordPress files now live. The structure does a great job of separating the logic between Trellis, site config, and actual core WordPress files. As an organization ~~freak~~ connoisseur, Trellis feels like home.\n\n### Portability\nSpeaking of home, Trellis makes a tremendous nomad. There has to be some way to justify all that setup, right? Once you've setup Trellis, the configured environment can be used to provision both a staging and production server but more importantly, another development server! That means if I forget my MacBook, or if I'm using someone elses, or if a teammate wants to work on the website, it is as easy as pulling down the repo and running `vagrant up`. By the way, that is one of the most satisfying commands. In Trellis' case, it goes through all the Ansible playbooks and YAMLs step-by-step to setup a true local Linux box via a virtual machine like [Virtual Box](https://www.virtualbox.org/wiki/VirtualBox). I even tested it out... er, actually I borked my setup about halfway through setting up the production server. Reasonably confident went to reasonably nervous real quick. Had all my work paid off? A simple `git clone` from my repo and `vagrant up` got me back up and running within ten minutes. I'm a believer.\n\n### Remote Provisioning\nI've had a Digital Ocean droplet with the new customer credits for months and never could figure out what to do with it. All my WP sites were hosted elsewhere, my web apps were on Heroku's free tier, but I knew the free credits would come in handle eventually. Enter Trellis & Digital Ocean. If you have a Droplet on Digital Ocean, Trellis provides a [super simple guide](https://roots.io/trellis/docs/remote-server-setup/) to provision your remote server. Once you have configured the YAML files necessary, it is a simple `ansible-playbook server.yml -e env=<environment>` command to provision the server. It doesn't necessarily have to be Digital Ocean either, the same command can be used for Heroku and other providers.\n\n### Dependency Management\nLong live Composer! Composer has been the [more popular option lately](https://benramsey.com/blog/2013/11/the-fall-of-pear-and-the-rise-of-composer/) for PHP dependency management so I'm glad to see the Roots team rolled it into their modern tooling. At first, I didn't understand what exactly I'd use Composer for when working inside of WordPress. Then, I read more into it and a weight was lifted off my WordPress shoulders: Composer can, and should be, used for WordPress plugins. \n\n```php\n\"require\": {\n    \"php\": \">=5.6\",\n    \"composer/installers\": \"~1.2.0\",\n    \"vlucas/phpdotenv\": \"^2.0.1\",\n    \"johnpbloch/wordpress\": \"4.8.0\",\n    \"oscarotero/env\": \"^1.0\",\n    \"roots/wp-password-bcrypt\": \"1.0.0\",\n    \"wpackagist-plugin/akismet\": \"3.3.2\",\n    \"wpackagist-plugin/contact-form-7\": \"4.8\",\n    \"wpackagist-plugin/genesis-responsive-slider\": \"0.9.5\",\n    \"wpackagist-plugin/google-sitemap-generator\": \"4.0.8\"\n  },\n```\n\nThe incredible site of [WPackagist](https://wpackagist.org/) lists all WordPress plugins and themes which can be easily added to your `composer.json` file, installed with `composer install`, and updated with `composer update` – yes, updates & version locking that easy. It reminded me of [RailsAssets](https://rails-assets.org/#/) which converts bower.json files into gems similar to how WPackagist does in mirroring WP Plugins/Themes as a Composer directory. For more info about RailsAssets, see how I used it in my Rails/Angular app [here](https://steveafrost.com/a-greenhorns-approach-to-angular/). The resources the developer community creates is amazing.\n\n### Onto Bedrock\nNow that I have a stable Trellis base, it's time to move onto Bedrock which is the boilerplate from the same Roots family. These tools are essential to bring WordPress into 2017, especially with all of the innovation going on in JS land. I'm excited to see what the Roots team comes up with in [v1.0 of Trellis](https://github.com/roots/trellis/releases/tag/1.0.0-rc.1) and am optimistic about it's growth for years beyond.\n\n### About First Impressions\nFirst Impressions is an ongoing series intended to provide an overview of technology that I've had a hands-on experience with for only a few days. Each blog will cover a single topic and include my straightforward, 72-hour takeaway with any resources that I've found helpful. My intention is that these First Impressions will be both useful intros for others and a personal chronicle to process and reflect on material.\n",
        "contentDigest": "4cc242998a0216dc4fe5432d13d841a0",
        "type": "MarkdownRemark",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "First Impressions: Trellis",
        "layout": "post",
        "author": "Steve Frost",
        "date": "2017-06-12T00:45:00.000Z",
        "categories": "blog",
        "tags": "wordpress vagrant environment devops trellis",
        "description": "The Roots bundle is made up of three components which can be used individually or together: Trellis, Bedrock, and Sage. Briefly, Trellis is the server layer, Bedrock is the application layer, and Sage is the theme layer. Thus far, I've gone through the Trellis setup (locally & remotely, more on this soon) so this post will be exclusively about that layer.",
        "comments": true,
        "path": "/articles/first-impressions-trellis",
        "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/first-impressions-trellis.md absPath of file"
      },
      "fileAbsolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/first-impressions-trellis.md"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/first-impressions-yarn-package-manager.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/first-impressions-yarn-package-manager.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/first-impressions-yarn-package-manager.md absPath of file",
      "internal": {
        "content": "---\nlayout: post\ntitle: \"First Impressions: Yarn Package Manager\"\nauthor: Steve Frost\ndate: 2017-05-14 19:00:00 -04:00\ncategories: blog\ntags: first-impressions yarn dependency-management\ndescription: \"Opening the First Impressions series is none other than the cool kid on the block: Yarn package manager. Yarn was created in collaboration and open sourced last October by Facebook, Exponent, Google, and Tilde.\"\ncomments: true\npath: \"/articles/first-impressions-yarn-package-manager\"\n---\n\n![ball-of-yarn](/img/blogs/firstimpressionsyarn1.jpg)\n\nOpening the First Impressions series is none other than the cool kid on the block: Yarn package manager. Yarn was [created in collaboration and open sourced](https://code.facebook.com/posts/1840075619545360) last October by Facebook, Exponent, Google, and Tilde. I still remember the first time I heard about Yarn at BrooklynJS. It was described as the \"hip\" package manager and received scoffs when mentioned due to it's instability. Since then, it has snowballed in popularity after working out the initial kinks and by providing benefits over the leading, rock-solid [Node Package Manager or NPM](https://www.npmjs.com/).\n\nAfter spending a few days with Yarn, here are the features I've come to appreciate.\n\n* Predictability – Lockfile by Default\n    - NPM offers this option (shrinkwrap) but it is off by default. After spending time in Bundler in Ruby, a lockfile like home to me and when using one we don't have to worry about incremental versions of packages being introduced. These incremental versions, i.e. 1.0.0 to 1.0.1, aren't supposed to have breaking changes by [community standard](https://docs.npmjs.com/getting-started/semantic-versioning) though not all developers follow this suggestion. A good practice is to not be lazy and expect them to always adhere to the standards – use a lockfile. \n\n* Speed & Optimization - Parallel Operations and Cache Directory\n    - These two go hand-in-hand. Yarn shows a sizable improvement over NPM in regards to speed. Yarn claims to parallelize operations more efficiently to result in fetching packages at a fraction of the time. This is compounded for packages that have already been downloaded as Yarn first looks in the cache directory. If the package is found there, it doesn't have to download it again like NPM which means a tremendous speed increase [(12x in this test)](https://youtu.be/hMk_9RjX5KE) and it also means that if you're offline then Yarn will use the local cached version without needing Internet access like you'd need with NPM.\n\n![terminal-with-yarn-add-and-npm-install](/img/blogs/firstimpressionsyarn2.jpg)\n\n* Readability – Reduced Warnings, Condensed Trees, and Emojis\n    - Ok, I *saw* you roll your eyes at emojis, but they're fun! If the cute spyglass, truck, and other emojis don't do it for you, Yarn also has managed to condense the pestering warning messages that are commonplace with NPM. Reading the output sans warning messages and with the condensed dependency tree takes managing packages from a sometimes irritating level to a more enjoyable experience. Lastly, I prefer `yarn add` to `npm install` since it better captures the essence of adding a package to a project. Keying in `yarn global` to add globally makes more sense in my head than `npm -g`. This is clearly personal preference though I want to think these commands are more comfortable and sensible to more than just me.\n\nAfter spending only a few days and around ten hours on Yarn, I think I am converted. It probably helps that I hadn't used NPM for very long and that each has similar behaviors as outlined in Yarn's [migration guide](https://yarnpkg.com/lang/en/docs/migrating-from-npm/). To this point, I have only dealt with one issue and that was the `yarn global ls` not working which is fixed in the most recent `v0.24.4` release. The repository has a healthy amount of closed issues and around seven-hundred open issues which reinforces that while powerful and lean, you could run into bugs here and there. If you're thinking about making the switch, I recommend the [fantastic documentation](https://yarnpkg.com/en/docs/getting-started) as well as [this intro video](https://www.youtube.com/watch?v=7n467QmiANM).\n\n\n### About First Impressions\n\nFirst Impressions is an ongoing series intended to provide an overview of technology that I've had a hands-on experience with for only a few days. Each blog will cover a single topic and include my straightforward, 72-hour takeaway with any resources that I've found helpful. My intention is that these First Impressions will be both useful intros for others and a personal chronicle to process and reflect on material.\n",
        "contentDigest": "29a717cb200ca908dcdb98e177676e31",
        "type": "MarkdownRemark",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "First Impressions: Yarn Package Manager",
        "layout": "post",
        "author": "Steve Frost",
        "date": "2017-05-14T23:00:00.000Z",
        "categories": "blog",
        "tags": "first-impressions yarn dependency-management",
        "description": "Opening the First Impressions series is none other than the cool kid on the block: Yarn package manager. Yarn was created in collaboration and open sourced last October by Facebook, Exponent, Google, and Tilde.",
        "comments": true,
        "path": "/articles/first-impressions-yarn-package-manager",
        "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/first-impressions-yarn-package-manager.md absPath of file"
      },
      "fileAbsolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/first-impressions-yarn-package-manager.md"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/laying-the-foundation-for-a-website.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/laying-the-foundation-for-a-website.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/laying-the-foundation-for-a-website.md absPath of file",
      "internal": {
        "content": "---\nlayout: post\ntitle: \"Laying the Foundation for a Website\"\nauthor: Steve Frost\ndate: 2017-02-12 22:00:00 -04:00\ncategories: blog\ntags: static-site-generator wordpress\ndescription: \"You've been asked to make a site for a friend, family member, or client - where do you start?\"\ncomments: true\npath: \"/articles/laying-the-foundation-for-a-website\"\n---\n\n![building-a-website-featured-photo](/img/blogs/buildingawebsite1.jpg)\n\nSo you've been asked to make a website for a friend, family, neighbor, and maybe even a paying client? One of the first questions to answer is what platform or framework is best to use for this particular job. For years, it was between [several great options](https://lifehacker.com/5965141/how-to-find-the-perfect-way-to-build-your-web-site-for-coders-and-non-coders-alike) which included anything from drag-and-drop to content management systems. In the past few years, we've also seen another options emerge: static site generators. Here we'll try to breakdown what are the benefits and drawbacks of each style so that you can get started on the right foot.\n\n### Drag-and-drop - [Wix](http://www.wix.com/) / [Squarespace](https://www.squarespace.com/)\n\nDrag-and-drop site builders have been snatching up all the commercials in the past few years and it's led them to be a really popular option. You'd think they just started the business but believe it or not, the more popular drag-and-drop site builders got their start [as early as 2004](https://www.squarespace.com/about/company/). I didn't believe it. Two of the most popular options - Wix & Squarespace - share that users have used their services to create multiple millions of websites.\n\n* Benefits\n  * Easy, quick to setup\n  * Abbreviated admin dashboard UI to make updates - user friendly\n  * There is usually a free option available\n  * No technical maintenance required\n\n* Drawbacks\n  * Free options usually place ads on your site\n  * Limited customizability, extensibility\n  * High monthly fee when website grows or you want to remove ads\n\n### Content Management Systems (CMS) - [WordPress](https://wordpress.com/) / [Joomla](https://www.joomla.org/)\n\nSince WordPress makes up almost 60% of this category, we'll stick to talking about it. WordPress is also 27% of the total web right now which means there is a tremendous community around it. WordPress is most commonly used for a blogging system - hence content management - and I would say it fits that need perfectly. Since 2003, they've been iterating on WordPress to make it the most robust website solution around.\n\n* Benefits\n  * Can be self-hosted (you own your content)\n  * Full administrator dashboard UI - user friendly\n  * Massive community means support forums are filled with answers to common questions\n  * Extensibility through 3rd-party plugins\n\n* Drawbacks\n  * If self-hosting, technical maintenance is required\n  * Includes a database which can be a source of vulnerability\n  * Some knowledge required to do initial setup\n\n### Static Website Generators - [Jekyll](https://jekyllrb.com/) / [Middleman](https://middlemanapp.com/)\n\nRobust is good if you need it but sometimes WordPress can be like using a sledgehammer to crack a nut. After making several sites of varying use from WordPress, I found the latest trend of static website generators very liberating. It is almost full circle from how websites were originally created - a group of HTML files, a group of CSS files, and maybe a JS file if the site was gettin' fancy. These generators take that idea one step further and usually incorporate some type of [front-matter](https://jekyllrb.com/docs/frontmatter/), loops, and other intricacies [provided by a templating language](http://tutorials.jumpstartlab.com/topics/better_views/erb_and_haml.html). As you've guessed by the last few sentences, these generators are the hardest of the three options to setup but they also provide a spectacular payoff.\n\n* Benefits\n  * Fastest page loads of all options - really, really fast\n  * No database means no vulnerabilities like WordPress\n  * Extremely customizable & extendable\n  * Jekyll pages can be [hosted for free](https://help.github.com/articles/using-jekyll-as-a-static-site-generator-with-github-pages/) on GitHub pages\n\n* Drawbacks\n  * Intermediate knowledge of programming required to setup\n  * If changes are needed, there is no user friendly dashboard like other options have\n  * Depending on where it is hosted, there may be server maintenance involved\n\n### Wrap-Up\n\nIf it isn't evident, I have grown partial to the static website generator option. It's true, I am absolutely in love with it right now and this site is actually built with one of those - Jekyll. I'm also working on another site that uses the other static option, Middleman, and will be doing a post about my experiences with it once I'm finished.\n\nAll that said, when taking on a job it is always best to think which one of these options is the right tool for the job. Taking time to craft a plan before starting can seem like procrastination or running in place but it almost always pays off in the long run. [Travis Neilson](http://travisneilson.com/) said it best in his [DevTips YouTube Series](https://www.youtube.com/watch?v=VcMjo_wczCc) when he said, \"a large part of this job is thinking, and planning, and organizing.\"\n",
        "contentDigest": "a88ac1fc4ed9aa16ba7f6977165a96fd",
        "type": "MarkdownRemark",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "Laying the Foundation for a Website",
        "layout": "post",
        "author": "Steve Frost",
        "date": "2017-02-13T02:00:00.000Z",
        "categories": "blog",
        "tags": "static-site-generator wordpress",
        "description": "You've been asked to make a site for a friend, family member, or client - where do you start?",
        "comments": true,
        "path": "/articles/laying-the-foundation-for-a-website",
        "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/laying-the-foundation-for-a-website.md absPath of file"
      },
      "fileAbsolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/laying-the-foundation-for-a-website.md"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/grasping-declarative-programming.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/grasping-declarative-programming.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/grasping-declarative-programming.md absPath of file",
      "internal": {
        "content": "---\nlayout: post\ntitle: \"Grasping Declarative Programming\"\nauthor: Steve Frost\ndate: 2017-04-16 16:00:00 -04:00\ncategories: blog javascript\ntags: glossary declarative imperative\ndescription: \"I spend as much time, if not more, learning than I do building at this point. That is one of the perks of the profession, continuous learning. In that spirit, I recently came across a term that is emphasized in React that I had to read into to truly understand what it meant – Declarative Programming.\"\ncomments: true\npath: \"/articles/grasping-declarative-programming\"\n---\n\n![researching](/img/blogs/imperativevsdeclarative1.jpg)\n\nOver the past two weeks I've been learning React to add to my skill set as a developer and have come to adopt a motto that encompasses every day I am programming – React or otherwise.\n\n> Research is what I'm doing when I don't know what I'm doing. - Wernher Von Braun, German rocket scientist\n\nWhat could be more true about the act of programming? I spend as much time, if not more, learning than I do building at this point. That is one of the perks of the profession, continuous learning. In that spirit, I recently came across a term that is emphasized in React that I had to read into to truly understand what it meant – Declarative Programming.\n\n### Defining Declarative Programming\n\nWhen I approach new terms, I like to grasp the English meaning first then move onto the programming tech metaphors & implementation. So what do we mean when we say [declarative](https://www.thoughtco.com/declarative-sentence-grammar-1690420) and what is it's [counterpart](https://www.thoughtco.com/imperative-sentence-grammar-1691152)?\n\n> Declarative: makes a statement or argument about what is, was, or will be the case.\n\n> Imperative: gives advice, instructions, or expresses a request or command.\n\nIn pseudo-code, this can be represented by the age-old 'make a sandwich' metaphor.\n\n```html\n<!-- Declarative -->\n1. Can you make me a peanut butter and jelly sandwich?\n\n<!-- Imperative -->\n1. Go to the kitchen\n2. Open the cabinet by grasping and pulling toward yourself\n3. Grab toaster and move to counter\n4. etc, etc\n```\n\n### Another Way to Look At It\n\nThe definition made sense to me, but what provided a breakthrough was a line from [Tyler McGinnis' article](https://tylermcginnis.com/imperative-vs-declarative-programming/) on Imperative vs Declarative. In his article, Tyler notes that another way to look at declarative programming is to see it as an abstraction of imperative programming. Even though in declarative programming we're only telling the code *what* to do rather than *how*, that *how* is still being executed at some point by the language but it is hidden from us or abstracted away.\n\n### What Uses Declarative Programming?\n\nThis is somewhat of a loaded, tricky question. Some languages use explicitly imperative styles, some declarative, and some are a mix. Take Javascript for example. We can iterate over a `collection` and imperatively tell each element what to do and return the `collection` or we can abstract the idea of returning the `collection` to more advanced functions like `map`.\n\n### Declarative Trends\n\nAs it stands right now, most modern Javascript frameworks including React operate in this declarative programming fashion. We tell React *what* we want to be in our component and the framework abstracts away all of the *how*. This allows us to focus more on the UI than we could previously and leave the dirty work to React. It is important to note here that even though this is abstracted away, we should still understand *how* React is doing these things on a basic level so that we can debug when needed.\n\nAs I continue to learn React, I think this knowledge will be necessary to develop a thorough understanding of why React is crafted the way it is. Judging by the [popularity of Javascript & Javascript frameworks](https://trends.google.com/trends/explore?q=react,angular), I am guessing it is a style that we'll be seeing often.  \n",
        "contentDigest": "3fc5426fe14c03349fcd3aa06d0e2de9",
        "type": "MarkdownRemark",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "Grasping Declarative Programming",
        "layout": "post",
        "author": "Steve Frost",
        "date": "2017-04-16T20:00:00.000Z",
        "categories": "blog javascript",
        "tags": "glossary declarative imperative",
        "description": "I spend as much time, if not more, learning than I do building at this point. That is one of the perks of the profession, continuous learning. In that spirit, I recently came across a term that is emphasized in React that I had to read into to truly understand what it meant – Declarative Programming.",
        "comments": true,
        "path": "/articles/grasping-declarative-programming",
        "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/grasping-declarative-programming.md absPath of file"
      },
      "fileAbsolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/grasping-declarative-programming.md"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/honeypotting-simple-spam-prevention.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/honeypotting-simple-spam-prevention.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/honeypotting-simple-spam-prevention.md absPath of file",
      "internal": {
        "content": "---\nlayout: post\ntitle: \"Honeypotting: Simple Spam Prevention\"\nauthor: Steve Frost\ndate: 2017-03-11 12:30:00 -04:00\ncategories: blog\ntags: html css javascript forms security captcha honeypot\ndescription: \"The idea of creating a honeypot is not new to development, and you might have even used one before without knowing it. Fundamentally, a honeypot is a hidden form field that lives amongst other, legit fields and is then hidden from the user.\"\ncomments: true\npath: \"/articles/honeypotting-simple-spam-prevention\"\n---\n\n![honeypot-picture](/img/blogs/honeypot1.jpg)\n\nSpam was a real problem when the World Wide Web was in it's infancy and remains equally pesky 20-some years later with some countries even [passing spam legislation](http://fightspam.gc.ca/eic/site/030.nsf/eng/home). At it's most basic, preventing spam involves [blacklisting](https://sendgrid.com/blog/email-blacklist/), or preventing, IPs that have been deemed suspicious from accessing a server. Actually, this is one technique that has stood the test of time and is still used regularly for spam, malicious ads, poor torrent seeders, etc. Along the way, we also invented a few ways to detect spam before it even reached the server or the blacklist: captchas with hard to read words, filters, speaking captchas, DNS lookup, captchas that included *math*, and newer techniques such as [greylisting](https://www.greylisting.org/).\n\n### How I found Honeypotting\n\nWhile these techniques are effective, each one has it's own drawbacks. During my most recent project, [my teammate](http://joelbitar.space) and I had to implement a form to capture user information and became curious about how best to prevent spam without clouding up the user experience. Captchas are the most common type of form spam prevention because they're effective though we had a clean design and didn't want to toss in a captcha as they don't always look the fluid with the site and can be aggravating to resolve as a user. Our users were going to be everyone from children to older adults so we decided to look at other options and stumbled onto a term called [honeypotting](https://solutionfactor.net/blog/2014/02/01/honeypot-technique-fast-easy-spam-prevention/).\n\n### What is a Honeypot?\n\nThe idea of creating a honeypot is not new to development, and you might have even used one before without knowing it. Fundamentally, a honeypot is a hidden form field that lives amongst other, legit fields and is then hidden from the user. \n\n```html\n<form method=\"POST\" action=\"some-action\">\n    <input type=\"text\" name=\"email\" placeholder=\"email\">\n    <input type=\"text\" name=\"zip\" placeholder=\"zip\">\n    <input type=\"text\" name=\"honeypot\" placeholder=\"honeypot\">  <!-- we hide this with CSS -->\n</form>\n```\n\nThe spambots that comb through sites and produce the vile spam we've come to despise typically look directly at the source code so while the user will not see this honeypot input field, the bots will and they will fill it in. Gotcha! Using JS or PHP for form validation we can now reject the entry if the field is filled in. \n\n```javascript\n$('form').submit(function() {\n  if ($(\"input[name='honeypot']\").val() === '') {\n    // send entry to server\n  } else {\n    // must be a bot\n    // reject entry before it hits server\n  }\n}\n```\n\nNow we know that it's a bot trying to fill us up with the latest news of [our favorite Nigerian Prince](https://www.bbb.org/new-york-city/get-consumer-help/articles/the-nigerian-prince-old-scam-new-twist/).\n\n### Improving Your Honeypot\n\nWhile this simple, clean technique worked perfectly when it was first introduced, spambots have gotten used to seeing fields that don't make sense or have obvious names like \"honeypot\" so be creative. The more creative you are, the better.\n\n* Give all form fields random names. If all fields are random, then the spambots don't have a clear indication as to which ones are honeypots and will fill them all in - exactly what we want. If the server needs uniform names then Javascript/PHP can be used to change the field names on submit. \n* Place the honeypot field randomly amongst the others rather than first or last.\n* Include a form label - `<label for=\"name-here\"></label>` – for each form field including the honeypot. This makes the honeypot look more authentic since it follows the structure of the other fields.\n\n### Wrap-Up\n\nHoneypots are a dead-simple technique that can be baked into each form on a website to prevent spam. Remember, I'm using prevent in a non-inclusive way. Each day spambots are getting smarter and some are bound to detect the honeypot - heck, [some can even solve captchas](https://arstechnica.com/information-technology/2013/11/how-are-robots-beating-my-captchas/). That said, when weighing the overhead against the benefit, honeypotting is an efficient technique and it provides an easier, cleaner UI experience than ([impossible](http://www.seosmarty.com/impossible-captcha-it-doesnt-really-matter-if-you-are-human-or-not/)) captchas.\n\n",
        "contentDigest": "fdd63a8e8a764809bdf3ea5f083b5d30",
        "type": "MarkdownRemark",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "Honeypotting: Simple Spam Prevention",
        "layout": "post",
        "author": "Steve Frost",
        "date": "2017-03-11T16:30:00.000Z",
        "categories": "blog",
        "tags": "html css javascript forms security captcha honeypot",
        "description": "The idea of creating a honeypot is not new to development, and you might have even used one before without knowing it. Fundamentally, a honeypot is a hidden form field that lives amongst other, legit fields and is then hidden from the user.",
        "comments": true,
        "path": "/articles/honeypotting-simple-spam-prevention",
        "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/honeypotting-simple-spam-prevention.md absPath of file"
      },
      "fileAbsolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/honeypotting-simple-spam-prevention.md"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/learning-a-second-programming-language.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/learning-a-second-programming-language.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/learning-a-second-programming-language.md absPath of file",
      "internal": {
        "content": "---\nlayout: post\ntitle: \"Learning a Second (Programming) Language\"\nauthor: Steve Frost\ndate: 2016-11-30 19:00:00 -04:00\ncategories: blog\ntags: flatiron-school learning-to-code javascript jQuery project\ndescription: \"There will never be such a special programming language as your first. The quicker you realize that, the quicker you can move on and make yourself a more robust developer.\"\ncomments: true\npath: \"/articles/learning-a-second-programming-language\"\n---\n\n![javascript please work](/img/blogs/jspleasework.jpg)Over the past month if I wasn't eating, sleeping, or working, I was nose-deep in material about Javascript & jQuery for class at [Flatiron](https://flatironschool.com). As with the lessons & labs involving Ruby, this was my first time with Javascript. Overall, it was tough. I was more discouraged, more often with Javascript. I found myself comparing it to Ruby - longing for the days of simplicity, no semi-colons, and [better error messages](https://www.sitepoint.com/ruby-error-handling-beyond-basics/) than `undefined`. Finally, luckily, I realized that my frustration and discouragement was mainly two factors.\n\n\n\n### My First Love\nRuby was the first real programming language I had learned and I was being biased. My brain had been programming a long time in Ruby and it was the way I thought about code so any change to this was going to be met with resistance. It's like [learning a second language](https://www.babbel.com/en/magazine/10-stages-of-language-learning) in addition to your native tongue. At first, you'll convert everything to that native tongue and make sense of it. Then, as you mature in the language, you are able to think in both languages and there is less inner translation that occurs. As I had less quarrels with myself about how this JS looked in Ruby and adjusted my mind to think in a Javascript way, I had more successful moments.\n\n### Each Language is Seperate\nThere are shared patterns and logic between Ruby and JS but it was helpful for me to keep in mind that each language has their own constructs and behavior. This undoubtably sounds like an \"of course!\" point to those who have been programming for awhile. Personally, it was a hard point that was the source of many of my struggles with Javascript. When moving through this new language, I brought a lot of *how* Ruby worked along and was frustrated when JS didn't work that way. Eventually, I learned that JS did things the JS way and approached problems in a different manner than what I knew. Once I disconnected from previous conventions, I was able to learn.\n\nAs soon as I got semi-comfortable, [our final project](https://learn.co/lessons/rails-js-assessment) for the section! The requirements were to dismantle (ok, maybe not that harsh) your beautiful (true) Rails app and use JS/jQuery to power front-end functionality. Noooooo! Piece-by-piece I found JS equivalents to my Rails code learning Javascript more with each substitution.\n\n### If You Can't Rails, Kinda Rails\n[Handlebars](http://handlebarsjs.com/). First, I had to learn not to call it Handlebar Mustache because Mustache is a different templating language. As far as installation and getting started, Handlebars homepage and documentation is straight forward and easy to use. It was especially useful for replacing the [Rails partials](https://richonrails.com/articles/partials-in-ruby-on-rails) in my app. Handlebar templates are very similar to partials, at least in the way I used them. They can hold all your HTML so that JS isn't concerned with any HTML. This is one of the main benefits because up to this point I had been concatenating long strings in Javascript like this:\n\n```javascript\n  html = '';\n  html += 'my first line of text';\n  html += 'some more text';\n  html += 'now this is getting kinda messy';\n  html += 'yup, need handlebars';\n  return html;\n```\n\nWith Handlebars the HTML can be included in natural form & syntax as long as it is wrapped with the `<script id=\"entry-template\" type=\"text/x-handlebars-template\"` tag. It will then appear hidden on the page, ready for use by the Javascript. The second useful feature of Handlebars is that it has expressions that are wrapped in {% raw %}{{ }}{% endraw %} which work like variables that can be injected from the Javascript. This works great for grabbing JSON from the Rails API and displaying it on the front-end. There are also loops/conditionals that can be used in conjunction with these expressions. Those familiar with Ruby or Javascript will recognize options like `each` and `if/else`.\n\nAnother practice I found helpful was attempting to do my Javascript/jQuery in the console within the web browser before using it within the app. In the console, you can make changes with greater speed and try different approaches all while seeing the results in realtime with your app appearing within the browser as well. This is priceless! If I had to make all my changes in the code and then load the app, navigate to the particular section, and mock the user behavior, that would take much longer! If you're more used to Terminal, and have [node.js](https://nodejs.org/en/) installed, you can use `node` in the Terminal to drop into a Javascript console. This is kinda like an IRB session in Ruby. It is useful for quick tinkering where the console in the web browser is useful for interacting directly with your application.\n\n### Acceptance\nAfter getting more acclimated to Javascript and letting my brain settle into a different way of thinking, I found enjoyment in the immediateness of Javascript - especially the jQuery library. There is an excitement to being able to interact with an app instantly to move, toggle, slide, fade, and hundreds of other actions. Using the knowledge gained so far of Javascript, I was able to reproduce effects and techniques I'd seen around the web for years like overlays, loading pages without hefty refreshing, and posting data to the server and having that same data appear on the screen. The last of which I considered honest-to-god magic before going through these Javascript lessons.\n\nLooking down the barrel at the upcoming Angular lessons, there is some deja vu I feel when starting a new section. Each section of learning code at Flatiron has forced me outside of my shortly enjoyed comfort zone. Each one has been challenging, aggravating, and that much more rewarding at the end. I hate programming. I love programming. I can't wait to start learning Angular.\n",
        "contentDigest": "289deeea2697d9e32d88ab3e60717b31",
        "type": "MarkdownRemark",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "Learning a Second (Programming) Language",
        "layout": "post",
        "author": "Steve Frost",
        "date": "2016-11-30T23:00:00.000Z",
        "categories": "blog",
        "tags": "flatiron-school learning-to-code javascript jQuery project",
        "description": "There will never be such a special programming language as your first. The quicker you realize that, the quicker you can move on and make yourself a more robust developer.",
        "comments": true,
        "path": "/articles/learning-a-second-programming-language",
        "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/learning-a-second-programming-language.md absPath of file"
      },
      "fileAbsolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/learning-a-second-programming-language.md"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/javascript-type-coercion.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/javascript-type-coercion.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/javascript-type-coercion.md absPath of file",
      "internal": {
        "content": "---\nlayout: post\ntitle: \"Javascript Type Coercion\"\nauthor: Steve Frost\ndate: 2017-04-23 13:00:00 -04:00\ncategories: blog javascript\ntags: glossary coercion\ndescription: \"When I made my transition from Ruby to Javascript, the various nuances of the language were frustrating and I was tempted to retreat back to Ruby. After investing time to understand them, I grew fond of Javascript and left my past love behind. At the forefront of subtle, pesky behaviors is Type Coercion.\"\ncomments: true\npath: \"/articles/javascript-type-coercion\"\n---\n\n![javascript-type-coercion-picture](/img/blogs/javascripttypecoercion1.jpg)\n\nWhen I made my transition from Ruby to Javascript, the various nuances of the language were frustrating and I was tempted to retreat back to Ruby. After investing time to understand them, I grew fond of Javascript and left my past love behind. At the forefront of subtle, pesky behaviors is *Type Coercion*. If you break down the word, it tells you exactly what behavior is happening here: Javascript is [coercing](http://www.dictionary.com/browse/coerce), or persuading, a value to a different type as in the string '1' becomes 1.\n\n### When Does Coercion Occur\n\nNow that we have a definition of coercion, what does it actually occur in Javascript? The answer can be split into two sections: implicit coercion and explicit coercion. If you are unfamiliar with implicit vs explicit, the way I usually remember it is that being explicit means you're being very detailed and dictating each step while implicit describes behaviors that happen without the programmer providing all steps. Before continuing, here are two examples to represent each type of coercion.\n\n```javascript\n*Implicit Coercion*\nvar a = 1\nvar b = \"1\"\na == b  // returns true\n\n*Explicit Coercion*\nb = a.toString();\ntypeof a // number\ntypeof b // string\n```\n\nHopefully this helps differentiate implicit vs explicit. In the implicit example, Javascript is coercing `b` to a `number` type so that it can compare to `a` which is a number. In the explicit example, we are providing the exact steps to coerce a value.\n\nSince explicit coercion is fairly easy to understand and typically intentional, we'll focus on implicit coercion and the most notorious situation: comparing two values.\n\n### Breaking Traditions and Taking Sides\n\nIt is a long-standing, popular stance to avoid coercion when comparing values by using the strict equality operator: `===` or `!==`. Numerous JS books such as [\"Javascript: The Good Parts\"](https://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742) recommend this approach of avoiding coercion in all situations and it specifically squares off against the loose equality (`==`) operator. There is plenty of similar debate in the community as a whole around whether coercion is a feature or a bug.\n\nWhile it may be a tradition to stick to `==` instead of `===` – in fact, it was how I was taught – I am under the belief now that we should understand what is happening behind each (hint: implicit coercion) and use the proper comparison operator in each situation. If I could point to one passage that helped me wrap my head around the coercion happening behind loose and strict comparisons, it would be the community guide assembled by Kyle Simpson called, [\"You Don't Know JS\"](https://github.com/getify/You-Dont-Know-JS) which is an exhaustive, brilliant guide to Javascript.\n\n> The difference between `==` and `===` is usually characterized that `==` checks for value equality and `===` checks for both value & type equality. However, this is inaccurate. The proper way to characterize them is that `==` checks for value equality *with* coercion allowed, and `===` checks for value equality *without* allowing coercion.\n\n### Wrap-Up\n\nWhile it can be intimidating that there are a sufficient number of nooks to explore in Javascript, I believe learning these core behaviors can be extremely beneficial in both creating our programs as well as debugging them – especially debugging them. As I continue to create, I hope to expand my understanding of exactly what is happening 'under the hood' such as the difference explained here regarding coercion and apply that knowledge to future programs. I'm hopeful that this post also spurred your interest in diving deep into some of the 'magic' behind-the-scenes of your latest creation.\n",
        "contentDigest": "760390ade3ccb46b26445a5d1d54cb36",
        "type": "MarkdownRemark",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "Javascript Type Coercion",
        "layout": "post",
        "author": "Steve Frost",
        "date": "2017-04-23T17:00:00.000Z",
        "categories": "blog javascript",
        "tags": "glossary coercion",
        "description": "When I made my transition from Ruby to Javascript, the various nuances of the language were frustrating and I was tempted to retreat back to Ruby. After investing time to understand them, I grew fond of Javascript and left my past love behind. At the forefront of subtle, pesky behaviors is Type Coercion.",
        "comments": true,
        "path": "/articles/javascript-type-coercion",
        "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/javascript-type-coercion.md absPath of file"
      },
      "fileAbsolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/javascript-type-coercion.md"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/object-models-in-ruby.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/object-models-in-ruby.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/object-models-in-ruby.md absPath of file",
      "internal": {
        "content": "---\nlayout: post\ntitle: \"Object Models in Ruby\"\nauthor: Steve Frost\ndate: 2016-05-31 15:00:00 -04:00\ncategories: blog\ntags: flatiron-school learning-to-code\ndescription: \"What are object models in Ruby? How do they work? How do you avoid the headaches when working with object models?\"\ncomments: true\npath: \"/articles/object-models-in-ruby\"\n---\n\n_(Day 31)_\n\n### Sanity Recap ###\nPhew, it's the end of my first month at Flatiron's Full Stack program and I'm still alive. I've been using a Pomodoro app to track my time as well as keep me motivated and it's worked wonders. The total hour count for the month was just over 80 hours which means I'm at least 10% into the course now by Flatiron's estimated hour count of 600-800 hours to complete the course content. Onto the good stuff...\n\n### Object Models in Ruby ###\nThis is one topic in Ruby that has resulted in many restless nights. The explanation here includes my insights into what I got stuck on and what helped me through the process of learning Object Models. If you're a beginner, jump to the end and read through some of the lengthy tutorials linked then come back and measure up your experience with mine.\n\n### Objects are the Building Blocks ###\nTo understand object models, we must first understand objects. **Everything in Ruby is an object.** An object has all the data and all the logic required to complete a task. The customized actions/behaviors that these objects can use are called **methods.** Methods can be defined by the user but they also ship with several [built-in methods](http://ruby-doc.org/docs/ruby-doc-bundle/Manual/man-1.4/function.html \"Ruby Docs - Built-in Methods\"). These are extremely useful! The example below uses both. I'm creating a custom method #sandwich which is using a built-in method of #puts to print or log a string of text.\n\n```ruby\nclass MyLunch\n  def sandwich\n    puts \"nom nom nom\"\n  end\nend\n```\n\n### Putting the Blocks Together ###\nWhen working with multiple objects and methods, the most useful advice I've received is to \"think about who's job the task at hand belongs to.\" If working with our previous example of MyLunch, suppose we want to keep track of how much lunch money I have at the start of the day and then at the end of the day, essentially computing the cost of lunch. This job sounds like a job for somebody other than the #sandwich method... how about a new method called #wallet - that would make sense. A wallet method to maintain the current status of how much money is in the wallet.\n\n### Object Relationships ###\nAs you grasp the concept of object models, it starts to become clear that the power in objects is relating them to each other. This means that an instance of the MyLunch class can be related to an instance of the DoHomework class so the two can talk to each other. For example, if a MyLunch instance has a current_status variable that is set to active, then DoHomework can know about that and set it's current_status variable to inactive. As you can probably forsee, the more objects and instances, the larger bowl of spaghetti you get here. Sometimes it can be hard to see how objects are relating to each other and exactly where they are picking up their attributes. My recommendation here is to draw out a map of the relationships like the one I've included below. The other thing that _really_ worked for me was to talk about the relationships out loud - whether that was to Flatiron peers, uninterested neighbors, or a semi-interested girlfriend. Talking out loud about the code & the relationships within has helped me over a hurdle several times. More on object relationships soon!\n\n![object-model-picture](/img/blogs/object-models-in-ruby.jpg \"Object Model Picture\")\n\n\n\n### Helpful Links\n[Object Oriented Concepts](http://ruby.bastardsbook.com/chapters/oops/ \"Object Oriented Concepts\")\n\n[3 Steps to Understand Classes and Objects in Ruby](http://www.rubyfleebie.com/3-steps-to-understand-how-classes-and-objects-work-in-ruby/ \"3 Steps to Understand Classes and Objects in Ruby\")\n\n[Seeing Metaclasses Clearly](http://viewsourcecode.org/why/hacking/seeingMetaclassesClearly.html \"Seeing Metaclasses Clearly\")\n\n[Understanding self](http://blog.honeybadger.io/ruby-self-cheat-sheet/ \"Understanding self\")\n",
        "contentDigest": "5b17dfc239ab535a7a3d2d01bb7f8cc7",
        "type": "MarkdownRemark",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "Object Models in Ruby",
        "layout": "post",
        "author": "Steve Frost",
        "date": "2016-05-31T19:00:00.000Z",
        "categories": "blog",
        "tags": "flatiron-school learning-to-code",
        "description": "What are object models in Ruby? How do they work? How do you avoid the headaches when working with object models?",
        "comments": true,
        "path": "/articles/object-models-in-ruby",
        "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/object-models-in-ruby.md absPath of file"
      },
      "fileAbsolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/object-models-in-ruby.md"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/learning-crud-with-monster-trucks.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/learning-crud-with-monster-trucks.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/learning-crud-with-monster-trucks.md absPath of file",
      "internal": {
        "content": "---\nlayout: post\ntitle: \"Learning CRUD with Monster Trucks\"\nauthor: Steve Frost\ndate: 2016-08-05 16:00:00 -04:00\nimage: '/img/blogs/learningcrud1.jpeg'\ncategories: blog\ntags: flatiron-school learning-to-code\ndescription: \"We try to have some nostalgic monster truck fun while learning CRUD routes in Sinatra\"\ncomments: true\npath: \"/articles/learning-crud-with-monster-trucks\"\n---\n\n*(Day 96)*\n\nCRUD is a handy acronym that stands for Create, Read, Update, and Delete — each word representing a particular controller action within Sinatra. Think of these controller actions like this: each time you type a URL into the address bar of the browser, a controller at that site watches for that URL and will go into the website or program and grab the relevant information that you have requested. Controller actions direct the traffic into the proper lanes much like a traffic cop would at a busy intersection, or in our case, a website.\nLet’s do a quick example. If I were building an app that cataloged books… or let’s say MONSTER TRUCKS, then here’s how each action of CRUD would direct the “traffic” into the lanes — see the analogy worked out, traffic cops and monster trucks.\n\n* **C**reate would be responsible for fielding requests for the URL, /truck/new and when that happens, this action shows the user the “view” called “new.” This view is an HTML page quite like the one you’re reading now. Within the “new” view, there is a form to create a new truck. Give your truck a cool name, Grave Digger is the best, a flashy color, mandatory coolness score, and then submit the form. Here is where the Create action pulls double duty. This action also handles creating the truck from the information submitted in the form and saving that information to a database so that we can see the details of that truck at any later time.\n\n![Create Screenshot](/img/blogs/learningcrud1.jpeg)\n\n* **R**ead then provides access to seeing each trucks details. If a user visits /truck/grave-digger then the Read controller will grab the details about that truck, the best truck of all, and display it on a HTML page.\n\n![Read Screenshot](/img/blogs/learningcrud2.jpeg)\n\n* **U**pdate is there for whenever we need to edit the trucks already saved into the database by a Create action. To update a truck, the user visits /truck/grave-digger/edit and is shown a form pre-filled with the information that we already know about that truck which was saved in the database when we Created it. Each field can be updated with new information then the Update controller handles applying those changes to the truck within the database. In this way it is similar to Create in that it will both display a form on a page and take the information entered into that form to the database.\n\n![Update Screenshot](/img/blogs/learningcrud3.jpeg)\n\n* **D**elete is the simplest controller. The sole purpose for the Delete controller is to wait for a user to click “Delete” on the /truck/grave-digger/edit page and when that happens, Delete the truck within the database. Be careful with this controller as it’s permanent and Grave Digger knows where you live.\n\n![Delete Screenshot](/img/blogs/learningcrud4.jpeg)\n\nThis pattern helps immensely with organizing a web app and creating consistent structure among the developers who do choose to use it. As a beginning Rubyist (if I can use that word) it has helped me tackle the common hurdle of staring at a blank text document when starting a new project because now I know I can start off with Create and move through the following CRUD actions to form the base of my app.\nHopefully that provides a general understanding of CRUD apps and inspires a few project ideas. If there’s any clarification I can offer, let me know in the comments and I’ll do what I can to help! In no time you’ll be doing CRUD apps which is basically the equivalent of…\n\n![Monster Truck Doing Circles](/img/blogs/learningcrud5.gif)\n\n",
        "contentDigest": "188f6426642169f4c1d04233ef61dae1",
        "type": "MarkdownRemark",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "Learning CRUD with Monster Trucks",
        "layout": "post",
        "author": "Steve Frost",
        "date": "2016-08-05T20:00:00.000Z",
        "image": "/img/blogs/learningcrud1.jpeg",
        "categories": "blog",
        "tags": "flatiron-school learning-to-code",
        "description": "We try to have some nostalgic monster truck fun while learning CRUD routes in Sinatra",
        "comments": true,
        "path": "/articles/learning-crud-with-monster-trucks",
        "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/learning-crud-with-monster-trucks.md absPath of file"
      },
      "fileAbsolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/learning-crud-with-monster-trucks.md"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/preprocessing-bundling-and-live-preview-with-gulp.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/preprocessing-bundling-and-live-preview-with-gulp.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/preprocessing-bundling-and-live-preview-with-gulp.md absPath of file",
      "internal": {
        "content": "---\nlayout: post\ntitle: \"Preprocessing, Bundling, and Live Preview with Gulp\"\nauthor: Steve Frost\ndate: 2017-07-02 23:30:00 -04:00\ncategories: blog\ntags: sass css javascript gulp environment\ndescription: \"A common phenomenon in the community is that we regularly build upon abstractions that have been established without fully understanding what they are or how to build them ourselves. On one hand, if we dug down into every abstraction to the individual pieces that make it work, we'd probably never get any work done. On the other hand, I believe it's important to have at least a general understanding of what is going on under the hood so if there is an issue, I can fix it. In the intersection between 'no idea how it works' and static-site generators is the development environment setup by these generators.\"\ncomments: true\npath: \"/articles/preprocessing-bundling-and-live-preview-with-gulp\"\n---\n\n![gulp-logo](/assets/img/blogs/gulp1.jpg)\n\nA common phenomenon in the community is that we regularly build upon abstractions that have been established without fully understanding what they are or how to build them ourselves. On one hand, if we dug down into every abstraction to the individual pieces that make it work, we'd probably never get any work done. On the other hand, I believe it's important to have at least a general understanding of what is going on under the hood so if there is an issue, I can fix it. In the intersection between 'no idea how it works' and [static-site generators](https://steveafrost.com/building-a-website-using-middleman/) is the development environment setup by these generators.\n\nAfter using such generators as Jekyll, Middleman, and Gatsby, I became interested in how to build such an environment that included preprocessing for SASS, bundling for javascript files, and live reload for an efficient [feedback loop](https://www.smashingmagazine.com/2013/02/designing-great-feedback-loops/). \n\nWhen I received my next side project, I started to look for what kind of tools were being used for this and came across three: [Gulp](http://gulpjs.com/), [Grunt](https://gruntjs.com/), and [Webpack](https://webpack.github.io/). If you've been within earshot of even a single developer over the past half year, you've probably heard about at least Webpack. It's generating the most buzz right now particularly because it works well with the emerging Javascript frameworks like React. That said, I put it on my short list of tools to learn because I've read that it can be overwhelming to learn especially if it is your first build tool. Instead, I wanted to start with a build tool that has been around for longer and is the older brother in some ways: [Gulp](http://gulpjs.com/).\n\n### Unboxing Gulp\n\nPut simply, Gulp can do a ton. Out of the box, there are simple functions like `.src` and `.dest` to designate source & destination folders. There are simple ways to read, process, and return the result in the same folder but I'd suggest structuring your project with a `./source` and `./build` folder. The source folder is where the individual, unbundled, unminified, unoptimized files will live and after Gulp is done, the build folder will contain these same files organized in a manner that is fully web optimized & ready to ship.\n\n### Gulp Plugins Starter Kit\n\nWhen Gulp really starts to shine is with plugins. You can find an entire list [here](http://gulpjs.com/plugins/). In fact, you'll need a few plugins to do the automation/building we're going to do.\n\n* _gulp-sass_ used for preprocessing SASS files and turning them into one cumulative CSS file. This is beneficial because then rules can be separated by topic, section, or other designation and the production site wouldn't know otherwise. It also helps in reducing load times & server load because there's only one request made to the server for one CSS file rather than multiple requests for multiple files. \n* _gulp-concat_ used for bundling all Javascript included in the project. This has similar benefits to the gulp-sass plugin in that it allows for separation of code and reduces server requests to a single request for one bundled Javascript file.\n* _gulp-sourcemaps_ used for guiding back to the original SCSS or JS file. Most modern browsers support sourcemaps now and they're a great way to keep tabs on the individual files \n* _browser-sync_ used for live preview of code. This allows for any changes made to HTML/CSS/JS/etc to show up instantly within the browser reducing the feedback loop to nearly seconds.\n\n### Other Optional, Cool Plugins\n\n* _gulp-imagemin_ used for minifying images and optimizing them so that each image is the smallest it can be without sacrificing noticeable quality. Since images typically are the heaviest lifting on a project, this is a favorite.\n* _gulp-clean_ used for cleaning our build folder with a simple `gulp clean` command so that the folder doesn't contain stagnant, unused files. Great item to run every once and then or loop into your regular build process.\n* _gulp-rename_ used for renaming files after running a task on them. This is optional since the original filename might be all that is needed for certain projects.\n* _gulp-sequence_ used for running multiple tasks in a sequence rather than asynchronously. Gulp 4.0 will [support this out of the box](https://fettblog.eu/gulp-4-parallel-and-series/) with `.series` & `.parallel` functions.\n\n### Using Gulp\n\nOnce we have the plugins we need, we can move into the actual automation of the tasks. The pattern I like to follow is to make individual tasks each with their own name then rolling all of them into one general `gulp build` command. For example, here is a few tasks to process the SASS, bundle JS, and launch live preview.\n\n```javascript\n// Process ./source/assets/css/main.scss to ./build/assets/css/styles.css\ngulp.task('processSass', function() {\n  return gulp.src('source/assets/css/main.scss')\n             .pipe(sourcemaps.init())\n             .pipe(sass())\n             .pipe(sourcemaps.write())\n             .pipe(rename('styles.css'))  // optional renaming\n             .pipe(gulp.dest('build/assets/css/'))\n             .pipe(browserSync.reload({stream: true}));\n});\n\n// Process ./source/assets/js/* to ./build/assets/js/bundle.js\ngulp.task('concatJS', function() {\n  return gulp.src('source/assets/js/*.js')\n             .pipe(sourcemaps.init())\n             .pipe(concat('scripts.js'))\n             .pipe(sourcemaps.write())\n             .pipe(gulp.dest('build/assets/js'))\n             .pipe(browserSync.reload({stream: true}));\n});\n\n// Load browserSync to create local server & hot reload\ngulp.task('browserSync', function() {\n  browserSync.init({\n    server: {\n      baseDir: 'build'\n    },\n  });\n});\n```\n\nIf you've never used Gulp before, don't let those lines scare you away from it. They are using fundamental Javascript patterns of anonymous functions, objects, and chaining. The techniques & code are outlined incredibly in the docs for more clarity.\n\nNext, I like to take each of these tasks and combine them into a single command which will watch our files & run the tasks when it detects any changes. That looks like this:\n\n```javascript\n// Assemble preprocessor, bundle js, and live preview to create dev environment\ngulp.task('develop', ['processSass', 'concatJS', ['browserSync']], function() {\n  gulp.watch('source/assets/css/**/*.scss', ['processSass']);\n  gulp.watch('source/assets/js/*.js', ['concatJS']);\n});\n```\n\nHere, we provide the task `develop` with the two previously created tasks `processSass` & `concatJS` which tells the task to run these before running anything inside of the task itself - the `.watch` items in this case. Once the initial tasks are run, `.watch` functions keep an eye on the folders where the CSS & JS files are located and will rerun the `processSass` & `concatJS` tasks if there are any changes detected. The processed and/or bundled code will then be injected into our browser thanks to the task `browserSync` ([more about BrowserSync](https://www.browsersync.io/)) which was also included. Pretty cool!\n\n### Conclusion\n\nArmed with these plugins, specifically the starter kit list, we can do all the 'magic' done by static-site generators and further customize the tasks for our specific project. It is fun to work with Gulp and can be motivating work knowing that each task is automating work usually done manually over and over. Also, once you have an established setup, many of the tasks can be saved and reused with slight, if any, modification to provide a jumping off point for projects.\n",
        "contentDigest": "50d2c5b951e8becf86c757633d90c8fc",
        "type": "MarkdownRemark",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "Preprocessing, Bundling, and Live Preview with Gulp",
        "layout": "post",
        "author": "Steve Frost",
        "date": "2017-07-03T03:30:00.000Z",
        "categories": "blog",
        "tags": "sass css javascript gulp environment",
        "description": "A common phenomenon in the community is that we regularly build upon abstractions that have been established without fully understanding what they are or how to build them ourselves. On one hand, if we dug down into every abstraction to the individual pieces that make it work, we'd probably never get any work done. On the other hand, I believe it's important to have at least a general understanding of what is going on under the hood so if there is an issue, I can fix it. In the intersection between 'no idea how it works' and static-site generators is the development environment setup by these generators.",
        "comments": true,
        "path": "/articles/preprocessing-bundling-and-live-preview-with-gulp",
        "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/preprocessing-bundling-and-live-preview-with-gulp.md absPath of file"
      },
      "fileAbsolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/preprocessing-bundling-and-live-preview-with-gulp.md"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/long-days-journey-into-web-development.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/long-days-journey-into-web-development.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/long-days-journey-into-web-development.md absPath of file",
      "internal": {
        "content": "---\nlayout: post\ntitle: \"Long Day’s Journey Into Web Development\"\nauthor: Steve Frost\ndate: 2016-05-01 14:00:00 -04:00\ncategories: blog\ntags: flatiron-school learning-to-code\ndescription: \"As an opening post to this blog, I discuss starting a coding school... or the procrastination of starting.\"\ncomments: true\npath: \"/articles/long-days-journey-into-web-development\"\n---\n\n_(Day 1)_\n\nAfter months (er, maybe years) of lurking, delaying, and excuses, today I began my trek toward becoming a full stack developer. As with everything, I exhausted all other options, free and paid, to only come full circle back to Flatiron School’s Learn.co program.\n\nReasons I picked Flatiron’s School’s Learn.co program\n\n* Flexible. Since I am working a full time job while working at this, it was important to find a program that was flexible and I could fit into my current schedule. I didn’t want to interrupt any work projects/tasks and have chosen to shelf some hobbies to make more time. The course totes 600-800 hours of lectures, labs, online quizzes, and more.\n* Thorough/Quality. If I am going to put down most of my social life for 4-10 months then I want to leave the endeavor knowing as much as possible and the highest quality information as possible. After looking at 10-15 different options, Flatiron was the best option here.\n* Help from real people. Quite a few schools have this now but Flatiron really benefits from the “try it before you buy it” mantra. You’re able to get in there and take the 30-hour Intro to Ruby class and see how the helpful the community is when you have a question or want to work through a problem. There are also instructors, live and recorded lectures, on-campus visitation, study groups, and meetups depending on where you live.\n\nReasons I didn’t start on my first day until 2pm\n\n* Pens. I had to have the right color pens. Black for normal notes, orange for vocabulary, and green for code. I’m not crazy.\nNotebooks. Again, not crazy. I went back and forth on having either all black covered notebooks & putting stickers on to delineate between HTML, CSS, JS, Ruby, and other languages or have colored covers for each language. I settled on buying both. After careful thought, and more procrastination er preparing, I went with the black covers & stickers option.\n\nThe course starts with some basic git, GitHub, HTML, and CSS. Since I’ve made several sites and do work with some form of each in my day job, the first day has been not too stressful. Even after years of using HTML/CSS, there were some lessons that taught me the naming conventions for CSS which I’ve just always made up. (“yeah, that’s the watchamacallit!”)\n\nReflecting back on my first day on this long, exciting path makes me hopeful and happy. If I’ve learned something new about languages I’ve used for 10+ years in the very first 6 hours of classwork, then there are heaps of knowledge waiting for me. The only person who can make it happen is me and the time to do it is now.\n",
        "contentDigest": "36359f449beab5d888897eb6ad40b52d",
        "type": "MarkdownRemark",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "Long Day’s Journey Into Web Development",
        "layout": "post",
        "author": "Steve Frost",
        "date": "2016-05-01T18:00:00.000Z",
        "categories": "blog",
        "tags": "flatiron-school learning-to-code",
        "description": "As an opening post to this blog, I discuss starting a coding school... or the procrastination of starting.",
        "comments": true,
        "path": "/articles/long-days-journey-into-web-development",
        "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/long-days-journey-into-web-development.md absPath of file"
      },
      "fileAbsolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/long-days-journey-into-web-development.md"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/questioning-the-quirks-of-php.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/questioning-the-quirks-of-php.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/questioning-the-quirks-of-php.md absPath of file",
      "internal": {
        "content": "---\nlayout: post\ntitle: \"Questioning the Quirks of PHP\"\nauthor: Steve Frost\ndate: 2017-06-04 20:45:00 -04:00\ncategories: blog\ntags: php\ndescription: \"Typically, you'll find my desktop stacked with windows about Javascript & static-site generators, two of my loves, but lately I've been spending time getting to know PHP better. To this point, most of my PHP knowledge comes from tinkering with the PHP templates of posts, pages, etc within WordPress. To become more familiar with the language, I've started primarily using Laracasts which has some advantageous tutorials done by Jeffrey Jordan Way.\"\ncomments: true\npath: \"/articles/questioning-the-quirks-of-php\"\n---\n\n![weird-picture-with-zebras-and-antelope](/img/blogs/quirksofphp1.jpg)\n\nTypically, you'll find my desktop stacked with windows about Javascript & static-site generators, two of my loves, but lately I've been spending time getting to know PHP better. To this point, most of my PHP knowledge comes from tinkering with the PHP templates of posts, pages, etc within WordPress. To become more familiar with the language, I've started primarily using [Laracasts](https://laracasts.com) which has some [advantageous tutorials](https://laracasts.com/series/php-for-beginners) done by [Jeffrey Jordan Way](https://www.quora.com/Why-is-Jeffrey-Jordan-Way-such-an-awesome-kid).\n\nResources aside, here are some quirks that I've found in my ongoing deep-dive into PHP. To make this list, the behavior has to be some level of strange, mysterious, and other-worldly with at least of few [Stack Overflow](https://stackoverflow.com/documentation/php/topics) questions starting with the words, why on earth.\n\n### Omit Closing Tags on Pure PHP Files\nEarly on in PHP fundamentals it's taught that if a PHP file has only PHP in it, vs PHP & HTML, then the closing tag (`?>`) is optional. In an attempt to be buttoned up, my inclination was to include them unless there was rationale behind the practice. [SitePoint champions an explanation](https://www.sitepoint.com/should-you-close-your-php-code-tags/) and includes a couple reasons.\n\n![php-closing-tags-omitted](/img/blogs/quirksofphp2.jpg)\n\n1. The closing tag is not needed to run the file. Since it's not necessary, and keeping code [DRY](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself) is [one of the key software principles](https://code.tutsplus.com/tutorials/3-key-software-principles-you-must-understand--net-25161), the tags should be omitted.\n\n2. It can cause conflicts at run time. If the PHP closing tag is included and there is any whitespace or new line after it, then there will be an issue when importing that code in other files using `require`. Since PHP will read until [EOF](https://stackoverflow.com/questions/2405818/does-eof-actually-exist), or end of file, then it will notice the whitespace and load it as part of the file. This is most notably a problem when trying to edit headers with PHP as any extra character after the closing tag will be sent to the page as content. Once the page receives content, the headers cannot be modified and instead will throw an error. Worse yet, if the production server has errors turned off, there will be a silent fail of the entire page. \n\n### More to Come\n\nSince I'll be neck-deep in PHP continuously, this list will grow each week. That is unless PHP has a limited amount of quirks and if it's initial resemblance to Javascript is any kind of indicator, I'll have reams to discover.\n",
        "contentDigest": "3b4dbecaa2e0b2bd7eeaf3b8892d7ee0",
        "type": "MarkdownRemark",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "Questioning the Quirks of PHP",
        "layout": "post",
        "author": "Steve Frost",
        "date": "2017-06-05T00:45:00.000Z",
        "categories": "blog",
        "tags": "php",
        "description": "Typically, you'll find my desktop stacked with windows about Javascript & static-site generators, two of my loves, but lately I've been spending time getting to know PHP better. To this point, most of my PHP knowledge comes from tinkering with the PHP templates of posts, pages, etc within WordPress. To become more familiar with the language, I've started primarily using Laracasts which has some advantageous tutorials done by Jeffrey Jordan Way.",
        "comments": true,
        "path": "/articles/questioning-the-quirks-of-php",
        "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/questioning-the-quirks-of-php.md absPath of file"
      },
      "fileAbsolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/questioning-the-quirks-of-php.md"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/plant-nanny-keep-your-plants-happy.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/plant-nanny-keep-your-plants-happy.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/plant-nanny-keep-your-plants-happy.md absPath of file",
      "internal": {
        "content": "---\nlayout: post\ntitle: \"Plant Nanny: Keep Your Plants Happy\"\nauthor: Steve Frost\ndate: 2016-10-07 17:30:00 -04:00\nimage: '/img/blogs/plantnanny1.jpeg'\ncategories: blog\ntags: flatiron-school learning-to-code rails ruby\ndescription: \"An overview of my first Rails app called Plant Nanny\"\ncomments: true\npath: \"/articles/plant-nanny-keep-your-plants-happy\"\n---\n\n*(Day 159)*\n\nToday I reached the end of my 3rd project for Flatiron School. Today I reached the end of my... if I just keep saying it maybe it will be true. That's how I felt for weeks. This project was definitely the most challenging but after a month of work, my Rails app is complete.\n\n![Plant Nanny Homepage](/img/blogs/plantnanny1.jpeg)\n\n[Plant Nanny](https://github.com/steveafrost/plant-nanny) is a web app built completely in Rails that helps with managing indoor plants. It includes a system for measuring difficulty, amount of light, amount of water, and frequency of watering. Combined, they can give a quick overview of if you want to try to grow that particular plant or not. As you buy new plants, you can add them to your profile on Plany Nanny to keep track of them.\n\nInspiration for the app came from my own personal experience with indoor plants. Some like to be completely dry before they get water while some want the complete opposite; some want bright light while others want to be in the dark for every other week. Instead of keeping this information in your head, plants can be added to a profile in PlantNanny and the needs can be tracked there.\n\n![Plant Nanny All Plants Page](/img/blogs/plantnanny2.jpeg)\n\n**Challenges I Faced**\n\n* Should I allow for image upload or use a placeholder image for each plant?* I decided to use a placeholder for the plants because I wasn't aware of how to do an image upload in Rails yet and there were so many other things that were new to me. The placeholder allowed me to focus on the grander scheme of the app and prioritize image uploading for the next release.\n\n* How do I setup the migrations? Do I have enough/too many tables?* I got stuck on this same question when doing my Sinatra project. It helps to talk your schema through with someone and see if they have any questions/suggestions. Once you've done that, move forward with the project. It's important to write code so that you can see how the program will look with your proposed schema then you can add or remove tables later. It's useful to remind yourself that the database *can* change.\n\n**Plans for v2**\n\n* Include a dropdown on Add Plant page to select existing plant (right now it matches the title typed in - too much error probability)\n\n* Add \"today\" to the My Profile page which shows which plants need to be watered, moved, or repotted today. Can even build this out further to alert you via an extension or light mobile app\n\n* Provide an interface for users to add images to plants\n\n* Refactor the new plant form to be dynamic with JS. Show detail fields only if the plant isn't already in the DB.\n",
        "contentDigest": "1d11f45c636100294e6f9bc72386157d",
        "type": "MarkdownRemark",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "Plant Nanny: Keep Your Plants Happy",
        "layout": "post",
        "author": "Steve Frost",
        "date": "2016-10-07T21:30:00.000Z",
        "image": "/img/blogs/plantnanny1.jpeg",
        "categories": "blog",
        "tags": "flatiron-school learning-to-code rails ruby",
        "description": "An overview of my first Rails app called Plant Nanny",
        "comments": true,
        "path": "/articles/plant-nanny-keep-your-plants-happy",
        "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/plant-nanny-keep-your-plants-happy.md absPath of file"
      },
      "fileAbsolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/plant-nanny-keep-your-plants-happy.md"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/protect-yoself-data-privacy-day-2017.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/protect-yoself-data-privacy-day-2017.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/protect-yoself-data-privacy-day-2017.md absPath of file",
      "internal": {
        "content": "---\nlayout: post\ntitle: \"Protect Yoself - Data Privacy Day 2017\"\nauthor: Steve Frost\ndate: 2017-1-29 14:00:00 -04:00\ncategories: blog\ntags: conference privacy\ndescription: \"On Data Privacy Day 2017 (Jan 28th) the emerging meet-up group Make-a-Diff held a conference for journalists, activists, and developers called Protect Yoself.\"\ncomments: true\npath: \"/articles/protect-yoself-data-privacy-day-2017\"\n---\n\n![data-privacy-day-picture-1-crowd](/img/blogs/protectyoself.jpg)\n\nOn [Data Privacy Day 2017](https://blog.mozilla.org/blog/2017/01/26/data-privacy-day/) (Jan 28th) the emerging meet-up group [Make-a-Diff](https://www.meetup.com/make-a-diff/) held a conference for journalists, activists, and developers called Protect Yoself. At only 3 months old, I was pleasantly surprised to hear that they were hosting a $20 ticketed event already and had Microsoft step forward to offer the venue!\n\n### Kickoff\n\nUpon arriving, we chose four out of seven workshops to attend that day with topics as broad as privacy or encryption and as specific as [PGP](https://www.gnupg.org/). After choosing workshops, I joined everyone else in the main room for the opening keynote. As I settled in, I realized the turnout was substantial. In only 3 months, the Make-a-Diff group has built quite a following though it's not hard to see why - they're tremendously [generous, open-minded people](https://www.meetup.com/make-a-diff/members/).\n\nSome fellow students from Flatiron and I attended the meetup with varying intentions, similar to the whole crowd. Split between the crowd were people who were learning about tracking cookies for the first time, several who saw it as a 'must' in light of the current administration, some who were developers that were concerned with the amount of information they had about users, and others who were focused on the technology for their line of work. Privacy seems to be for everyone now and not just the nerd, hacker, or criminal.\n\n![data-privacy-day-picture-2-cameras](/img/blogs/protectyoself2.jpg)\n\n### Privacy and Encryption\n\nThough all the workshops had a common theme, two of the  workshops that I attended were the most tightly knit - privacy & encryption. The privacy workshop was the most ground level, newbie friendly course of the day with highlights about [how/why we're being tracked](http://www.digitaltrends.com/computing/how-do-advertisers-track-you-online-we-found-out/). We reviewed tools from the EFF like [Privacy Badger](https://www.eff.org/privacybadger) and [Panopticlick](https://panopticlick.eff.org/) then went on to install them. We also explored open-source software that could replace our proprietary software through a resource called [Prism Break](https://prism-break.org/en/). Using [open-source software](https://en.wikipedia.org/wiki/Open-source_software) is a movement that has been growing for some time now and is a topic that is out of scope for this post but there is one specific perk as it related to privacy. Since open-source software makes it's code available for anybody to review, as users we don't have to be curious if there is a backdoor (which history shows is [trouble](http://www.infoworld.com/article/2606776/hacking/155947-Biggest-baddest-boldest-software-backdoors-of-all-time.html)) to the software or that something malicious is happening when we use it. This provides an immense benefit to those looking to be private on the internet.\n\n### Security\n\nIn the other two workshops we went over more of a security theme. The first was a technology called PGP which is what Dread Pirate Roberts ([it wasn't Ross Ulbricht](https://www.wired.com/2015/02/ross-ulbricht-didnt-create-silk-roads-dread-pirate-roberts-guy/)) & Edward Snowden both used to verify their identity to reporters. It can be used to encrypt/decrypt messages, files, whole disk drives, or to sign messages. This was my first go at it and it seemed not _entirely_ user-friendly but it is also not very difficult if you have a [comprehensive guide](https://theintercept.com/2014/10/28/smuggling-snowden-secrets/) to get started.\n\nThe last workshop was tailored more toward developers and was hosted by [Stephen Kapp](https://us.linkedin.com/in/skapp) who is the CTO of a threat and vulnerability management company called [Cortex Insight](https://cortexinsight.com/). Stephen shared with us that he had been doing this for over 20 years and had seen all types of attacks on the code that we make as developers. After outlining the top 10 most frequent attacks, Stephen demonstrated the most common, and easiest, type called a [SQL Injection attack](https://motherboard.vice.com/read/the-history-of-sql-injection-the-hack-that-will-never-go-away). These kind of attacks attributed to several big data leaks we've seen in the past decade including Sony's Playstation Network, Dpt of Veteran Affairs, Gawker, Verisign, and AOL. It's incredible, in a scary and intriguing way, that this attack has been around for ages yet continues to be unquestionably effective.\n\n### Privacy & Security for All\n\nRegardless of knowledge level, I believe everyone left the Protect Yoself conference with a fresh piece of knowledge about privacy and encryption. Personally, I learned about [threat modeling](https://www.owasp.org/index.php/Application_Threat_Modeling) and what that means for different people, the [8-day data cleanse](https://myshadow.org/ckeditor_assets/attachments/189/datadetoxkit_optimized_01.pdf), [browser fingerprinting](https://amiunique.org/), [Web of Trust](https://www.linux.com/learn/pgp-web-trust-core-concepts-behind-trusted-communication), and vastly more about topics that were familiar.\n\nThank you to [Make-a-Diff](https://twitter.com/makeadiff_nyc) for putting together this event and for welcoming people of all knowledge/skill/professions. It is important, and has always been important, to be aware of the data we are giving to companies. As one of the all-time best cartoons exclaims, [\"knowledge is power!\"](https://www.youtube.com/watch?v=SjNM4eItNRA)\n",
        "contentDigest": "00404916ce56a3b01240a731636efd4f",
        "type": "MarkdownRemark",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "Protect Yoself - Data Privacy Day 2017",
        "layout": "post",
        "author": "Steve Frost",
        "date": "2017-01-29T18:00:00.000Z",
        "categories": "blog",
        "tags": "conference privacy",
        "description": "On Data Privacy Day 2017 (Jan 28th) the emerging meet-up group Make-a-Diff held a conference for journalists, activists, and developers called Protect Yoself.",
        "comments": true,
        "path": "/articles/protect-yoself-data-privacy-day-2017",
        "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/protect-yoself-data-privacy-day-2017.md absPath of file"
      },
      "fileAbsolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/protect-yoself-data-privacy-day-2017.md"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/quirks-of-display-inline-block.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/quirks-of-display-inline-block.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/quirks-of-display-inline-block.md absPath of file",
      "internal": {
        "content": "---\nlayout: post\ntitle: \"Quirks of 'Display: Inline-Block'\"\nauthor: Steve Frost\ndate: 2017-07-09 21:30:00 -04:00\ncategories: blog\ntags: css\ndescription: \"The display property in CSS comes with several supported values like inline, block, flex, list-item, and the anti-hero, table. The list goes on to include combinations of those such as inline-flex, inline-table, and inline-block. The default value of the display property is set by the browser and typically does the job. Luckily, like many things in web development, we can change the value if we want a HTML element to behave differently. One of the most common values I find myself using is display: inline-block. Most of the time it's a godsend but it does come have a few quirks.\"\ncomments: true\npath: \"/articles/quirks-of-display-inline-block\"\n---\n\n![quirky-octopus](/assets/img/blogs/inlineblock0.jpg)\n\nThe display property in CSS comes with several supported values like inline, block, flex, list-item, and [the anti-hero, table](https://colintoh.com/blog/display-table-anti-hero). The list goes on to include combinations of those such as inline-flex, inline-table, and inline-block. The default value of the display property is [set by the browser](https://github.com/sw4/revert.css) and typically does the job. Luckily, like many things in web development, we can change the value if we want a HTML element to behave differently. One of the most common values I find myself using is display: inline-block. Most of the time it's a godsend but it does come have a few quirks.\n\n### What Exactly is Inline-Block?\nThe `display: inline-block` property & value allows an element to share in both the inline & block behaviors. While the inside of the element will be treated as a block-level element, the element itself is formatted as an inline. For example, take an paragraph element with it's default `block` display value. Block elements take up their entire line and do not sit next to another item. If we were to override that setting with `display: inline` then the paragraphs can ride up and sit right next to each other making the two separate paragraphs appear as one. Here is an example of inline & inline-block. As you can see, the inline element does what I've described while the inline-block appears as a block-level element.\n\n![inline-paragraphs](/assets/img/blogs/inlineblock1.jpg)\n\nWait, so what is the difference between block and inline-block? Well, now that our element has both the traits of an inline element & a block element, we can assign widths – something that's not possible for inline elements. Now that each element has a width, they'll appear next to each other, or inline, if the screen is wide enough to fit both. If the screen is smaller than our set width, each paragraph will assume block-level traits and occupy their own line. Check out what it looks like:\n\n![inline-block-paragraphs](/assets/img/blogs/inlineblock2.gif)\n\n### What's the Catch?\nAt first pass, it looks like we get the best of both worlds - inline & block – with the aptly named, inline-block value. After using it on several projects, I can say that's an accurate assessment but if you're going to use it, it can be helpful to know some of the snags to save headaches & time.\n\n### Whitespace Quirk\nOften when I'm using display-inline, it's to have responsive images. For example, I'll set two images to 50% of the width to achieve a full width side-by-side. If you try this out, you'll notice they appear on separate lines – but why?! Checking the page structure more closely we see there's no margin, padding, or border causing the issue. I'm not sure there's any indicator at all in the source code or Chrome inspector (or similar browser inspector) that shows points out the actual cause. The behavior we see when two images are set to 50% but don't sit next to each other is caused by whitespace in the HTML. Yes, whitespace... in the HTML. If there are image tags on separate lines, or even a space inbetween them in the HTML, then that space will take up visual space on the page.\n\nCode such as this:\n```html\n<style>\n  img {\n    display: inline-block;\n    width: 50%;\n  }\n</style>\n\n<img src=\"http://lorempixel.com/630/420/\">\n<img src=\"http://lorempixel.com/630/420/\">\n```\n\nThis snippet will not appear as expected when viewing the webpage – see below. Notice the images _don't_ take up 100% width together but instead assume block-level behavior with each on it's own line because together they make up more than 100% due to us putting each img element on it's own line (or remember, even a space in-between) in the HTML.\n\n![inline-block-images](/assets/img/blogs/inlineblock3.jpg)\n\nIt's really a quite unique behavior that the browser would read into the spaces you put in the HTML. I can't think of another case where the whitespace in the code is evaluated – if you know of one, I'm interested!\n\nSo how do we get the browser to ignore the whitespace? Well, we can start by taking it out. If you have spaces or line-breaks, remove those. Actually, there is a common task with Gulp and Grunt to remove the whitespace in HTML once in a production setting called [minifying](https://blog.stackpath.com/glossary/minification/). \n\nThis would solve the woes, but what about development or what about if we don't want to minify the code? In that case, there are two options that I'm aware of:\n    1. Give each inline-block element a negative margin-right value of 4px like so: `margin-right: -4px`. This will pull the picture further left to account for the whitespace. While this approach works nicely, it is a cover-up or patch in my opinion which I'm always afraid might snowball into a more troublesome alignment issue later which is why I'm a fan of the second approach.\n    2. Set the parent container of any inline-block element to have `font-size: 0px;`. This is effectively telling the browser that the whitespace it sees in the HTML file for the selected parent container should take up no space visually. If we need our font-size to be a certain size later in the same parent container, for instance on a `<span>` element, then we can set the font-size back to the original setting. Awesome! This is my favorite personal approach.\n\nTrying either of these approaches out will result in our 50% width images taking up 100% of the width together and a wonderful responsive design.\n\n![inline-block-images-fixed](/assets/img/blogs/inlineblock4.jpg)\n\n### Alignment Quirk\n\nBy default, inline-block will align elements based on the bottom edge. Taking a look at an example we can see how that starts to look awkward.\n\n![inline-block-images-aligned-bottom](/assets/img/blogs/inlineblock5.jpg)\n\nIf this isn't the desired behavior, inline-block elements can be changed to align middle, top, or other values using the `vertical-align` property as such: `vertical-align: middle;`. If you'd like the pictures to be the same size on the page regardless of what they look like originally, consider adding an image wrapper that is set to those dimensions and then have the image itself take up 100% of the wrapper. When taking that approach, the image wrapper would be the inline-block element.\n\n```css\n.img-wrapper {\n  display: inline-block;\n  font-size: 0px;\n  height: 420px;\n}\n\nimg {\n  height: 100%; // or auto w/ max-height matching smallest picture to keep proportion\n  width: 50%;\n}\n```\n\n### Support\nGreat news about the support, it's around 98% without any kind of prefixes or adjustments needed. To see the exact support across browsers for any code, a great site to check out is CanIUse – [here](https://caniuse.com/#feat=inline-block) is what they say about inline-block. It is a useful property that I've grown accustomed to utilizing and one that should help us all get to the hopeful day when [CSS Grid](http://jensimmons.com/post/feb-27-2017/learn-css-grid) is fully supported and we no longer have to fake columns & rows in web design. Until then, long live inline-block!\n",
        "contentDigest": "ca02c8fd13be2a6712a55a2cbdefb1ab",
        "type": "MarkdownRemark",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "Quirks of 'Display: Inline-Block'",
        "layout": "post",
        "author": "Steve Frost",
        "date": "2017-07-10T01:30:00.000Z",
        "categories": "blog",
        "tags": "css",
        "description": "The display property in CSS comes with several supported values like inline, block, flex, list-item, and the anti-hero, table. The list goes on to include combinations of those such as inline-flex, inline-table, and inline-block. The default value of the display property is set by the browser and typically does the job. Luckily, like many things in web development, we can change the value if we want a HTML element to behave differently. One of the most common values I find myself using is display: inline-block. Most of the time it's a godsend but it does come have a few quirks.",
        "comments": true,
        "path": "/articles/quirks-of-display-inline-block",
        "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/quirks-of-display-inline-block.md absPath of file"
      },
      "fileAbsolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/quirks-of-display-inline-block.md"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/responsive-css-with-rems-and-ems.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/responsive-css-with-rems-and-ems.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/responsive-css-with-rems-and-ems.md absPath of file",
      "internal": {
        "content": "---\nlayout: post\ntitle: \"Responsive CSS with REMs & EMs\"\nauthor: Steve Frost\ndate: 2017-06-25 23:30:00 -04:00\ncategories: blog\ntags: html css responsive\ndescription: \"Amongst several extremely useful features, CSS3 brought us REMs & EMs - two responsive-minded measurement units. In my experience, these units tend to be more predictable and adaptable than the usual style of pixels and percents though those are still good for things such as border-widths and the like. Today I'll outline exactly what REMs & EMs are, their journey to cross-browser support, and the benefits in using them.\"\ncomments: true\npath: \"/articles/responsive-css-with-rems-and-ems\"\n---\n\nAmongst several extremely useful features, CSS3 brought us REMs & EMs - two responsive-minded measurement units. In my experience, these units tend to be more predictable and adaptable than the usual style of pixels and percents though those are still good for things such as border-widths and the like. Today I'll outline exactly what REMs & EMs are, their journey to cross-browser support, and the benefits in using them.\n\n### What are REMs & EMs\nIn this instance, the dictionary definition does a lot of good to know and rounds out a ground floor to come in on.\n\n* REM: stands for the text size of the root element on the webpage.\n\n* EM: historically, em was a measurement based on the width of the capital M letter. In modern web design, it is more commonly equated to roughly 16 pixels.\n\nNow, in layman's terms: a REM is based on whatever root text size you're using in your HTML selector. On the other hand, an EM inherits from what comes before it. Consider the following:\n\n```html\nhtml { font-size: 100%;} // FYI: in most browsers 100% = 16px;\nbody { font-size: 20px;}\n\n.first { font-size: 1rem; }\n.second { font-size: 1em; }\n\n<html>\n  <body>\n    <div class=\"first\">\n      <p>I'm using REMs here which rely on the root element</p> \n    </div>\n    <div class=\"second\">\n      <p>I'm using EMs here which inherit from the parent element\n    </div>\n  </body>\n</html>\n```\n\nIn my `<div class=\"first\">`, my font size will be 16px because REMs are based on the root element, or the 100% font size within my HTML. While it's only on letter difference, the EMs are doing their own thing. Over in the `<div class=\"second\">`, the font size would be 20px because it inherits from it's parent, or `<body>` in this case where the font size is set to 20px.\n\n### How Did REMs & EMs Get Here?\n\nCSS3 had a long, tattered road to walk/crawl before any spec was fully published. From what [I've read](https://1stwebdesigner.com/css3-in-a-nutshell/), it was about 12 years in-between CSS2 & CSS3 and the implementation of CSS3 wasn't even the full spec but rather the code was modularized and published as single purpose entities. The latest module to come out was in 2012 and is something we hold dearly – media queries!\n\n### Benefits of REMs & EMs\n\nThe main benefit I've noticed of basing a site off REMs & EMs is ease of responsiveness. If the content, structure, etc is based off the root font-size then the only media queries needed are on the HTML font-size. When that is scaled up, the entire page scales up. To have this work, it's best to have the containers based on REMs and the font based on EMs. That is because we want the containers to scale up relative to the HTML root font size and the contents inside of them to be relative to their containers.\n\nIf this is how you do decide to use REMs & EMs, there is one catch that I've noticed. When scaling, scale *up to* 100%. That means your HTML font-size on mobile should be 80% or so and then step it up 5% - 10% at each breakpoint. If this 80% font is too small in your opinion, then use a `:root` selector to increase the font in pixels.\n\n```css\n:root {\n  font-size: 20px;  // most browsers are 16px by default -->\n}\n\nhtml {\n  font-size: 80%;  // then scale up as the screen grows using media queries\n}\n```\n\nThe reason we want to scale up to 100% max is because if there are images on the page that rely on that root size, once it goes beyond 100% they'll become distorted.\n\nHopefully that quick outline of how I've learned to create responsive designs using purely REMs & EMs, and one percent rule, will be helpful in your next project. If you find any other tricks when trying it out, leave them in the comments below!\n",
        "contentDigest": "3c436800a7faca9e1fe76e6c9c237da2",
        "type": "MarkdownRemark",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "Responsive CSS with REMs & EMs",
        "layout": "post",
        "author": "Steve Frost",
        "date": "2017-06-26T03:30:00.000Z",
        "categories": "blog",
        "tags": "html css responsive",
        "description": "Amongst several extremely useful features, CSS3 brought us REMs & EMs - two responsive-minded measurement units. In my experience, these units tend to be more predictable and adaptable than the usual style of pixels and percents though those are still good for things such as border-widths and the like. Today I'll outline exactly what REMs & EMs are, their journey to cross-browser support, and the benefits in using them.",
        "comments": true,
        "path": "/articles/responsive-css-with-rems-and-ems",
        "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/responsive-css-with-rems-and-ems.md absPath of file"
      },
      "fileAbsolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/responsive-css-with-rems-and-ems.md"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/regex-lookahead-and-lookbehind.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/regex-lookahead-and-lookbehind.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/regex-lookahead-and-lookbehind.md absPath of file",
      "internal": {
        "content": "---\nlayout: post\ntitle: \"Applying Regex Lookarounds\"\nauthor: Steve Frost\ndate: 2017-05-06 16:00:00 -04:00\ncategories: blog\ntags: regex patterns\ndescription: \"Regular Expressions, or regex, is a powerful tool available across several languages to help match patterns. As one memorable contrast explains, regex is to programming as 'okay' is to spoken language – it's recognized everywhere! It is this universal usability as well as the the common task of having to compare data against a point or pattern that makes regex so prevalent in the development community.\"\ncomments: true\npath: \"/articles/regex-lookahead-and-lookbehind\"\n---\n\n![regex-lookarounds-picture](/img/blogs/regexlookarounds1.jpg)\n\nRegular Expressions, or regex, is a powerful tool available across several languages to help match patterns. As one [memorable contrast](http://blog.teamtreehouse.com/regular-expressions-10-languages) explains, regex is to programming as 'okay' is to spoken language – it's recognized everywhere! It is this universal usability as well as the the common task of having to compare data against a point or pattern that makes regex so prevalent in the development community.\n\nSince it is used so often, there is plenty of documentation on it though that doesn't stop the groans from circulating through the room each time regex is mentioned. Personally, I groan because regex teases the head around a problem in a way like no other tool. Also, each time I use it, I have to refresh on exactly how the syntax works since it is unique to regex. For a syntax refresher, I usually pop over to [RegExr](http://regexr.com) where they have a cheat sheet and an environment where example data can be manipulated and tested against with custom regex statements.\n\nInevitably, after brushing up with the cheat-sheet, I found a novel regex approach that I've never seen before. Most recently, I was working with [pangrams](http://www.fun-with-words.com/pang_example.html), sentences that use each letter of the alphabet once, and came across regex's lookaround behaviors which fit the bill perfectly, as regex usually does. Let's take a look at what the syntax looks like for these behaviors.\n\n### Lookarounds\n\n```javascript\n# Lookaheads examine what immediately follows the current position\nPositive Lookahead: (?=abc)\nNegative Lookahead: (?!abc)\n\n# Lookbehinds examine what immediately precedes the current position\nPositive Lookbehind: (?<=abc)\nNegative Lookbehind: (?<!abc)\n```\n\n### In Practice\n\nThe lookarounds in the above example would help us locate text immediately following or preceding (depending on which we use) a designated string we provide. Let's use a lookahead to return true if hello if it appears before world but false if followed by any other word.\n\n```javascript\nstring1 = 'hello world'\nstring2 = 'hello steve'\n\n/(hello)(?=\\sworld)/.test(string1) #=> true\n/(hello)(?=\\sworld)/.test(string2) #=> false\n```\n\nOur regex here, `/(hello)(?=\\sworld)/` is explicitly testing each string to see if there is the word, 'hello' immediately followed (`?=` - positive lookahead) by a space (`\\s`) then the word world. As cool as it is, let's take this newly acquired knowledge for a spin on a real-world example.\n\n### Real-World Example\n\nTime for a more realistic example – password validation! It is typical to see requirements for a password so how can we check against those? Our fancy new regex lookaheads should help.\n\n* Must contain 8 letters\n* Password ends in number\n* No special characters allowed\n\n```javascript\nfunction isValidPassword(password) {\n  let hasEightLettersThenNum = /\\w{8}(?=[1-9])/\n  let hasSpecialChars = /[^\\w]/g  #=> g for global search\n\n  if (hasEightLettersThenNum.test(password) === true) &&\n    (hasSpecialChars.test(password) === false) {\n    console.log(\"Valid Password\")\n  } else {\n    console.log(\"Invalid Password, please see requirements above\")\n  }\n}\n```\n\nAs you can see, we were able to use the positive lookahead `(?=[1-9])` to determine that our password had eight letters followed by a number. This is a fairly contrived example and there are easy ways to check for trailing digits without using a lookahead though this is the general idea & an applicable use.\n\n### Conclusion\n\nExpanding on & exercising regex knowledge leads to greater appreciation. Personally, I've become more comfortable/daring after a few real-world implementations and I've started to recognize that the uses are substantial, varied, and powerful. If you have any go-to uses for regex lookaround, leave them in the comments!\n",
        "contentDigest": "d4625d681e4c4f4013da8656e978c997",
        "type": "MarkdownRemark",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "Applying Regex Lookarounds",
        "layout": "post",
        "author": "Steve Frost",
        "date": "2017-05-06T20:00:00.000Z",
        "categories": "blog",
        "tags": "regex patterns",
        "description": "Regular Expressions, or regex, is a powerful tool available across several languages to help match patterns. As one memorable contrast explains, regex is to programming as 'okay' is to spoken language – it's recognized everywhere! It is this universal usability as well as the the common task of having to compare data against a point or pattern that makes regex so prevalent in the development community.",
        "comments": true,
        "path": "/articles/regex-lookahead-and-lookbehind",
        "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/regex-lookahead-and-lookbehind.md absPath of file"
      },
      "fileAbsolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/regex-lookahead-and-lookbehind.md"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/staying-focused-staying-sharp.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/staying-focused-staying-sharp.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/staying-focused-staying-sharp.md absPath of file",
      "internal": {
        "content": "---\nlayout: post\ntitle: \"Staying Focused, Staying Sharp\"\nauthor: Steve Frost\ndate: 2017-02-04 17:30:00 -04:00\ncategories: blog\ntags: reflection\ndescription: \"After graduating from Flatiron School last week, I found myself lost as to what to do next. Once all your coding time is your own and not belonging to tuition, homework, or the next assessment, what do you do?\"\ncomments: true\npath: \"/articles/staying-focused-staying-sharp\"\n---\n\n![artist-staying-focused](/img/blogs/stayingfocused1.jpg)\nAfter graduating from Flatiron School last week, I found myself lost as to what to do next. Once your coding time is your own and not belonging to tuition, homework, or the next assessment, what do you do?\n\n### Celebrate Yourself\nFirst, we celebrate. My fiancé and I went out to a dinner at [Pauly Gee's](http://pauliegee.com/) where they are serving some of the best wood-fired pies in Brooklyn. The next day I took an official day off of coding thinking I earned a break after eight months of intensive studying, listening to podcasts, etc, etc. I encourage everyone to step away from the computer every once in awhile as time away can be just as valuable as time spent in front of it.\n\n### Then Get Back to Your Craft\nFollowing the celebration and the break, I refocused. Since I've been working with mostly front-end for the past two months, I decided to look into a backend framework and settled on [node.js](https://nodejs.org/en/). I'm not too far into learning it but so far it is obviously *very* close to the metal. I like that saying. Node shares many similarities to browser Javascript so a substantial amount that was learned in the curriculum transfers over. One of the key differences is that there is no document or window in Node. Instead, since Node is running on the computer and not in the browser, there is access to environment variables, platform info, processes, versioning, architecture, uptime, memoryUsage, and a whole collection of data about the machine it is running on.\n\n![helping-others-picture](/img/blogs/stayingfocused2.jpg)\n\n### And Help Others\nAlongside learning node, I've also signed up to be a mentor for a student who is go through NYU's [Re:Coded program](http://www.re-coded.com/). In the next couple days I'll be paired up with a student located in Iraq who is learning the Flatiron curriculum. Out of everything going on right now, I think I am most excited for this. For those who know me, it comes as no surprise, for those who don't, I *love* looking at other people's code and problem solving in groups. I can't wait.\n\nI'm grateful for the opportunity to give back to the developer community after many in it helped me along. However, it's made me question what I know of the basics and to dive into [PluralSight](https://www.pluralsight.com) again. The present imposter syndrome has me considering just how much frameworks obscure the basics of the language from the developer. I felt really comfortable with the innards & functionality of Angular and think that it sheltered me from the vanilla JS going on behind-the-scenes. I'm working to fill in this knowledge gap - whether it exists or not remains to be seen.\n",
        "contentDigest": "e8ff4354b6ffbad27accfe001af25237",
        "type": "MarkdownRemark",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "Staying Focused, Staying Sharp",
        "layout": "post",
        "author": "Steve Frost",
        "date": "2017-02-04T21:30:00.000Z",
        "categories": "blog",
        "tags": "reflection",
        "description": "After graduating from Flatiron School last week, I found myself lost as to what to do next. Once all your coding time is your own and not belonging to tuition, homework, or the next assessment, what do you do?",
        "comments": true,
        "path": "/articles/staying-focused-staying-sharp",
        "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/staying-focused-staying-sharp.md absPath of file"
      },
      "fileAbsolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/staying-focused-staying-sharp.md"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/setting-up-a-local-wordpress-environment.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/setting-up-a-local-wordpress-environment.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/setting-up-a-local-wordpress-environment.md absPath of file",
      "internal": {
        "content": "---\nlayout: post\ntitle: \"Setting Up a Local WordPress Environment\"\nauthor: Steve Frost\ndate: 2017-05-14 19:00:00 -04:00\ncategories: blog\ntags: wordpress lamp apache mysql php\ndescription: \"Creating a local environment, or more often fixing one, is an essential part of being a developer/engineer. Since the code lives on your computer, testing and deploying code is almost instant reducing the development feedback loop. There are several other benefits that make it worth the effort of setup such as the code isolation, minimized chance of breaking live products, ability to work offline, flexibility to use different tools than the production server supports, and root access, if needed.\"\ncomments: true\npath: \"/articles/setting-up-a-local-wordpress-environment\"\n---\n\n![success-messsage-wordpress](/img/blogs/localwordpress0.jpg)\n\nCreating a local environment, or more often fixing one, is an essential part of being a developer/engineer. Since the code lives on your computer, testing and deploying code is almost instant reducing the development feedback loop. There are several other benefits that make it worth the effort of setup such as the code isolation, minimized chance of breaking live products, ability to work offline, flexibility to use different tools than the production server supports, and root access, if needed.\n\n### Installing the LAMP Stack\n\nBefore installing the actual WordPress files, we need to setup the environment where it will run – specifically, an environment composed of the [LAMP stack](https://stackoverflow.com/questions/10060285/what-is-a-lamp-stack) aka **L**inux **A**pache, **M**ySQL, **P**HP/**P**erl/**P**ython. When setting up this stack, there are two choices: manual or packaged. The [manual process](https://lukearmstrong.github.io/2016/12/setup-apache-mysql-php-homebrew-macos-sierra/) is best done via [Homebrew on Mac](https://steveafrost.com/using-homebrew-the-best-package-manager-for-macos/) or by installing each individual piece on Linux/Windows. There are a few options if you'd like to go the packaged route including [MAMP](https://www.mamp.info/en/), [WAMP](http://www.wampserver.com/en/), and [XAMP](https://www.apachefriends.org/index.html). Immediately you'll notice that each acronym is similar with the first letter representing the operating system it is made for: **M**AMP for Mac though there is a Windows version of it now, **W**AMP for Windows, and **X**AMP for cross-platform. Since I'm on Mac, I'll be using MAMP. I've also grown to prefer it over XAMP because of it's simplicity and low CPU usage. [Here is a great MAMP installation tutorial](https://youtu.be/I6sTPp779mA) if that's' the package you go with.\n\nOnce you have the stack installed, fire up the Apache & MySQL servers at which point you're ready to move onto installing WordPress.\n\n### Installing WordPress\n\nTo start with installing WordPress, [visit the website](https://wordpress.org/download/) and download the most recent source code zip. Unzip the files and put them in the document root that your configuration is looking in – by default, MAMP looks inside the `htdocs` folder within it's own application folder. This preference can be updated by changing the `Document Root` in `Preference -> Web Server` within MAMP.\n\n1. Once the files are in the correct folder, visit `localhost:8888` on your browser and you should see the file tree displayed. Go ahead and click on the WordPress item within the browser to start the WordPress setup. \n2. After setting the language, the next step is to enter details about the database but first we have to create the database! Jump back to MAMP and create a database by opening the WebStart page (the middle button on the app) and selecting PHPMyAdmin from the top bar. If it is grayed out, be sure you're using the standard version of PHP within MAMP. As of this blog, it is the 7.0.5 option. Within PHPMyAdmin, click Databases then fill in a name by Create Database and click Create.\n![create-database-in-phpmyadmin](/img/blogs/localwordpress1.jpg)\n3. Return back to the WordPress setup and enter the information you created in the previous step. For the username & password, use the MySQL login that you've setup in your LAMP setup – mine is `U: root`, `P: password`. It is important to note that these are only for local development. If you were to push this to a live, production website then it would be critical to have a secure username and password to avoid unauthorized users from guessing these credentials. Updating the table prefix from `wp` is also a recommended practice as hackers who may be trying to exploit WordPress databases will be searching for any databases prefixed with `wp` – I've updated mine to `lw` for local-wordpress. Verify these settings and click Submit.\n![create-database-in-wordpress](/img/blogs/localwordpress2.jpg)\n4. If everything has been setup correctly, you should receive a success message that says, \"All set Sparky.\"\n![success-messsage-wordpress](/img/blogs/localwordpress3.jpg)\n5. On the next screen, WordPress asks for a site title, username & password, and a few other basic settings as a part of it's \"famous five-minute setup.\" These settings are for the WordPress CMS itself and will be used to login to the dashboard.\n![wordpress-settings-setup](/img/blogs/localwordpress4.jpg)\n6. Now we can navigate back to PHPMyAdmin and see that the database has been setup with the options we've given to it. This is a great time to make sure the information is correct and fix it if needed.\n![completed-database-setup](/img/blogs/localwordpress5.jpg)\n\nThat's it! Using the database login we can edit the database and using the CMS login we can enter the WordPress dashboard through `siteurl.com/wp-admin`. If you load the CMS you'll see the default WordPress CMS ready for the editing, testing, tinkering, and experimenting.\n\n![success-messsage-wordpress](/img/blogs/localwordpress6.jpg)\n\n### Conclusion\n\nNow that we have a local setup we're free to edit it however we like to try out new plugins, themes, make it match our custom production environment, or anything the mind could dream up. It might seem like a considerable amount of labor up-front but it will save countless hours on the tail-end by giving us a safe space to efficiently & quickly try out fresh code without worry of breaking a live product.\n",
        "contentDigest": "25c6717d10f83e773300d3b52fb6b9a1",
        "type": "MarkdownRemark",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "Setting Up a Local WordPress Environment",
        "layout": "post",
        "author": "Steve Frost",
        "date": "2017-05-14T23:00:00.000Z",
        "categories": "blog",
        "tags": "wordpress lamp apache mysql php",
        "description": "Creating a local environment, or more often fixing one, is an essential part of being a developer/engineer. Since the code lives on your computer, testing and deploying code is almost instant reducing the development feedback loop. There are several other benefits that make it worth the effort of setup such as the code isolation, minimized chance of breaking live products, ability to work offline, flexibility to use different tools than the production server supports, and root access, if needed.",
        "comments": true,
        "path": "/articles/setting-up-a-local-wordpress-environment",
        "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/setting-up-a-local-wordpress-environment.md absPath of file"
      },
      "fileAbsolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/setting-up-a-local-wordpress-environment.md"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/templating-with-solely-json.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/templating-with-solely-json.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/templating-with-solely-json.md absPath of file",
      "internal": {
        "content": "---\nlayout: post\ntitle: \"Templating with Solely JSON\"\nauthor: Steve Frost\ndate: 2017-07-16 23:00:00 -04:00\ncategories: blog\ntags: javascript mustachejs json templating\ndescription: \"Over the weekend, I created a simple messaging act appropriately called simple-messaging. After about 6-8 hours of work, I was able to create a functional prototype that allows for users to send dynamically generated messages to a list of users. Although there are established templating languages like mustache.js, I decided to use solely JSON & JS to create the templates needed for the messages and was really impressed with how robust, yet simple, it turned out in the end.\"\ncomments: true\npath: \"/articles/templating-with-solely-json\"\n---\n\n![simple-messaging-screenshot](/assets/img/blogs/templatingjson0.jpg)\n\nOver the weekend, I created a simple messaging act appropriately called [simple-messaging](https://github.com/steveafrost/simple-messaging). After about 6-8 hours of work, I was able to create a functional prototype that allows for users to send dynamically generated messages to a list of users. Although there are established templating languages like mustache.js, I decided to use solely JSON & JS to create the templates needed for the messages and was really impressed with how robust, yet simple, it turned out in the end.\n\n### Objective\nCreate a functional, stable bite-sized web app that covers several criteria:\n\n1. Loads templates, company list, and current hotel guests from local JSON files.\n2. Support placeholders/variables within the template that can be replaced with values from the company & guest data.\n3. Allow the user to enter a custom message.\n4. Develop solution to have a greeting variable that changes based on the time of day, specifically: good morning, good afternoon, and good evening.\n5. Generate a final message output after populating placeholders in the message template with the correct values from the other data collections.\n\n### Using Placeholders/Variables in JSON\nAlthough there are plenty of templating languages, the challenge on this product was to do it without those & rely solely on JSON. To do that, the message within the template had to have some kind of placeholder, similar to how mustache.js has {{ thisIsAVariable }} to denote where data will be replaced.\n\n```javascript\n    \"id\": 2,\n    \"name\": \"Restaurant Recommendations\",\n    \"message\": \"If you're looking for somewhere to enjoy a delicious meal, try out #company restaurant right downstairs in the lobby.\",\n    \"parameters\": {\n      \"#company\": {\n        \"type\": \"string\"\n      }\n    }\n```\n\nThe important piece here is that we've included `#company` within both the message & the parameters. By including a parameters object, it allows us to loop over all placeholders in a simple, lean way later on without having to use RegEx to search the string for all occurrences of our placeholder delineators. We can also include a type for each parameter to validate proper input once the form is submitted. The current code base includes these types though checking the input data against them is not currently live – great addition for version two!\n\n### Handling Parameters in Javascript\nNow that we have a template with placeholders, or just one placeholder in the example here, we can look at loading the template message. Once we do grab the template message, we'll want to loop over the parameters and fill them in with the data retrieved from our company.json and guests.json files. Let's parse!\n\n```javascript\n      for(var parameter in template.parameters) {\n        var trimmedParam = parameter.substring(1);\n\n        if(guest[trimmedParam]) {\n          template.message = template.message.replace(parameter, guest[trimmedParam]);\n        } else if (company[trimmedParam]) {\n          template.message = template.message.replace(parameter, company[trimmedParam]);\n        } else {\n          template.message = template.message.replace(parameter, greeting);\n        }\n      }\n\n      this.render(template.message);\n```\n\nThis code is a prime candidate for refactoring, but let's ignore that for a second. First, we grab the template that was selected & look at it's parameters. For each parameter, we trim off the `#` symbol so that it is a 1:1 match with the properties in our other data objects. \n\nNext, we see if it is located in the guest or company object and if it isn't, we know it is our custom greeting variable. If the parameter does match a property in the guest or company objects, then that parameter is replaced with the actual value from the data & the template.message is saved each time because `.replace` will not mutate the string in place. \n\nFinally, after our template.message has had all it's parameters looped over & replaced with data from either guests.json or company.json, we send along that string to the render method which places it on the page.\n\n### Conclusion\nAs easy as mustache.js and other templating libraries/engines are, I kind of fell into liking this pure JSON approach. It is obviously not as efficient and although I haven't run into any issues, I imagine it is more prone to bugs. Nevertheless, it makes for a nice, quick way to prototype an idea or to keep a project lean when not all the capabilities of a templating library/engine will be utilized.\n",
        "contentDigest": "61254b43cca2328cc0dd561110805326",
        "type": "MarkdownRemark",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "Templating with Solely JSON",
        "layout": "post",
        "author": "Steve Frost",
        "date": "2017-07-17T03:00:00.000Z",
        "categories": "blog",
        "tags": "javascript mustachejs json templating",
        "description": "Over the weekend, I created a simple messaging act appropriately called simple-messaging. After about 6-8 hours of work, I was able to create a functional prototype that allows for users to send dynamically generated messages to a list of users. Although there are established templating languages like mustache.js, I decided to use solely JSON & JS to create the templates needed for the messages and was really impressed with how robust, yet simple, it turned out in the end.",
        "comments": true,
        "path": "/articles/templating-with-solely-json",
        "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/templating-with-solely-json.md absPath of file"
      },
      "fileAbsolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/templating-with-solely-json.md"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/two-weeks-deep-into-coding-school.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/two-weeks-deep-into-coding-school.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/two-weeks-deep-into-coding-school.md absPath of file",
      "internal": {
        "content": "---\nlayout: post\ntitle: \"Two Weeks Deep Into Coding School\"\nauthor: Steve Frost\ndate: 2016-05-16 15:00:00 -04:00\ncategories: blog\ntags: flatiron-school learning-to-code\ndescription: \"How does it feel after attending a coding school for two weeks? I do a brief recap this week.\"\ncomments: true\npath: \"/articles/two-weeks-deep-into-coding-school\"\n\n---\n_(Day 16)_\n\nIt’s been awhile! I’m sitting down to write this to both fully flesh out what I’ve been through these past two weeks but also to fulfill my first blog assignment for Flatiron. The blog assignments are staggered throughout the course and will be a good reminder to take a break from reading code and start writing about it.\n\n**Flatiron’s Question**: Why did you decide to learn software development?\n\nI’ve realized this question has changed several times from the initial search for a program to actually starting at Flatiron but it typically revolves around a few points.\n\n* The desire to be in a field with continuous learning.\n* Having a career that involves creating and problem solving\n* Accepting a new challenge. See cliches including “never get comfortable”\n* Deeper understanding of my lifetime hobby of fooling with computers\n\nEach day in the Flatiron program is reassuring that these goals are being achieved at what sometimes seems like a break-neck pace and others, a snails. Though I am 5-6 years out of the learning environment, I have to say this seems harder than any learning I did in college. There are significant ebbs each week which are best represented by one of my recent tweets of passion.\n\nhttps://twitter.com/SteveEff/status/732026398106374144\n\nI have learned, struggled, and grown to a new level of resilience these past two weeks. The Flatiron Full Stack Web Development course has been quite the challenge and I am accepting it with open arms at each turn.\n\n“Nothing in the world is worth having or worth doing unless it means effort, pain, difficulty… I have never in my life envied a human being who led an easy life. I have envied a great many people who led difficult lives and led them well.” – Theodore Roosevelt\n",
        "contentDigest": "8e1110c6db435fdc405f49d0ea913b50",
        "type": "MarkdownRemark",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "Two Weeks Deep Into Coding School",
        "layout": "post",
        "author": "Steve Frost",
        "date": "2016-05-16T19:00:00.000Z",
        "categories": "blog",
        "tags": "flatiron-school learning-to-code",
        "description": "How does it feel after attending a coding school for two weeks? I do a brief recap this week.",
        "comments": true,
        "path": "/articles/two-weeks-deep-into-coding-school",
        "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/two-weeks-deep-into-coding-school.md absPath of file"
      },
      "fileAbsolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/two-weeks-deep-into-coding-school.md"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/unearthing-javascript-modules.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/unearthing-javascript-modules.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/unearthing-javascript-modules.md absPath of file",
      "internal": {
        "content": "---\nlayout: post\ntitle: \"Unearthing Javascript Modules\"\nauthor: Steve Frost\ndate: 2017-04-09 14:05:00 -04:00\ncategories: blog javascript\ntags: modules es6 organization node\ndescription: \"One of many joys of coding for me has always been organization. No, honestly. I'm the person who spends sunny Sunday afternoons re-alphabetizing the file cabinet or sorting the clothes in the closet by color... alphabetic color. All this considered, you can imagine how happy I was to find that the latest spec of Javascript, or the ES6/ES2015 specification, brought modules to the language as a way to organize and departmentalize code.\"\ncomments: true\npath: \"/articles/unearthing-javascript-modules\"\n---\n\n![containers-representing-modules](/img/blogs/javascriptmodule1.jpg)\n\nOne of many joys of coding for me has always been organization. No, honestly. I'm the person who spends sunny Sunday afternoons re-alphabetizing the file cabinet or sorting the clothes in the closet by color... alphabetic color. One birthday, my fiancé even bought me the book <a target=\"_blank\" href=\"http://amzn.to/2oPdkfv\">The Life-Changing Magic of Tidying Up: The Japanese Art of Decluttering and Organizing</a> which I recommend especially if you're smiling thinking of my file cabinet alphabetized. All this considered, you can imagine how happy I was to find that the latest spec of Javascript, or the [ES6/ES2015 specification](http://2ality.com/2014/09/es6-modules-final.html), brought modules to the language as a way to organize and departmentalize code.\n\n### What is a Module\n\nModules are Javascript's way of separating the concerns of a program into individual, sometimes reusable, pieces. The most accessible synopsis of modules comes from [FreeCodeCamp](https://www.freecodecamp.com/)'s Medium article, [Javascript Modules: A Beginner's Guide](https://medium.freecodecamp.com/javascript-modules-a-beginner-s-guide-783f7d7a5fcc). In this article they beautiful encapsulate the reasoning behind using modules and in turn, roughly define a module.\n\n> Good authors divide their books into chapters and sections; good programmers divide their programs into modules.\n\nThis works on a literal level and when looking into it deeper, it holds true throughout thinking of modules. Not only do we separate books & programs in sections but each section also contains similar content. In a book, each chapter is usually grouped by scene, characters, or plot point. This is a practical way to envision using modules. Each module should contain code that is for a single purpose. How you determine what to separate your code by – scene, characters, or plot – is up to you. There are [several approaches](https://dzone.com/articles/how-to-split-into-modules) to this which are entirely personal preference.\n\n### Benefits of Modules\n1. Reusability - this is a common theme with many emerging frameworks & libraries and it's no surprise many of them use some kind of module system. Instead of copying over code we'd like to use in a different section of the website, we can simply create a module, make it available to the entire app by exporting that code, and import it into the section we need.\n2. Maintainability - however we choose to separate the code, it will be easier to find and debug. For example, if I have a store that sells sunflower seeds and have separated my modules by feature then when I have an issue with the product listing page, I can look in my listing module. Contrived example, but effective.\n3. Namespacing - one of the common missteps in Javascript is polluting the global namespace. It is easy to do and quickly cause confusion on a large scale project. Javascript is different from most languages in that it has no scope level between global & local scopes. This leads to code that needs to be accessible from everywhere sharing the same global variable with unrelated code amongst other issues. Using modules we can \n\n### Using Modules\n\nAlmost three years later, many of the new features in ES6 are supported by major browsers with the exception of importing and exporting modules. There are compilers such as Babel that will help convert ES6 code into ES5 code that is more widely supported – more on that in a later blog. For now, know that using a compiler is a good idea if you're going to be using ES6.\n\n**Exporting Modules**: To export, we can either export using a _named export_ or a _default export_. These both use the `export` keyword but with slightly different syntax as you can see below.\n\n```javascript\n// in a file named activities.js\n\n// Named Export\nfunction biking() {\n    console.log(\"Airing up the tires\");\n}\n\nfunction running() {\n    console.log(\"Putting on shoes\");\n}\n\nexport {biking, running}\n\n// Default Export\nvar aerobics = {\n    biking: function() {\n        console.log(\"Airing up the tires\");\n    },\n    running: function() {\n        console.log(\"Putting on shoes\");\n    }\n};\n\nexport default aerobics\n```\n\n\n**Importing Modules**: Once there is a module exported, we can import it into another file using the `import` keyword. If the module was named when it was exported, we'll need to reference that name. If it was imported using `export default` then we can name it anything we'd like upon import.\n\n```javascript\n// in a file named sundayAfternoon.js\n\n// Named Import\nimport {biking, running} from 'activities'\n\n// Default Import\nimport aerobics from 'activities' // aerobics could be anything here\n```\n\n### Further Reading\nTo further understanding exactly what these `export` and `import` compile down to, I suggest reading through the [CommonJS module system](http://requirejs.org/docs/commonjs.html) which was inspiration for the ES6 spec. Basically, both ways of exporting and importing rely on an exports object with keys pertaining to either the full file or keys for each function, depending on which type of export being used. SitePoint also has a [great guide](https://www.sitepoint.com/understanding-es6-modules/) to ES6 Modules which goes over much of what is here as well as setup info for a simple compiler. Last, but not least, EloquentJS has an [exhaustive guide about modules](http://eloquentjavascript.net/10_modules.html) that was immensely helpful for understanding this topic.\n\nHopefully you will enjoy modules as much as I have. It may be my organizational lust, or obsession, but I really appreciate this feature. It seems like Javascript is ahead of other languages as far as speed & flexibility and had lagged behind without some type of import/export feature – even CSS beat JS to it with SASS's `@include`! Now our Javascript code can live by one of my favorite proverbs, \"a place for everything and everything in it's place.\"\n",
        "contentDigest": "8e6c54207da361b1b8c5533be7deabaf",
        "type": "MarkdownRemark",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "Unearthing Javascript Modules",
        "layout": "post",
        "author": "Steve Frost",
        "date": "2017-04-09T18:05:00.000Z",
        "categories": "blog javascript",
        "tags": "modules es6 organization node",
        "description": "One of many joys of coding for me has always been organization. No, honestly. I'm the person who spends sunny Sunday afternoons re-alphabetizing the file cabinet or sorting the clothes in the closet by color... alphabetic color. All this considered, you can imagine how happy I was to find that the latest spec of Javascript, or the ES6/ES2015 specification, brought modules to the language as a way to organize and departmentalize code.",
        "comments": true,
        "path": "/articles/unearthing-javascript-modules",
        "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/unearthing-javascript-modules.md absPath of file"
      },
      "fileAbsolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/unearthing-javascript-modules.md"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/using-homebrew-the-best-package-manager-for-macos.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/using-homebrew-the-best-package-manager-for-macos.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/using-homebrew-the-best-package-manager-for-macos.md absPath of file",
      "internal": {
        "content": "---\nlayout: post\ntitle: \"Using Homebrew - The Best Package Manager for MacOS\"\nauthor: Steve Frost\ndate: 2016-11-19 12:30:00 -04:00\nimage: '/img/blogs/homebrewlogo.png'\ncategories: blog\ntags: tools tips-and-tricks\ndescription: \"Homebrew is an incredible resource for new and old developers alike. Homebrew saves you time by compiling code, managing package dependencies, and much more!\"\ncomments: true\npath: \"/articles/using-homebrew-the-best-package-manager-for-macos\"\n---\n\n![HomebrewLogo](/img/blogs/homebrewlogo.png)\nIt is hard for me to hold back the excitement for [Homebrew](http://brew.sh/). It has saved me hundreds of hours, surely. If the feeling of frustration with juggling dependencies, root paths, compiling, repair, and updating packages is familiar, Homebrew is here to save you as well.\n\n**What is Homebrew?**\n\nWell, what is Homebrew you might be asking? Homebrew is a relatively new package manager - more on what \"package\" means later - that first saw light in 2009 and more recently reached v1.0 on Sept 21, 2016. Before Homebrew, Mac users had a similar manager called Macports which was really popular. The two share many qualities but also part in a few ways - mostly that Homebrew believes in avoiding patching whenever possible.\n\nSo what are packages? In the broad, most frequent sense, packages are [installable bundles of source code.](https://computers.tutsplus.com/tutorials/homebrew-demystified-os-xs-ultimate-package-manager--mac-44884) If you scour the internet you can find many official packages and some not so official - looking at you Jekyll-Test-Plugin-Malicious that has the tagline \"I will eat all of your code.\" Official packages usually come with a very supportive community and lots of people who have run into common issues but even with that, there are frequently issues I encouter that are specific to my operating system version, current environment, etc - and you will/have/always run into these kind of issues while installing packages.\n\nThis exact headache is why [Max Howell](https://twitter.com/mxcl), creator of Homebrew, came up with the idea. Well that, and he wanted a package manager that was beer themed because the \"puns to package manager ratio was far too low\" as [Mike McQuaid](https://twitter.com/MikeMcQuaid) hilariously referenced on [Oct 4th's Ruby on Rails podcast](http://5by5.tv/rubyonrails/221).\n\nNow that you know some of the backstory about Homebrew and what exactly it does, let's go over installing, typical use, and then some tips & tricks.\n\n\n**Installing Homebrew**\n\nTo install Homebrew, open up your Terminal and enter `/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"`. If you're curious what this script does, there is a description that is printed out in the terminal that includes that information. Once Homebrew is installed, any package can be installed via the command `brew package` i.e. `brew zzz` which is a package for a [command-line MacOS sleep program](https://github.com/Orc/Zzz). This will install the package into your Cellar according to the Formula. Here is a brief list of the common Homebrew puns/terms you'll come across.\n\n* Formula - the package definition\n* Keg - the installation prefix of a formula\n* Cellar - the place where all Kegs are stored\n* Tap - an optional git repository of formulae and/or commands\n* Bottle - when a pre-built keg is used instead of building from source\n* Cask - an [extension of homebrew](https://github.com/caskroom/homebrew-cask) to install macOS native apps\n* Brew Bundle - an [extension of homebrew](https://github.com/Homebrew/homebrew-bundle) to describe dependencies\n\n**Maintaining Homebrew**\n\nOkay, so you've gone hog wild with the puns, putting kegs in your cellar, tapping casks, and bonging repositories (not a real one) - how do you keep these all updated? Enter another wonderful thing about Homebrew. To update your packages, just use `brew upgrade` and Homebrew will search through your Cellar and upgrade all packages to the most recent source available. To keep Homebrew itself updated, that is simple - enter `brew update` in the Terminal. Each time Homebrew updates, new packages are made available to install.\n\n**Tips & Tricks**\n\n* `brew info kegname` displays info about that package\n* `brew cleanup` to remove older, unused Formula versions\n* `brew ls kegname` shows how the keg is arranged in your Cellar\n* `brew outdated` to see what is outdated and could use a `brew upgrade`\n* `brew pin kegname` will prevent a keg from being updated and `unpin` will undo\n\n**Conclusion**\n\nGive Homebrew a try and [let me know how](https://twitter.com/SteveEff) you like it. As a new Rails developer, it has been a godsend for installing things like geckodriver, imagemagick, and sqlite. While installing each of these manually, I came across issues that Homebrew easily resolved *and* I don't have to worry about keeping the packages up-to-date. Homebrew does a wonderful job of [documentation](https://github.com/Homebrew/brew/tree/master/docs) - THANK YOU - so you'll rarely be left in the dark. Even with these docs, there may be an issue or improvement to offer. If there is a way you can contribute, don't hesitate to fork, edit, and open a pull request to help out the community. Before investing your time, view the [FAQ](https://github.com/Homebrew/brew/blob/master/docs/FAQ.md) as that could answer the question or address the issue.\n\nEnjoy!\n",
        "contentDigest": "e9ba4e80ed822e6545f9f8f7e48f2244",
        "type": "MarkdownRemark",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "Using Homebrew - The Best Package Manager for MacOS",
        "layout": "post",
        "author": "Steve Frost",
        "date": "2016-11-19T16:30:00.000Z",
        "image": "/img/blogs/homebrewlogo.png",
        "categories": "blog",
        "tags": "tools tips-and-tricks",
        "description": "Homebrew is an incredible resource for new and old developers alike. Homebrew saves you time by compiling code, managing package dependencies, and much more!",
        "comments": true,
        "path": "/articles/using-homebrew-the-best-package-manager-for-macos",
        "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/using-homebrew-the-best-package-manager-for-macos.md absPath of file"
      },
      "fileAbsolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/using-homebrew-the-best-package-manager-for-macos.md"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/what-are-php-data-objects.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/what-are-php-data-objects.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/what-are-php-data-objects.md absPath of file",
      "internal": {
        "content": "---\nlayout: post\ntitle: \"What Are PHP Data Objects?\"\nauthor: Steve Frost\ndate: 2017-06-11 20:45:00 -04:00\ncategories: blog\ntags: sql\ndescription: \"Since I've been diving into PHP lately, I've been working my way through the former book and came upon the SQL chapter which had something interesting: PHP Data Objects, or PDO. My brief understanding of it is that it is a preferred way to avoid SQL Injection attacks. After reading around some about it, it sounds a lot like Active Record for Ruby. It is an abstraction on top of typical database commands that makes accessing it more predictable and secure.\"\ncomments: true\npath: \"/articles/what-are-php-data-objects\"\n---\n\nReading programming books is an essential part of learning for me, half because I learn well by seeing examples and half because I spend so much time on the subway in the morning and evening. Having a book like [PHP The Right Way](http://www.phptherightway.com) or You Don't Know JS let's me fill in gaps in my knowledge while zipping through the dim tunnels of Manhattan & Brooklyn.\n\nSince I've been diving into PHP lately, I've been working my way through the former book and came upon the [SQL chapter](http://www.phptherightway.com/#pdo_extension) which had something interesting: PHP Data Objects, or PDO. My brief understanding of it is that it is a preferred way to avoid SQL Injection attacks (see [Privacy Day post](https://steveafrost.com/protect-yoself-data-privacy-day-2017)). After reading around some about it, it sounds a lot like Active Record for Ruby. That is, it's an abstraction on top of typical database commands that makes accessing it more predictable and secure.\n\nPDO is not critical of what type of database it communicates with so it could be SQLite, MySQL, Postgres, etc. There are a few functions we can use within the PDO namespace to reveal information, connect to the database, set errors, and catch exceptions.\n\n* `PDO::getAvailableDrivers();` will reveal what drivers are available on your machine or remote server.\n* `$handler = new PDO('mysql:host=ipaddress;dbname=dbname', 'username', 'password');` to initiate a connection to the database using PDO.\n* `$handler->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);`\n* To catch this exception, use `PDOException`\n\nOnce you've created a new PDO object and initiated a connection with the database, use $handler->query to use any SQL command like SELECT, WHERE, FROM, etc. For example: `$handler->query('SELECT * FROM TABLE')`.\n\nFrom there, you can iterate and manipulate the data however you like. PDO provides numerous other methods for things like setting default fetch mode, fetch group, fetch by column, and so on. You can read about them all at the [\"only proper guide\" to PDO](https://phpdelusions.net/pdo).\n",
        "contentDigest": "45423d7bc78e5771d05e2f66c101e86b",
        "type": "MarkdownRemark",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "What Are PHP Data Objects?",
        "layout": "post",
        "author": "Steve Frost",
        "date": "2017-06-12T00:45:00.000Z",
        "categories": "blog",
        "tags": "sql",
        "description": "Since I've been diving into PHP lately, I've been working my way through the former book and came upon the SQL chapter which had something interesting: PHP Data Objects, or PDO. My brief understanding of it is that it is a preferred way to avoid SQL Injection attacks. After reading around some about it, it sounds a lot like Active Record for Ruby. It is an abstraction on top of typical database commands that makes accessing it more predictable and secure.",
        "comments": true,
        "path": "/articles/what-are-php-data-objects",
        "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/what-are-php-data-objects.md absPath of file"
      },
      "fileAbsolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/what-are-php-data-objects.md"
    },
    "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/wandering-through-javascript-closures.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/wandering-through-javascript-closures.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/wandering-through-javascript-closures.md absPath of file",
      "internal": {
        "content": "---\nlayout: post\ntitle: \"Wandering Through Javascript Closures\"\nauthor: Steve Frost\ndate: 2017-04-30 13:00:00 -04:00\ncategories: blog javascript\ntags: glossary closure\ndescription: \"Closures one of several terms I realized I glossed over when first learning the language. It is one of the topics that when you see it it's an 'okay that makes sense' reaction but to actually explain what is happening is the grander part of the understanding, at least with Closures.\"\ncomments: true\npath: \"/articles/wandering-through-javascript-closures\"\n---\n\n![javascript-closures-picture](/img/blogs/javascriptclosures1.jpg)\n\nClosures one of several terms I realized I glossed over when first learning the language. It is one of the topics that when you see it it's an \"okay that makes sense\" reaction but to actually explain what is happening is the grander part of the understanding, at least with Closures. One inspiration for relearning the term came from the wonderful synopsis provided in [\"You Don't Know JS\"](https://github.com/getify/You-Dont-Know-JS) which is an incredible collection of books for those who haven't read it yet. Heck, there's even an entire book titled [\"Scopes & Closures\"](https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20&%20closures/README.md#you-dont-know-js-scope--closures) which covers purely scopes & closures! \n\n### What is a Closure?\nThe core of understanding closures is understanding scope. Before trying to understand closures, try to read and have somewhat of a grasp on scope as far as what variables, functions, etc are available at different levels. For example, being comfortable with the following example is critical to understanding closure:\n\n```javascript\nvar fruitList = ['apples', 'oranges', 'tangerines']; // Level 1 Scope\n\nfunction collectFruit(fruitList) {\n\n    // we're able to access the arguments passed into the function and assign them to variables\n    var fruits = fruitList.join(', ') // Level 2 Scope\n\n    function makeShake() {\n        // we can access variables from outer scope - this is a closure!\n        var currentFruit = fruits; // Level 3 Scope\n        return currentFruit // => \"apples, oranges, tangerines\"\n    }\n\n    return currentFruit; // => Uncaught Reference Error: currentFruit is not defined. We *can't* access variables from inner scope\n\n    return makeShake;\n}\n\nshakeTime = collectFruit(fruitList) // => \"apples, oranges, tangerines\"\nshakeTime() // => \"apples, oranges, tangerines\"\n```\n\nBy working through a few instances of this situation by yourself, you'll get a firm grasp on both scope and in turn, closure. A closure is simply our inner function in this example and the idea that the inner function has access to the outer functions scope which includes all variables, arguments, etc. \n\nClosures, including our example, have access to three levels of scope: the inner function scope, outer function scope, and global scope. These are denoted by comments in the example to provide clarity.\n\nIf metaphors are helpful to you, FreeCodeCamp did a [Medium article](https://medium.freecodecamp.com/whats-a-javascript-closure-in-plain-english-please-6a1fc1d2ff1c) on how closures are similar to components in a car which provides a different way of thinking about the topic.\n\n### Using Closures\n\nNow that we've grasped what closures are, you'll start to see them everywhere. They are a common and powerful feature of Javascript. They are also found in many modern frameworks like Angular. While they're incredibly useful, it can be helpful to know [when to avoid closures](https://www.sitepoint.com/javascript-closures-demystified/) and use quicker, leaner parts of Javascript – for example, using the Prototype system over building your own with closures.\n\n### Glossary Series\n\nThe Glossary Series is a collection of terms I've previously never fully understood across all programming languages. Keeping this running glossary is useful to lay out what I know about a topic as well as provide a place to come back and update later as I learn more about the term. If you'd like to contribute an example or clarification, please leave it in the comments below.\n",
        "contentDigest": "cac48608f9080f34085997ebffdaa51a",
        "type": "MarkdownRemark",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": "Wandering Through Javascript Closures",
        "layout": "post",
        "author": "Steve Frost",
        "date": "2017-04-30T17:00:00.000Z",
        "categories": "blog javascript",
        "tags": "glossary closure",
        "description": "Closures one of several terms I realized I glossed over when first learning the language. It is one of the topics that when you see it it's an 'okay that makes sense' reaction but to actually explain what is happening is the grander part of the understanding, at least with Closures.",
        "comments": true,
        "path": "/articles/wandering-through-javascript-closures",
        "parent": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/wandering-through-javascript-closures.md absPath of file"
      },
      "fileAbsolutePath": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/articles/wandering-through-javascript-closures.md"
    },
    "SitePage /offline-plugin-app-shell-fallback/": {
      "path": "/offline-plugin-app-shell-fallback/",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/node_modules/gatsby-plugin-offline/app-shell.js",
      "componentChunkName": "page-component---node-modules-gatsby-plugin-offline-app-shell-js",
      "jsonName": "offline-plugin-app-shell-fallback.json",
      "internalComponentName": "ComponentOfflinePluginAppShellFallback",
      "context": {},
      "pluginCreator___NODE": "Plugin gatsby-plugin-offline",
      "id": "SitePage /offline-plugin-app-shell-fallback/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "b04cdf4e5bf2ca61392685b8e6f39355",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /articles/a-greenhorns-approach-to-angular": {
      "path": "/articles/a-greenhorns-approach-to-angular",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/templates/blog-post.js",
      "context": {
        "path": "/articles/a-greenhorns-approach-to-angular"
      },
      "componentChunkName": "page-component---src-templates-blog-post-js",
      "jsonName": "articles-a-greenhorns-approach-to-angular.json",
      "internalComponentName": "ComponentArticlesAGreenhornsApproachToAngular",
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "id": "SitePage /articles/a-greenhorns-approach-to-angular",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "74c2a5e79c430f99fbb0ba29e64c12c2",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /articles/building-a-website-using-middleman": {
      "path": "/articles/building-a-website-using-middleman",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/templates/blog-post.js",
      "context": {
        "path": "/articles/building-a-website-using-middleman"
      },
      "componentChunkName": "page-component---src-templates-blog-post-js",
      "jsonName": "articles-building-a-website-using-middleman.json",
      "internalComponentName": "ComponentArticlesBuildingAWebsiteUsingMiddleman",
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "id": "SitePage /articles/building-a-website-using-middleman",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "8265d448ba4cc5e5da0885bf1a354ed8",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /articles/busting-cache-with-asset-hash": {
      "path": "/articles/busting-cache-with-asset-hash",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/templates/blog-post.js",
      "context": {
        "path": "/articles/busting-cache-with-asset-hash"
      },
      "componentChunkName": "page-component---src-templates-blog-post-js",
      "jsonName": "articles-busting-cache-with-asset-hash.json",
      "internalComponentName": "ComponentArticlesBustingCacheWithAssetHash",
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "id": "SitePage /articles/busting-cache-with-asset-hash",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "86209a44828dc30127c58b45a6811704",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /articles/comparing-flexbox-and-grid": {
      "path": "/articles/comparing-flexbox-and-grid",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/templates/blog-post.js",
      "context": {
        "path": "/articles/comparing-flexbox-and-grid"
      },
      "componentChunkName": "page-component---src-templates-blog-post-js",
      "jsonName": "articles-comparing-flexbox-and-grid.json",
      "internalComponentName": "ComponentArticlesComparingFlexboxAndGrid",
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "id": "SitePage /articles/comparing-flexbox-and-grid",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "7642688b81e6581bf3f94c0381b1db41",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /articles/composing-a-crud-app-in-sinatra": {
      "path": "/articles/composing-a-crud-app-in-sinatra",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/templates/blog-post.js",
      "context": {
        "path": "/articles/composing-a-crud-app-in-sinatra"
      },
      "componentChunkName": "page-component---src-templates-blog-post-js",
      "jsonName": "articles-composing-a-crud-app-in-sinatra.json",
      "internalComponentName": "ComponentArticlesComposingACrudAppInSinatra",
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "id": "SitePage /articles/composing-a-crud-app-in-sinatra",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "4e2952e7f3a97ed57a9b28ae1473a8b5",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /articles/building-a-ruby-gem-the-experience": {
      "path": "/articles/building-a-ruby-gem-the-experience",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/templates/blog-post.js",
      "context": {
        "path": "/articles/building-a-ruby-gem-the-experience"
      },
      "componentChunkName": "page-component---src-templates-blog-post-js",
      "jsonName": "articles-building-a-ruby-gem-the-experience.json",
      "internalComponentName": "ComponentArticlesBuildingARubyGemTheExperience",
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "id": "SitePage /articles/building-a-ruby-gem-the-experience",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "0b3fc536f22040584f5c4eb436f90772",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /articles/dear-sprouting-developers": {
      "path": "/articles/dear-sprouting-developers",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/templates/blog-post.js",
      "context": {
        "path": "/articles/dear-sprouting-developers"
      },
      "componentChunkName": "page-component---src-templates-blog-post-js",
      "jsonName": "articles-dear-sprouting-developers.json",
      "internalComponentName": "ComponentArticlesDearSproutingDevelopers",
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "id": "SitePage /articles/dear-sprouting-developers",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "aa6d39a2056f44a3c6010ff1445b88fa",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /articles/code-pause-run-tell-that": {
      "path": "/articles/code-pause-run-tell-that",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/templates/blog-post.js",
      "context": {
        "path": "/articles/code-pause-run-tell-that"
      },
      "componentChunkName": "page-component---src-templates-blog-post-js",
      "jsonName": "articles-code-pause-run-tell-that.json",
      "internalComponentName": "ComponentArticlesCodePauseRunTellThat",
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "id": "SitePage /articles/code-pause-run-tell-that",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "c9f174cf3dd824826c357b7e20ec5897",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /articles/deploying-daily-documentary-rails-angular": {
      "path": "/articles/deploying-daily-documentary-rails-angular",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/templates/blog-post.js",
      "context": {
        "path": "/articles/deploying-daily-documentary-rails-angular"
      },
      "componentChunkName": "page-component---src-templates-blog-post-js",
      "jsonName": "articles-deploying-daily-documentary-rails-angular.json",
      "internalComponentName": "ComponentArticlesDeployingDailyDocumentaryRailsAngular",
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "id": "SitePage /articles/deploying-daily-documentary-rails-angular",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "85e161fdfb5f1cea007a988ee1969529",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /articles/first-impressions-gatsby-js": {
      "path": "/articles/first-impressions-gatsby-js",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/templates/blog-post.js",
      "context": {
        "path": "/articles/first-impressions-gatsby-js"
      },
      "componentChunkName": "page-component---src-templates-blog-post-js",
      "jsonName": "articles-first-impressions-gatsby-js.json",
      "internalComponentName": "ComponentArticlesFirstImpressionsGatsbyJs",
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "id": "SitePage /articles/first-impressions-gatsby-js",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "6ff460862af0ee3a42e944f5a057ec89",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /articles/exploring-active-record": {
      "path": "/articles/exploring-active-record",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/templates/blog-post.js",
      "context": {
        "path": "/articles/exploring-active-record"
      },
      "componentChunkName": "page-component---src-templates-blog-post-js",
      "jsonName": "articles-exploring-active-record.json",
      "internalComponentName": "ComponentArticlesExploringActiveRecord",
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "id": "SitePage /articles/exploring-active-record",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "c5c5ede79df140e8971ffe08e9665e91",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /articles/discovering-the-minimax-algorithm": {
      "path": "/articles/discovering-the-minimax-algorithm",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/templates/blog-post.js",
      "context": {
        "path": "/articles/discovering-the-minimax-algorithm"
      },
      "componentChunkName": "page-component---src-templates-blog-post-js",
      "jsonName": "articles-discovering-the-minimax-algorithm.json",
      "internalComponentName": "ComponentArticlesDiscoveringTheMinimaxAlgorithm",
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "id": "SitePage /articles/discovering-the-minimax-algorithm",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "77990234f4f10d91711fe0558baacfe0",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /articles/first-impressions-trellis": {
      "path": "/articles/first-impressions-trellis",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/templates/blog-post.js",
      "context": {
        "path": "/articles/first-impressions-trellis"
      },
      "componentChunkName": "page-component---src-templates-blog-post-js",
      "jsonName": "articles-first-impressions-trellis.json",
      "internalComponentName": "ComponentArticlesFirstImpressionsTrellis",
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "id": "SitePage /articles/first-impressions-trellis",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "7c3d2c1efa5c66c67a048586b4dc1574",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /articles/first-impressions-yarn-package-manager": {
      "path": "/articles/first-impressions-yarn-package-manager",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/templates/blog-post.js",
      "context": {
        "path": "/articles/first-impressions-yarn-package-manager"
      },
      "componentChunkName": "page-component---src-templates-blog-post-js",
      "jsonName": "articles-first-impressions-yarn-package-manager.json",
      "internalComponentName": "ComponentArticlesFirstImpressionsYarnPackageManager",
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "id": "SitePage /articles/first-impressions-yarn-package-manager",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "5d4cec70f61ae7819f9302fbbfd325a5",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /articles/laying-the-foundation-for-a-website": {
      "path": "/articles/laying-the-foundation-for-a-website",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/templates/blog-post.js",
      "context": {
        "path": "/articles/laying-the-foundation-for-a-website"
      },
      "componentChunkName": "page-component---src-templates-blog-post-js",
      "jsonName": "articles-laying-the-foundation-for-a-website.json",
      "internalComponentName": "ComponentArticlesLayingTheFoundationForAWebsite",
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "id": "SitePage /articles/laying-the-foundation-for-a-website",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "dd33212ba52adede4a643096bfb97620",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /articles/grasping-declarative-programming": {
      "path": "/articles/grasping-declarative-programming",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/templates/blog-post.js",
      "context": {
        "path": "/articles/grasping-declarative-programming"
      },
      "componentChunkName": "page-component---src-templates-blog-post-js",
      "jsonName": "articles-grasping-declarative-programming.json",
      "internalComponentName": "ComponentArticlesGraspingDeclarativeProgramming",
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "id": "SitePage /articles/grasping-declarative-programming",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "eba84020999057cc5cc261da4a54a4f8",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /articles/honeypotting-simple-spam-prevention": {
      "path": "/articles/honeypotting-simple-spam-prevention",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/templates/blog-post.js",
      "context": {
        "path": "/articles/honeypotting-simple-spam-prevention"
      },
      "componentChunkName": "page-component---src-templates-blog-post-js",
      "jsonName": "articles-honeypotting-simple-spam-prevention.json",
      "internalComponentName": "ComponentArticlesHoneypottingSimpleSpamPrevention",
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "id": "SitePage /articles/honeypotting-simple-spam-prevention",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "e8abbd71b6c6033c4ca1aee6f8c22fe1",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /articles/learning-a-second-programming-language": {
      "path": "/articles/learning-a-second-programming-language",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/templates/blog-post.js",
      "context": {
        "path": "/articles/learning-a-second-programming-language"
      },
      "componentChunkName": "page-component---src-templates-blog-post-js",
      "jsonName": "articles-learning-a-second-programming-language.json",
      "internalComponentName": "ComponentArticlesLearningASecondProgrammingLanguage",
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "id": "SitePage /articles/learning-a-second-programming-language",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "71b1bd52935c3a0a90e5ebbabf2da3ab",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /articles/javascript-type-coercion": {
      "path": "/articles/javascript-type-coercion",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/templates/blog-post.js",
      "context": {
        "path": "/articles/javascript-type-coercion"
      },
      "componentChunkName": "page-component---src-templates-blog-post-js",
      "jsonName": "articles-javascript-type-coercion.json",
      "internalComponentName": "ComponentArticlesJavascriptTypeCoercion",
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "id": "SitePage /articles/javascript-type-coercion",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "89cc20ebf80e20287cdba3cfb4dae725",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /articles/object-models-in-ruby": {
      "path": "/articles/object-models-in-ruby",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/templates/blog-post.js",
      "context": {
        "path": "/articles/object-models-in-ruby"
      },
      "componentChunkName": "page-component---src-templates-blog-post-js",
      "jsonName": "articles-object-models-in-ruby.json",
      "internalComponentName": "ComponentArticlesObjectModelsInRuby",
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "id": "SitePage /articles/object-models-in-ruby",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "e58924bd569925cae8a6635b34e8a2dd",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /articles/learning-crud-with-monster-trucks": {
      "path": "/articles/learning-crud-with-monster-trucks",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/templates/blog-post.js",
      "context": {
        "path": "/articles/learning-crud-with-monster-trucks"
      },
      "componentChunkName": "page-component---src-templates-blog-post-js",
      "jsonName": "articles-learning-crud-with-monster-trucks.json",
      "internalComponentName": "ComponentArticlesLearningCrudWithMonsterTrucks",
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "id": "SitePage /articles/learning-crud-with-monster-trucks",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "95e5a86809aafe45750cbf5409cfcdbb",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /articles/preprocessing-bundling-and-live-preview-with-gulp": {
      "path": "/articles/preprocessing-bundling-and-live-preview-with-gulp",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/templates/blog-post.js",
      "context": {
        "path": "/articles/preprocessing-bundling-and-live-preview-with-gulp"
      },
      "componentChunkName": "page-component---src-templates-blog-post-js",
      "jsonName": "articles-preprocessing-bundling-and-live-preview-with-gulp.json",
      "internalComponentName": "ComponentArticlesPreprocessingBundlingAndLivePreviewWithGulp",
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "id": "SitePage /articles/preprocessing-bundling-and-live-preview-with-gulp",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "6bed0621acafc5b6b1f44a3d1feccf0a",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /articles/long-days-journey-into-web-development": {
      "path": "/articles/long-days-journey-into-web-development",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/templates/blog-post.js",
      "context": {
        "path": "/articles/long-days-journey-into-web-development"
      },
      "componentChunkName": "page-component---src-templates-blog-post-js",
      "jsonName": "articles-long-days-journey-into-web-development.json",
      "internalComponentName": "ComponentArticlesLongDaysJourneyIntoWebDevelopment",
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "id": "SitePage /articles/long-days-journey-into-web-development",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "a9af883381be642e69ec9664b4b85307",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /articles/questioning-the-quirks-of-php": {
      "path": "/articles/questioning-the-quirks-of-php",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/templates/blog-post.js",
      "context": {
        "path": "/articles/questioning-the-quirks-of-php"
      },
      "componentChunkName": "page-component---src-templates-blog-post-js",
      "jsonName": "articles-questioning-the-quirks-of-php.json",
      "internalComponentName": "ComponentArticlesQuestioningTheQuirksOfPhp",
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "id": "SitePage /articles/questioning-the-quirks-of-php",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "65ff659e3ddc40c0ebb0eee7183edccc",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /articles/plant-nanny-keep-your-plants-happy": {
      "path": "/articles/plant-nanny-keep-your-plants-happy",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/templates/blog-post.js",
      "context": {
        "path": "/articles/plant-nanny-keep-your-plants-happy"
      },
      "componentChunkName": "page-component---src-templates-blog-post-js",
      "jsonName": "articles-plant-nanny-keep-your-plants-happy.json",
      "internalComponentName": "ComponentArticlesPlantNannyKeepYourPlantsHappy",
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "id": "SitePage /articles/plant-nanny-keep-your-plants-happy",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "a6ef17f4cec1b7c2e906a4e8e0f2d722",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /articles/protect-yoself-data-privacy-day-2017": {
      "path": "/articles/protect-yoself-data-privacy-day-2017",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/templates/blog-post.js",
      "context": {
        "path": "/articles/protect-yoself-data-privacy-day-2017"
      },
      "componentChunkName": "page-component---src-templates-blog-post-js",
      "jsonName": "articles-protect-yoself-data-privacy-day-2017.json",
      "internalComponentName": "ComponentArticlesProtectYoselfDataPrivacyDay2017",
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "id": "SitePage /articles/protect-yoself-data-privacy-day-2017",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "82139b36d50cd30d89a27de02da25926",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /articles/quirks-of-display-inline-block": {
      "path": "/articles/quirks-of-display-inline-block",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/templates/blog-post.js",
      "context": {
        "path": "/articles/quirks-of-display-inline-block"
      },
      "componentChunkName": "page-component---src-templates-blog-post-js",
      "jsonName": "articles-quirks-of-display-inline-block.json",
      "internalComponentName": "ComponentArticlesQuirksOfDisplayInlineBlock",
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "id": "SitePage /articles/quirks-of-display-inline-block",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "857e105589482c9e7b9ccf147abd0517",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /articles/responsive-css-with-rems-and-ems": {
      "path": "/articles/responsive-css-with-rems-and-ems",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/templates/blog-post.js",
      "context": {
        "path": "/articles/responsive-css-with-rems-and-ems"
      },
      "componentChunkName": "page-component---src-templates-blog-post-js",
      "jsonName": "articles-responsive-css-with-rems-and-ems.json",
      "internalComponentName": "ComponentArticlesResponsiveCssWithRemsAndEms",
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "id": "SitePage /articles/responsive-css-with-rems-and-ems",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "894a6ec1930c53c4715d5331267aaa2e",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /articles/regex-lookahead-and-lookbehind": {
      "path": "/articles/regex-lookahead-and-lookbehind",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/templates/blog-post.js",
      "context": {
        "path": "/articles/regex-lookahead-and-lookbehind"
      },
      "componentChunkName": "page-component---src-templates-blog-post-js",
      "jsonName": "articles-regex-lookahead-and-lookbehind.json",
      "internalComponentName": "ComponentArticlesRegexLookaheadAndLookbehind",
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "id": "SitePage /articles/regex-lookahead-and-lookbehind",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "cb614b14b33d5315f2a2b55f40d57e5b",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /articles/staying-focused-staying-sharp": {
      "path": "/articles/staying-focused-staying-sharp",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/templates/blog-post.js",
      "context": {
        "path": "/articles/staying-focused-staying-sharp"
      },
      "componentChunkName": "page-component---src-templates-blog-post-js",
      "jsonName": "articles-staying-focused-staying-sharp.json",
      "internalComponentName": "ComponentArticlesStayingFocusedStayingSharp",
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "id": "SitePage /articles/staying-focused-staying-sharp",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "bc3c7ea1f984016fa81074f1ee354389",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /articles/setting-up-a-local-wordpress-environment": {
      "path": "/articles/setting-up-a-local-wordpress-environment",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/templates/blog-post.js",
      "context": {
        "path": "/articles/setting-up-a-local-wordpress-environment"
      },
      "componentChunkName": "page-component---src-templates-blog-post-js",
      "jsonName": "articles-setting-up-a-local-wordpress-environment.json",
      "internalComponentName": "ComponentArticlesSettingUpALocalWordpressEnvironment",
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "id": "SitePage /articles/setting-up-a-local-wordpress-environment",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "c85919acfa06ec93d4ff215af17b1506",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /articles/templating-with-solely-json": {
      "path": "/articles/templating-with-solely-json",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/templates/blog-post.js",
      "context": {
        "path": "/articles/templating-with-solely-json"
      },
      "componentChunkName": "page-component---src-templates-blog-post-js",
      "jsonName": "articles-templating-with-solely-json.json",
      "internalComponentName": "ComponentArticlesTemplatingWithSolelyJson",
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "id": "SitePage /articles/templating-with-solely-json",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "d51d9e50efc4732dfc01b92e506f3cca",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /articles/two-weeks-deep-into-coding-school": {
      "path": "/articles/two-weeks-deep-into-coding-school",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/templates/blog-post.js",
      "context": {
        "path": "/articles/two-weeks-deep-into-coding-school"
      },
      "componentChunkName": "page-component---src-templates-blog-post-js",
      "jsonName": "articles-two-weeks-deep-into-coding-school.json",
      "internalComponentName": "ComponentArticlesTwoWeeksDeepIntoCodingSchool",
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "id": "SitePage /articles/two-weeks-deep-into-coding-school",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "87b9affac618f8de8c35ab27c3450c9f",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /articles/unearthing-javascript-modules": {
      "path": "/articles/unearthing-javascript-modules",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/templates/blog-post.js",
      "context": {
        "path": "/articles/unearthing-javascript-modules"
      },
      "componentChunkName": "page-component---src-templates-blog-post-js",
      "jsonName": "articles-unearthing-javascript-modules.json",
      "internalComponentName": "ComponentArticlesUnearthingJavascriptModules",
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "id": "SitePage /articles/unearthing-javascript-modules",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "dc51100ea0c8db97a42d083735c49c7e",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /articles/using-homebrew-the-best-package-manager-for-macos": {
      "path": "/articles/using-homebrew-the-best-package-manager-for-macos",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/templates/blog-post.js",
      "context": {
        "path": "/articles/using-homebrew-the-best-package-manager-for-macos"
      },
      "componentChunkName": "page-component---src-templates-blog-post-js",
      "jsonName": "articles-using-homebrew-the-best-package-manager-for-macos.json",
      "internalComponentName": "ComponentArticlesUsingHomebrewTheBestPackageManagerForMacos",
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "id": "SitePage /articles/using-homebrew-the-best-package-manager-for-macos",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "98327a8383058e493a6e79401ae102fd",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /articles/what-are-php-data-objects": {
      "path": "/articles/what-are-php-data-objects",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/templates/blog-post.js",
      "context": {
        "path": "/articles/what-are-php-data-objects"
      },
      "componentChunkName": "page-component---src-templates-blog-post-js",
      "jsonName": "articles-what-are-php-data-objects.json",
      "internalComponentName": "ComponentArticlesWhatArePhpDataObjects",
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "id": "SitePage /articles/what-are-php-data-objects",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "5147cbb75f7f78eaf4fa97c81fcc15d8",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /articles/wandering-through-javascript-closures": {
      "path": "/articles/wandering-through-javascript-closures",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/templates/blog-post.js",
      "context": {
        "path": "/articles/wandering-through-javascript-closures"
      },
      "componentChunkName": "page-component---src-templates-blog-post-js",
      "jsonName": "articles-wandering-through-javascript-closures.json",
      "internalComponentName": "ComponentArticlesWanderingThroughJavascriptClosures",
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "id": "SitePage /articles/wandering-through-javascript-closures",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "bbcc35248c8dce089ba3ecaff1135739",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /": {
      "path": "/",
      "component": "/Users/stevefrost/Development/Websites/steveafrost.github.io/src/pages/index.js",
      "componentChunkName": "page-component---src-pages-index-js",
      "jsonName": "index.json",
      "internalComponentName": "ComponentIndex",
      "context": {},
      "pluginCreator___NODE": "Plugin component-page-creator",
      "id": "SitePage /",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "f4d65a485d30d3084eab0949fe3d4d06",
        "owner": "internal-data-bridge"
      }
    }
  },
  "status": {
    "plugins": {},
    "PLUGINS_HASH": "86b51447f7b44474dde8d13e0f473781"
  },
  "pageDataDependencies": {
    "nodes": {},
    "connections": {}
  }
}